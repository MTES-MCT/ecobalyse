#!/usr/bin/env node

/**
 * This script generates JSON Db fixtures so tests can perform assertions
 * against actual JSON data without having to rely on Http requests, which
 * is impossible in an Elm test environment.
 */
require("dotenv").config();
const fs = require("fs");
const lib = require("../lib");

// Env vars
const { ECOBALYSE_DATA_DIR, NODE_ENV } = process.env;

console.log(`Building database for the ${NODE_ENV} envâ€¦`);

let dataFiles;
try {
  dataFiles = lib.getDataFiles(ECOBALYSE_DATA_DIR);
} catch (err) {
  console.error(`ðŸš¨ ERROR: ${err.message}`);
  process.exit(1);
}

function parseAndValidate(path, idKeyName = "id") {
  const raw = JSON.parse(fs.readFileSync(path).toString());
  if (idKeyName && Array.isArray(raw)) {
    try {
      validatePrimaryKeys(raw, idKeyName);
    } catch (err) {
      console.error(`ðŸš¨ ERROR building ${path}:\n   ${err}`);
      process.exit(1);
    }
  }
  // Adapts a standard JSON string to what is expected to be the format
  // used in Elm's template strings (`"""{}"""`).
  return JSON.stringify(raw).replaceAll("\\", "\\\\");
}

/**
 * Validates that unique identifiers are actually unique in provided datasource.
 */
function validatePrimaryKeys(records, idKeyName) {
  const ids = records.map((record) => record[idKeyName]).sort();
  const duplicates = ids.filter((item, index) => ids.indexOf(item) !== index);
  if (duplicates.length > 0) {
    throw new Error(`Duplicate ${idKeyName}: ${duplicates}`);
  }
}

const targetDbFile = "src/Static/Json.elm";
const elmTemplate = fs.readFileSync(`${targetDbFile}-template`).toString();
const elmWithFixtures = elmTemplate
  // Transverse JSON data
  .replace("%countriesJson%", parseAndValidate("public/data/countries.json", "code"))
  .replace("%impactsJson%", parseAndValidate("public/data/impacts.json"))
  .replace("%transportsJson%", parseAndValidate("public/data/transports.json"))
  // Food JSON data
  .replace("%foodIngredientsJson%", parseAndValidate("public/data/food/ingredients.json", "id"))
  .replace(
    "%foodProcessesJson%",
    parseAndValidate(NODE_ENV === "test" ? dataFiles.foodDetailed : dataFiles.foodNoDetails, "id"),
  )
  .replace("%foodProductExamplesJson%", parseAndValidate("public/data/food/examples.json", "id"))
  // Textile JSON data
  .replace("%textileMaterialsJson%", parseAndValidate("public/data/textile/materials.json", "id"))
  .replace(
    "%textileProcessesJson%",
    parseAndValidate(
      NODE_ENV === "test" ? dataFiles.textileDetailed : dataFiles.textileNoDetails,
      "uuid",
    ),
  )
  .replace(
    "%textileProductExamplesJson%",
    parseAndValidate("public/data/textile/examples.json", "id"),
  )
  .replace("%textileProductsJson%", parseAndValidate("public/data/textile/products.json", "id"));

const header =
  "---- THIS FILE WAS GENERATED FROM THE FILE `Json.elm-template` BY THE `/bin/build-db` SCRIPT";

try {
  fs.writeFileSync(targetDbFile, `${header}\n\n${elmWithFixtures}`);
  const fileSizeInKB = Math.ceil(fs.statSync(targetDbFile).size / 1024);
  console.log(`Successfully generated Elm static database at ${targetDbFile} (${fileSizeInKB}Â KB)`);
} catch (err) {
  throw new Error(`Unable to generate Elm static database: ${err}`);
}
