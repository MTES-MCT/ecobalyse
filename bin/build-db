#!/usr/bin/env node

/**
 * This script generates JSON Db fixtures so tests can perform assertions
 * against actual JSON data without having to rely on Http requests, which
 * is impossible in an Elm test environment.
 */
const fs = require("fs");
const textileProcesses = process.env.TEXTILE_PROCESSES || "public/data/textile/processes.json";
const foodProcesses = process.env.FOOD_PROCESSES || "public/data/food/processes.json";

function getJson(path) {
  const raw = JSON.parse(fs.readFileSync(path).toString());
  // Adapts a standard JSON string to what is expected to be the format
  // used in Elm's template strings (`"""{}"""`).
  return JSON.stringify(raw).replaceAll("\\", "\\\\");
}

const targetDbFile = "src/Static/Json.elm";
const elmTemplate = fs.readFileSync(`${targetDbFile}-template`).toString();
const elmWithFixtures = elmTemplate
  // Transverse JSON data
  .replace("%countriesJson%", getJson("public/data/countries.json"))
  .replace("%impactsJson%", getJson("public/data/impacts.json"))
  .replace("%transportsJson%", getJson("public/data/transports.json"))
  // Food JSON data
  .replace("%foodIngredientsJson%", getJson("public/data/food/ingredients.json"))
  .replace("%foodProcessesJson%", getJson(foodProcesses))
  .replace("%foodProductExamplesJson%", getJson("public/data/food/examples.json"))
  // Textile JSON data
  .replace("%textileMaterialsJson%", getJson("public/data/textile/materials.json"))
  .replace("%textileProcessesJson%", getJson(textileProcesses))
  .replace("%textileProductExamplesJson%", getJson("public/data/textile/examples.json"))
  .replace("%textileProductsJson%", getJson("public/data/textile/products.json"));

const header =
  "---- THIS FILE WAS GENERATED FROM THE FILE `Json.elm-template` BY THE `/bin/build-db` SCRIPT";

try {
  fs.writeFileSync(targetDbFile, `${header}\n\n${elmWithFixtures}`);
  const fileSizeInKB = Math.ceil(fs.statSync(targetDbFile).size / 1024);
  console.log(`Successfully generated Elm static database at ${targetDbFile} (${fileSizeInKB}Â KB)`);
} catch (err) {
  throw new Error(`Unable to generate Elm static database: ${err}`);
}
