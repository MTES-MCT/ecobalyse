// elm-watch hot {"version":"1.0.2","webSocketPort":59209}
"use strict";
(() => {
  // node_modules/tiny-decoders/index.mjs
  function number(value) {
    if (typeof value !== "number") {
      throw new DecoderError({ tag: "number", got: value });
    }
    return value;
  }
  function string(value) {
    if (typeof value !== "string") {
      throw new DecoderError({ tag: "string", got: value });
    }
    return value;
  }
  function stringUnion(mapping) {
    return function stringUnionDecoder(value) {
      const str = string(value);
      if (!Object.prototype.hasOwnProperty.call(mapping, str)) {
        throw new DecoderError({
          tag: "unknown stringUnion variant",
          knownVariants: Object.keys(mapping),
          got: str
        });
      }
      return str;
    };
  }
  function unknownArray(value) {
    if (!Array.isArray(value)) {
      throw new DecoderError({ tag: "array", got: value });
    }
    return value;
  }
  function unknownRecord(value) {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
      throw new DecoderError({ tag: "object", got: value });
    }
    return value;
  }
  function array(decoder) {
    return function arrayDecoder(value) {
      const arr = unknownArray(value);
      const result = [];
      for (let index = 0; index < arr.length; index++) {
        try {
          result.push(decoder(arr[index]));
        } catch (error) {
          throw DecoderError.at(error, index);
        }
      }
      return result;
    };
  }
  function record(decoder) {
    return function recordDecoder(value) {
      const object = unknownRecord(value);
      const keys = Object.keys(object);
      const result = {};
      for (const key of keys) {
        if (key === "__proto__") {
          continue;
        }
        try {
          result[key] = decoder(object[key]);
        } catch (error) {
          throw DecoderError.at(error, key);
        }
      }
      return result;
    };
  }
  function fields(callback, { exact = "allow extra", allow = "object" } = {}) {
    return function fieldsDecoder(value) {
      const object = allow === "array" ? unknownArray(value) : unknownRecord(value);
      const knownFields = /* @__PURE__ */ Object.create(null);
      function field(key, decoder) {
        try {
          const result2 = decoder(object[key]);
          knownFields[key] = null;
          return result2;
        } catch (error) {
          throw DecoderError.at(error, key);
        }
      }
      const result = callback(field, object);
      if (exact !== "allow extra") {
        const unknownFields = Object.keys(object).filter((key) => !Object.prototype.hasOwnProperty.call(knownFields, key));
        if (unknownFields.length > 0) {
          throw new DecoderError({
            tag: "exact fields",
            knownFields: Object.keys(knownFields),
            got: unknownFields
          });
        }
      }
      return result;
    };
  }
  function fieldsAuto(mapping, { exact = "allow extra" } = {}) {
    return function fieldsAutoDecoder(value) {
      const object = unknownRecord(value);
      const keys = Object.keys(mapping);
      const result = {};
      for (const key of keys) {
        if (key === "__proto__") {
          continue;
        }
        const decoder = mapping[key];
        try {
          result[key] = decoder(object[key]);
        } catch (error) {
          throw DecoderError.at(error, key);
        }
      }
      if (exact !== "allow extra") {
        const unknownFields = Object.keys(object).filter((key) => !Object.prototype.hasOwnProperty.call(mapping, key));
        if (unknownFields.length > 0) {
          throw new DecoderError({
            tag: "exact fields",
            knownFields: keys,
            got: unknownFields
          });
        }
      }
      return result;
    };
  }
  function fieldsUnion(key, mapping) {
    return fields(function fieldsUnionFields(field, object) {
      const tag = field(key, string);
      if (Object.prototype.hasOwnProperty.call(mapping, tag)) {
        const decoder = mapping[tag];
        return decoder(object);
      }
      throw new DecoderError({
        tag: "unknown fieldsUnion tag",
        knownTags: Object.keys(mapping),
        got: tag,
        key
      });
    });
  }
  function multi(mapping) {
    return function multiDecoder(value) {
      if (value === void 0) {
        if (mapping.undefined !== void 0) {
          return mapping.undefined(value);
        }
      } else if (value === null) {
        if (mapping.null !== void 0) {
          return mapping.null(value);
        }
      } else if (typeof value === "boolean") {
        if (mapping.boolean !== void 0) {
          return mapping.boolean(value);
        }
      } else if (typeof value === "number") {
        if (mapping.number !== void 0) {
          return mapping.number(value);
        }
      } else if (typeof value === "string") {
        if (mapping.string !== void 0) {
          return mapping.string(value);
        }
      } else if (Array.isArray(value)) {
        if (mapping.array !== void 0) {
          return mapping.array(value);
        }
      } else {
        if (mapping.object !== void 0) {
          return mapping.object(value);
        }
      }
      throw new DecoderError({
        tag: "unknown multi type",
        knownTypes: Object.keys(mapping),
        got: value
      });
    };
  }
  function chain(decoder, next) {
    return function chainDecoder(value) {
      return next(decoder(value));
    };
  }
  function formatDecoderErrorVariant(variant, options) {
    const formatGot = (value) => {
      const formatted = repr(value, options);
      return (options === null || options === void 0 ? void 0 : options.sensitive) === true ? `${formatted}
(Actual values are hidden in sensitive mode.)` : formatted;
    };
    const stringList = (strings) => strings.length === 0 ? "(none)" : strings.map((s) => JSON.stringify(s)).join(", ");
    const got = (message, value) => value === DecoderError.MISSING_VALUE ? message : `${message}
Got: ${formatGot(value)}`;
    switch (variant.tag) {
      case "boolean":
      case "number":
      case "string":
        return got(`Expected a ${variant.tag}`, variant.got);
      case "array":
      case "object":
        return got(`Expected an ${variant.tag}`, variant.got);
      case "unknown multi type":
        return `Expected one of these types: ${variant.knownTypes.length === 0 ? "never" : variant.knownTypes.join(", ")}
Got: ${formatGot(variant.got)}`;
      case "unknown fieldsUnion tag":
        return `Expected one of these tags: ${stringList(variant.knownTags)}
Got: ${formatGot(variant.got)}`;
      case "unknown stringUnion variant":
        return `Expected one of these variants: ${stringList(variant.knownVariants)}
Got: ${formatGot(variant.got)}`;
      case "exact fields":
        return `Expected only these fields: ${stringList(variant.knownFields)}
Found extra fields: ${formatGot(variant.got).replace(/^\[|\]$/g, "")}`;
      case "tuple size":
        return `Expected ${variant.expected} items
Got: ${variant.got}`;
      case "custom":
        return got(variant.message, variant.got);
    }
  }
  var DecoderError = class extends TypeError {
    constructor({ key, ...params }) {
      const variant = "tag" in params ? params : { tag: "custom", message: params.message, got: params.value };
      super(`${formatDecoderErrorVariant(
        variant,
        { sensitive: true }
      )}

For better error messages, see https://github.com/lydell/tiny-decoders#error-messages`);
      this.path = key === void 0 ? [] : [key];
      this.variant = variant;
      this.nullable = false;
      this.optional = false;
    }
    static at(error, key) {
      if (error instanceof DecoderError) {
        if (key !== void 0) {
          error.path.unshift(key);
        }
        return error;
      }
      return new DecoderError({
        tag: "custom",
        message: error instanceof Error ? error.message : String(error),
        got: DecoderError.MISSING_VALUE,
        key
      });
    }
    format(options) {
      const path = this.path.map((part) => `[${JSON.stringify(part)}]`).join("");
      const nullableString = this.nullable ? " (nullable)" : "";
      const optionalString = this.optional ? " (optional)" : "";
      const variant = formatDecoderErrorVariant(this.variant, options);
      return `At root${path}${nullableString}${optionalString}:
${variant}`;
    }
  };
  DecoderError.MISSING_VALUE = Symbol("DecoderError.MISSING_VALUE");
  function repr(value, { recurse = true, maxArrayChildren = 5, maxObjectChildren = 3, maxLength = 100, recurseMaxLength = 20, sensitive = false } = {}) {
    const type = typeof value;
    const toStringType = Object.prototype.toString.call(value).replace(/^\[object\s+(.+)\]$/, "$1");
    try {
      if (value == null || type === "number" || type === "boolean" || type === "symbol" || toStringType === "RegExp") {
        return sensitive ? toStringType.toLowerCase() : truncate(String(value), maxLength);
      }
      if (type === "string") {
        return sensitive ? type : truncate(JSON.stringify(value), maxLength);
      }
      if (typeof value === "function") {
        return `function ${truncate(JSON.stringify(value.name), maxLength)}`;
      }
      if (Array.isArray(value)) {
        const arr = value;
        if (!recurse && arr.length > 0) {
          return `${toStringType}(${arr.length})`;
        }
        const lastIndex = arr.length - 1;
        const items = [];
        const end = Math.min(maxArrayChildren - 1, lastIndex);
        for (let index = 0; index <= end; index++) {
          const item = index in arr ? repr(arr[index], {
            recurse: false,
            maxLength: recurseMaxLength,
            sensitive
          }) : "<empty>";
          items.push(item);
        }
        if (end < lastIndex) {
          items.push(`(${lastIndex - end} more)`);
        }
        return `[${items.join(", ")}]`;
      }
      if (toStringType === "Object") {
        const object = value;
        const keys = Object.keys(object);
        const { name } = object.constructor;
        if (!recurse && keys.length > 0) {
          return `${name}(${keys.length})`;
        }
        const numHidden = Math.max(0, keys.length - maxObjectChildren);
        const items = keys.slice(0, maxObjectChildren).map((key2) => `${truncate(JSON.stringify(key2), recurseMaxLength)}: ${repr(object[key2], {
          recurse: false,
          maxLength: recurseMaxLength,
          sensitive
        })}`).concat(numHidden > 0 ? `(${numHidden} more)` : []);
        const prefix = name === "Object" ? "" : `${name} `;
        return `${prefix}{${items.join(", ")}}`;
      }
      return toStringType;
    } catch (_error) {
      return toStringType;
    }
  }
  function truncate(str, maxLength) {
    const half = Math.floor(maxLength / 2);
    return str.length <= maxLength ? str : `${str.slice(0, half)}\u2026${str.slice(-half)}`;
  }

  // src/Helpers.ts
  function join(array2, separator) {
    return array2.join(separator);
  }
  function pad(number2) {
    return number2.toString().padStart(2, "0");
  }
  function formatDate(date) {
    return join(
      [pad(date.getFullYear()), pad(date.getMonth() + 1), pad(date.getDate())],
      "-"
    );
  }
  function formatTime(date) {
    return join(
      [pad(date.getHours()), pad(date.getMinutes()), pad(date.getSeconds())],
      ":"
    );
  }

  // src/TeaProgram.ts
  async function runTeaProgram(options) {
    return new Promise((resolve, reject) => {
      const [initialModel, initialCmds] = options.init;
      let model = initialModel;
      const msgQueue = [];
      let killed = false;
      const dispatch = (dispatchedMsg) => {
        if (killed) {
          return;
        }
        const alreadyRunning = msgQueue.length > 0;
        msgQueue.push(dispatchedMsg);
        if (alreadyRunning) {
          return;
        }
        for (const msg of msgQueue) {
          const [newModel, cmds] = options.update(msg, model);
          model = newModel;
          runCmds(cmds);
        }
        msgQueue.length = 0;
      };
      const runCmds = (cmds) => {
        for (const cmd of cmds) {
          options.runCmd(
            cmd,
            mutable,
            dispatch,
            (result) => {
              cmds.length = 0;
              killed = true;
              resolve(result);
            },
            (error) => {
              cmds.length = 0;
              killed = true;
              reject(error);
            }
          );
          if (killed) {
            break;
          }
        }
      };
      const mutable = options.initMutable(
        dispatch,
        (result) => {
          killed = true;
          resolve(result);
        },
        (error) => {
          killed = true;
          reject(error);
        }
      );
      runCmds(initialCmds);
    });
  }

  // src/Types.ts
  var CompilationMode = stringUnion({
    debug: null,
    standard: null,
    optimize: null
  });

  // client/WebSocketMessages.ts
  var FocusedTabAcknowledged = fieldsAuto({
    tag: () => "FocusedTabAcknowledged"
  });
  var StatusChanged = fieldsAuto({
    tag: () => "StatusChanged",
    status: fieldsUnion("tag", {
      AlreadyUpToDate: fieldsAuto({
        tag: () => "AlreadyUpToDate",
        compilationMode: CompilationMode
      }),
      Busy: fieldsAuto({
        tag: () => "Busy",
        compilationMode: CompilationMode
      }),
      CompileError: fieldsAuto({
        tag: () => "CompileError",
        compilationMode: CompilationMode
      }),
      ClientError: fieldsAuto({
        tag: () => "ClientError",
        message: string
      })
    })
  });
  var SuccessfullyCompiled = fieldsAuto({
    tag: () => "SuccessfullyCompiled",
    code: string,
    elmCompiledTimestamp: number,
    compilationMode: CompilationMode
  });
  var SuccessfullyCompiledButRecordFieldsChanged = fieldsAuto({
    tag: () => "SuccessfullyCompiledButRecordFieldsChanged"
  });
  var WebSocketToClientMessage = fieldsUnion("tag", {
    FocusedTabAcknowledged,
    StatusChanged,
    SuccessfullyCompiled,
    SuccessfullyCompiledButRecordFieldsChanged
  });
  var WebSocketToServerMessage = fieldsUnion("tag", {
    ChangedCompilationMode: fieldsAuto({
      tag: () => "ChangedCompilationMode",
      compilationMode: CompilationMode
    }),
    FocusedTab: fieldsAuto({
      tag: () => "FocusedTab"
    })
  });
  function decodeWebSocketToClientMessage(message) {
    if (message.startsWith("//")) {
      const newlineIndexRaw = message.indexOf("\n");
      const newlineIndex = newlineIndexRaw === -1 ? message.length : newlineIndexRaw;
      const jsonString = message.slice(2, newlineIndex);
      const parsed = SuccessfullyCompiled(JSON.parse(jsonString));
      return { ...parsed, code: message };
    } else {
      return WebSocketToClientMessage(JSON.parse(message));
    }
  }

  // client/client.ts
  window.__ELM_WATCH_MOCKED_TIMINGS ?? (window.__ELM_WATCH_MOCKED_TIMINGS = false);
  window.__ELM_WATCH_WEBSOCKET_TIMEOUT ?? (window.__ELM_WATCH_WEBSOCKET_TIMEOUT = 1e3);
  window.__ELM_WATCH_ON_INIT ?? (window.__ELM_WATCH_ON_INIT = () => {
  });
  window.__ELM_WATCH_ON_RENDER ?? (window.__ELM_WATCH_ON_RENDER = () => {
  });
  window.__ELM_WATCH_ON_REACHED_IDLE_STATE ?? (window.__ELM_WATCH_ON_REACHED_IDLE_STATE = () => {
  });
  window.__ELM_WATCH_RELOAD_STATUSES ?? (window.__ELM_WATCH_RELOAD_STATUSES = {});
  var RELOAD_MESSAGE_KEY = "__elmWatchReloadMessage";
  window.__ELM_WATCH_RELOAD_PAGE ?? (window.__ELM_WATCH_RELOAD_PAGE = (message) => {
    if (message !== void 0) {
      try {
        window.sessionStorage.setItem(RELOAD_MESSAGE_KEY, message);
      } catch {
      }
    }
    window.location.reload();
  });
  window.__ELM_WATCH_KILL_MATCHING ?? (window.__ELM_WATCH_KILL_MATCHING = () => Promise.resolve());
  window.__ELM_WATCH_DISCONNECT ?? (window.__ELM_WATCH_DISCONNECT = () => {
  });
  window.__ELM_WATCH_LOG_DEBUG ?? (window.__ELM_WATCH_LOG_DEBUG = console.debug);
  var VERSION = "1.0.2";
  var TARGET_NAME = "My target name";
  var INITIAL_ELM_COMPILED_TIMESTAMP = Number(
    "1663237112715"
  );
  var ORIGINAL_COMPILATION_MODE = "standard";
  var WEBSOCKET_PORT = "59209";
  var CONTAINER_ID = "elm-watch";
  var DEBUG = String("false") === "true";
  var SEND_KEY_DO_NOT_USE_ALL_THE_TIME = Symbol(
    "This value is supposed to only be obtained via `Status`."
  );
  function logDebug(...args) {
    if (DEBUG) {
      window.__ELM_WATCH_LOG_DEBUG(...args);
    }
  }
  function run() {
    try {
      const message = window.sessionStorage.getItem(RELOAD_MESSAGE_KEY);
      if (message !== null) {
        console.info(message);
        window.sessionStorage.removeItem(RELOAD_MESSAGE_KEY);
      }
    } catch {
    }
    const container = getOrCreateContainer();
    const { shadowRoot } = container;
    if (shadowRoot === null) {
      throw new Error(
        `elm-watch: Cannot set up hot reload, because an element with ID ${CONTAINER_ID} exists, but \`.shadowRoot\` is null!`
      );
    }
    let root = shadowRoot.querySelector(`.${CLASS.root}`);
    if (root === null) {
      root = h(HTMLDivElement, { className: CLASS.root });
      shadowRoot.append(root);
    }
    const existingTargetRoot = Array.from(root.children).find(
      (element) => element.getAttribute("data-target") === TARGET_NAME
    );
    if (existingTargetRoot !== void 0) {
      return;
    }
    const targetRoot = createTargetRoot(TARGET_NAME);
    root.append(targetRoot);
    const getNow = () => new Date();
    runTeaProgram({
      initMutable: initMutable(getNow, targetRoot),
      init: init(getNow()),
      update: (msg, model) => {
        const [updatedModel, cmds] = update(msg, model);
        const modelChanged = updatedModel !== model;
        const newModel = modelChanged ? {
          ...updatedModel,
          previousStatusTag: model.status.tag
        } : model;
        const allCmds = modelChanged ? [
          ...cmds,
          {
            tag: "UpdateGlobalStatus",
            reloadStatus: statusToReloadStatus(newModel.status)
          },
          {
            tag: "Render",
            model: newModel,
            manageFocus: msg.tag === "UiMsg"
          }
        ] : cmds;
        logDebug(`${msg.tag} (${TARGET_NAME})`, msg, newModel, allCmds);
        return [newModel, allCmds];
      },
      runCmd: runCmd(getNow, targetRoot)
    }).catch((error) => {
      console.error("elm-watch: Unexpectedly exited with error:", error);
    });
  }
  function statusToReloadStatus(status) {
    switch (status.tag) {
      case "Busy":
      case "Connecting":
        return { tag: "MightWantToReload" };
      case "CompileError":
      case "EvalError":
      case "Idle":
      case "SleepingBeforeReconnect":
      case "UnexpectedError":
        return { tag: "NoReloadWanted" };
      case "WaitingForReload":
        return { tag: "ReloadRequested", reasons: status.reasons };
    }
  }
  function statusToStatusType(statusTag) {
    switch (statusTag) {
      case "Idle":
        return "Success";
      case "Busy":
      case "Connecting":
      case "SleepingBeforeReconnect":
      case "WaitingForReload":
        return "Waiting";
      case "CompileError":
      case "EvalError":
      case "UnexpectedError":
        return "Error";
    }
  }
  function getOrCreateContainer() {
    const existing = document.getElementById(CONTAINER_ID);
    if (existing !== null) {
      return existing;
    }
    const container = h(HTMLDivElement, { id: CONTAINER_ID });
    container.style.all = "unset";
    container.style.position = "fixed";
    container.style.zIndex = "2147483647";
    container.style.left = "-1px";
    container.style.bottom = "-1px";
    const shadowRoot = container.attachShadow({ mode: "open" });
    shadowRoot.append(h(HTMLStyleElement, {}, CSS));
    document.documentElement.append(container);
    return container;
  }
  function createTargetRoot(targetName) {
    return h(HTMLDivElement, {
      className: CLASS.targetRoot,
      attrs: { "data-target": targetName }
    });
  }
  var initMutable = (getNow, targetRoot) => (dispatch, resolvePromise) => {
    const removeListeners = [
      addEventListener(window, "focus", (event) => {
        if (event instanceof CustomEvent && event.detail !== TARGET_NAME) {
          return;
        }
        dispatch({ tag: "FocusedTab" });
      }),
      addEventListener(window, "visibilitychange", () => {
        if (document.visibilityState === "visible") {
          dispatch({ tag: "PageVisibilityChangedToVisible", date: getNow() });
        }
      })
    ];
    const mutable = {
      removeListeners: () => {
        for (const removeListener of removeListeners) {
          removeListener();
        }
      },
      webSocket: initWebSocket(
        getNow,
        INITIAL_ELM_COMPILED_TIMESTAMP,
        dispatch
      ),
      webSocketTimeoutId: void 0
    };
    window.__ELM_WATCH_RELOAD_STATUSES[TARGET_NAME] = {
      tag: "MightWantToReload"
    };
    const originalOnInit = window.__ELM_WATCH_ON_INIT;
    window.__ELM_WATCH_ON_INIT = () => {
      dispatch({ tag: "AppInit" });
      originalOnInit();
    };
    const originalKillMatching = window.__ELM_WATCH_KILL_MATCHING;
    window.__ELM_WATCH_KILL_MATCHING = (targetName) => new Promise((resolve, reject) => {
      if (targetName.test(TARGET_NAME) && mutable.webSocket.readyState !== WebSocket.CLOSED) {
        mutable.webSocket.addEventListener("close", () => {
          originalKillMatching(targetName).then(resolve).catch(reject);
        });
        mutable.removeListeners();
        mutable.webSocket.close();
        if (mutable.webSocketTimeoutId !== void 0) {
          clearTimeout(mutable.webSocketTimeoutId);
          mutable.webSocketTimeoutId = void 0;
        }
        targetRoot.remove();
        resolvePromise(void 0);
      } else {
        originalKillMatching(targetName).then(resolve).catch(reject);
      }
    });
    const originalDisconnect = window.__ELM_WATCH_DISCONNECT;
    window.__ELM_WATCH_DISCONNECT = (targetName) => {
      if (targetName.test(TARGET_NAME) && mutable.webSocket.readyState !== WebSocket.CLOSED) {
        mutable.webSocket.close();
      } else {
        originalDisconnect(targetName);
      }
    };
    return mutable;
  };
  function addEventListener(target, eventName, listener) {
    target.addEventListener(eventName, listener);
    return () => {
      target.removeEventListener(eventName, listener);
    };
  }
  function initWebSocket(getNow, elmCompiledTimestamp, dispatch) {
    const hostname = window.location.hostname === "" ? "localhost" : window.location.hostname;
    const url = new URL(`ws://${hostname}:${WEBSOCKET_PORT}/`);
    url.searchParams.set("elmWatchVersion", VERSION);
    url.searchParams.set("targetName", TARGET_NAME);
    url.searchParams.set("elmCompiledTimestamp", elmCompiledTimestamp.toString());
    const webSocket = new WebSocket(url);
    webSocket.addEventListener("open", () => {
      dispatch({ tag: "WebSocketConnected", date: getNow() });
    });
    webSocket.addEventListener("close", () => {
      dispatch({
        tag: "WebSocketClosed",
        date: getNow()
      });
    });
    webSocket.addEventListener("message", (event) => {
      dispatch({
        tag: "WebSocketMessageReceived",
        date: getNow(),
        data: event.data
      });
    });
    return webSocket;
  }
  var init = (date) => {
    const status = { tag: "Connecting", date, attemptNumber: 1 };
    const model = {
      status,
      previousStatusTag: status.tag,
      compilationMode: ORIGINAL_COMPILATION_MODE,
      elmCompiledTimestamp: INITIAL_ELM_COMPILED_TIMESTAMP,
      uiExpanded: false
    };
    return [model, [{ tag: "Render", model, manageFocus: false }]];
  };
  function update(msg, model) {
    switch (msg.tag) {
      case "AppInit":
        return [{ ...model }, []];
      case "EvalErrored":
        return [
          {
            ...model,
            status: { tag: "EvalError", date: msg.date },
            uiExpanded: true
          },
          [
            {
              tag: "TriggerReachedIdleState",
              reason: "EvalErrored"
            }
          ]
        ];
      case "EvalNeedsReload":
        return [
          {
            ...model,
            status: {
              tag: "WaitingForReload",
              date: msg.date,
              reasons: msg.reasons
            },
            uiExpanded: true
          },
          []
        ];
      case "EvalSucceeded":
        return [
          {
            ...model,
            status: {
              tag: "Idle",
              date: msg.date,
              sendKey: SEND_KEY_DO_NOT_USE_ALL_THE_TIME
            }
          },
          [
            {
              tag: "TriggerReachedIdleState",
              reason: "EvalSucceeded"
            }
          ]
        ];
      case "FocusedTab":
        return [
          statusToStatusType(model.status.tag) === "Error" ? { ...model } : model,
          model.status.tag === "Idle" ? [
            {
              tag: "SendMessage",
              message: { tag: "FocusedTab" },
              sendKey: model.status.sendKey
            },
            {
              tag: "WebSocketTimeoutBegin"
            }
          ] : []
        ];
      case "PageVisibilityChangedToVisible":
        return reconnect(model, msg.date, { force: true });
      case "SleepBeforeReconnectDone":
        return reconnect(model, msg.date, { force: false });
      case "UiMsg":
        return onUiMsg(msg.date, msg.msg, model);
      case "WebSocketClosed": {
        const attemptNumber = "attemptNumber" in model.status ? model.status.attemptNumber + 1 : 1;
        return [
          {
            ...model,
            status: {
              tag: "SleepingBeforeReconnect",
              date: msg.date,
              attemptNumber
            }
          },
          [{ tag: "SleepBeforeReconnect", attemptNumber }]
        ];
      }
      case "WebSocketConnected":
        return [{ ...model, status: { tag: "Busy", date: msg.date } }, []];
      case "WebSocketMessageReceived": {
        const result = parseWebSocketMessageData(msg.data);
        switch (result.tag) {
          case "Success":
            return onWebSocketToClientMessage(msg.date, result.message, model);
          case "Error":
            return [
              {
                ...model,
                status: {
                  tag: "UnexpectedError",
                  date: msg.date,
                  message: result.message
                },
                uiExpanded: true
              },
              []
            ];
        }
      }
    }
  }
  function onUiMsg(date, msg, model) {
    switch (msg.tag) {
      case "ChangedCompilationMode":
        return [
          {
            ...model,
            status: { tag: "Busy", date },
            compilationMode: msg.compilationMode
          },
          [
            {
              tag: "SendMessage",
              message: {
                tag: "ChangedCompilationMode",
                compilationMode: msg.compilationMode
              },
              sendKey: msg.sendKey
            }
          ]
        ];
      case "PressedChevron":
        return [{ ...model, uiExpanded: !model.uiExpanded }, []];
      case "PressedReconnectNow":
        return reconnect(model, date, { force: true });
    }
  }
  function onWebSocketToClientMessage(date, msg, model) {
    switch (msg.tag) {
      case "FocusedTabAcknowledged":
        return [model, [{ tag: "WebSocketTimeoutClear" }]];
      case "StatusChanged":
        return statusChanged(date, msg, model);
      case "SuccessfullyCompiled":
        return msg.compilationMode !== ORIGINAL_COMPILATION_MODE ? [
          {
            ...model,
            status: {
              tag: "WaitingForReload",
              date,
              reasons: ORIGINAL_COMPILATION_MODE === "proxy" ? [] : [
                `compilation mode changed from ${ORIGINAL_COMPILATION_MODE} to ${msg.compilationMode}.`
              ]
            },
            compilationMode: msg.compilationMode
          },
          []
        ] : [
          {
            ...model,
            compilationMode: msg.compilationMode,
            elmCompiledTimestamp: msg.elmCompiledTimestamp
          },
          [{ tag: "Eval", code: msg.code }]
        ];
      case "SuccessfullyCompiledButRecordFieldsChanged":
        return [
          {
            ...model,
            status: {
              tag: "WaitingForReload",
              date,
              reasons: [
                `record field mangling in optimize mode was different than last time.`
              ]
            }
          },
          []
        ];
    }
  }
  function statusChanged(date, { status }, model) {
    switch (status.tag) {
      case "AlreadyUpToDate":
        return [
          {
            ...model,
            status: {
              tag: "Idle",
              date,
              sendKey: SEND_KEY_DO_NOT_USE_ALL_THE_TIME
            },
            compilationMode: status.compilationMode
          },
          [
            {
              tag: "TriggerReachedIdleState",
              reason: "AlreadyUpToDate"
            }
          ]
        ];
      case "Busy":
        return [
          {
            ...model,
            status: {
              tag: "Busy",
              date
            },
            compilationMode: status.compilationMode
          },
          []
        ];
      case "ClientError":
        return [
          {
            ...model,
            status: { tag: "UnexpectedError", date, message: status.message },
            uiExpanded: true
          },
          [
            {
              tag: "TriggerReachedIdleState",
              reason: "ClientError"
            }
          ]
        ];
      case "CompileError":
        return [
          {
            ...model,
            status: {
              tag: "CompileError",
              date,
              sendKey: SEND_KEY_DO_NOT_USE_ALL_THE_TIME
            },
            compilationMode: status.compilationMode
          },
          [
            {
              tag: "TriggerReachedIdleState",
              reason: "CompileError"
            }
          ]
        ];
    }
  }
  function reconnect(model, date, { force }) {
    return model.status.tag === "SleepingBeforeReconnect" && (date.getTime() - model.status.date.getTime() >= retryWaitMs(model.status.attemptNumber) || force) ? [
      {
        ...model,
        status: {
          tag: "Connecting",
          date,
          attemptNumber: model.status.attemptNumber
        }
      },
      [
        {
          tag: "Reconnect",
          elmCompiledTimestamp: model.elmCompiledTimestamp
        }
      ]
    ] : [model, []];
  }
  function retryWaitMs(attemptNumber) {
    return Math.min(1e3 + 10 * attemptNumber ** 2, 1e3 * 60);
  }
  function printRetryWaitMs(attemptNumber) {
    return `${retryWaitMs(attemptNumber) / 1e3} seconds`;
  }
  var runCmd = (getNow, targetRoot) => (cmd, mutable, dispatch, _resolvePromise, rejectPromise) => {
    switch (cmd.tag) {
      case "Eval": {
        const f = new Function(cmd.code);
        try {
          f();
          dispatch({ tag: "EvalSucceeded", date: getNow() });
        } catch (unknownError) {
          if (unknownError instanceof Error && unknownError.message.startsWith("ELM_WATCH_RELOAD_NEEDED")) {
            dispatch({
              tag: "EvalNeedsReload",
              date: getNow(),
              reasons: unknownError.message.split("\n\n---\n\n").slice(1)
            });
          } else {
            void Promise.reject(unknownError);
            dispatch({ tag: "EvalErrored", date: getNow() });
          }
        }
        return;
      }
      case "Reconnect":
        mutable.webSocket = initWebSocket(
          getNow,
          cmd.elmCompiledTimestamp,
          dispatch
        );
        return;
      case "Render":
        render(
          getNow,
          targetRoot,
          dispatch,
          cmd.model,
          {
            version: VERSION,
            webSocketUrl: mutable.webSocket.url,
            targetName: TARGET_NAME,
            originalCompilationMode: ORIGINAL_COMPILATION_MODE,
            initializedElmAppsStatus: checkInitializedElmAppsStatus()
          },
          cmd.manageFocus
        );
        return;
      case "SendMessage":
        mutable.webSocket.send(JSON.stringify(cmd.message));
        return;
      case "SleepBeforeReconnect":
        setTimeout(() => {
          if (document.visibilityState === "visible") {
            dispatch({ tag: "SleepBeforeReconnectDone", date: getNow() });
          }
        }, retryWaitMs(cmd.attemptNumber));
        return;
      case "TriggerReachedIdleState":
        Promise.resolve().then(() => {
          window.__ELM_WATCH_ON_REACHED_IDLE_STATE(cmd.reason);
        }).catch(rejectPromise);
        return;
      case "UpdateGlobalStatus":
        window.__ELM_WATCH_RELOAD_STATUSES[TARGET_NAME] = cmd.reloadStatus;
        reloadPageIfNeeded();
        return;
      case "WebSocketTimeoutBegin":
        if (mutable.webSocketTimeoutId === void 0) {
          mutable.webSocketTimeoutId = setTimeout(() => {
            mutable.webSocketTimeoutId = void 0;
            mutable.webSocket.close();
            dispatch({
              tag: "WebSocketClosed",
              date: getNow()
            });
          }, window.__ELM_WATCH_WEBSOCKET_TIMEOUT);
        }
        return;
      case "WebSocketTimeoutClear":
        if (mutable.webSocketTimeoutId !== void 0) {
          clearTimeout(mutable.webSocketTimeoutId);
          mutable.webSocketTimeoutId = void 0;
        }
        return;
    }
  };
  function parseWebSocketMessageData(data) {
    try {
      return {
        tag: "Success",
        message: decodeWebSocketToClientMessage(string(data))
      };
    } catch (unknownError) {
      return {
        tag: "Error",
        message: `Failed to decode web socket message sent from the server:
${possiblyDecodeErrorToString(
          unknownError
        )}`
      };
    }
  }
  function possiblyDecodeErrorToString(unknownError) {
    return unknownError instanceof DecoderError ? unknownError.format() : unknownError instanceof Error ? unknownError.message : repr(unknownError);
  }
  function functionToNull(value) {
    return typeof value === "function" ? null : value;
  }
  var ProgramType = stringUnion({
    "Platform.worker": null,
    "Browser.sandbox": null,
    "Browser.element": null,
    "Browser.document": null,
    "Browser.application": null,
    Html: null
  });
  var ElmModule = chain(
    record(
      chain(
        functionToNull,
        multi({
          null: () => [],
          array: array(
            fields((field) => field("__elmWatchProgramType", ProgramType))
          ),
          object: (value) => ElmModule(value)
        })
      )
    ),
    (record2) => Object.values(record2).flat()
  );
  var ProgramTypes = fields((field) => field("Elm", ElmModule));
  function checkInitializedElmAppsStatus() {
    if (window.Elm !== void 0 && "__elmWatchProxy" in window.Elm) {
      return {
        tag: "DebuggerModeStatus",
        status: {
          tag: "Disabled",
          reason: noDebuggerYetReason
        }
      };
    }
    let programTypes;
    try {
      programTypes = ProgramTypes(window);
    } catch (unknownError) {
      return {
        tag: "DecodeError",
        message: possiblyDecodeErrorToString(unknownError)
      };
    }
    if (programTypes.length === 0) {
      return { tag: "NoProgramsAtAll" };
    }
    const noDebugger = programTypes.filter((programType) => {
      switch (programType) {
        case "Platform.worker":
        case "Html":
          return true;
        case "Browser.sandbox":
        case "Browser.element":
        case "Browser.document":
        case "Browser.application":
          return false;
      }
    });
    return {
      tag: "DebuggerModeStatus",
      status: noDebugger.length === programTypes.length ? {
        tag: "Disabled",
        reason: noDebuggerReason(new Set(noDebugger))
      } : { tag: "Enabled" }
    };
  }
  function reloadPageIfNeeded() {
    let shouldReload = false;
    const reasons = [];
    for (const [targetName, reloadStatus] of Object.entries(
      window.__ELM_WATCH_RELOAD_STATUSES
    )) {
      switch (reloadStatus.tag) {
        case "MightWantToReload":
          return;
        case "NoReloadWanted":
          break;
        case "ReloadRequested":
          shouldReload = true;
          if (reloadStatus.reasons.length > 0) {
            reasons.push([targetName, reloadStatus.reasons]);
          }
          break;
      }
    }
    if (!shouldReload) {
      return;
    }
    const first = reasons[0];
    const [separator, reasonString] = reasons.length === 1 && first !== void 0 && first[1].length === 1 ? [" ", `${first[1].join("")}
(target: ${first[0]})`] : [
      ":\n\n",
      reasons.map(
        ([targetName, subReasons]) => [
          targetName,
          ...subReasons.map((subReason) => `- ${subReason}`)
        ].join("\n")
      ).join("\n\n")
    ];
    const message = reasons.length === 0 ? void 0 : `elm-watch: I did a full page reload because${separator}${reasonString}`;
    window.__ELM_WATCH_RELOAD_STATUSES = {};
    window.__ELM_WATCH_RELOAD_PAGE(message);
  }
  function h(t, {
    attrs,
    localName,
    ...props
  }, ...children) {
    const element = document.createElement(
      localName ?? t.name.replace(/^HTML(\w+)Element$/, "$1").replace("Anchor", "a").replace("Paragraph", "p").replace(/^([DOU])List$/, "$1l").toLowerCase()
    );
    Object.assign(element, props);
    if (attrs !== void 0) {
      for (const [key, value] of Object.entries(attrs)) {
        element.setAttribute(key, value);
      }
    }
    for (const child of children) {
      if (child !== void 0) {
        element.append(
          typeof child === "string" ? document.createTextNode(child) : child
        );
      }
    }
    return element;
  }
  function render(getNow, targetRoot, dispatch, model, info, manageFocus) {
    targetRoot.classList.toggle(
      CLASS.targetRootBottomHalf,
      getIsPositionedInBottomHalf(targetRoot)
    );
    targetRoot.replaceChildren(
      view(
        (msg) => {
          dispatch({ tag: "UiMsg", date: getNow(), msg });
        },
        model,
        info,
        manageFocus
      )
    );
    const firstFocusableElement = targetRoot.querySelector(`button, [tabindex]`);
    if (manageFocus && firstFocusableElement instanceof HTMLElement) {
      firstFocusableElement.focus();
    }
    window.__ELM_WATCH_ON_RENDER(TARGET_NAME);
  }
  function getIsPositionedInBottomHalf(targetRoot) {
    const { top, height } = targetRoot.getBoundingClientRect();
    return top + height / 2 > window.innerHeight / 2;
  }
  var CLASS = {
    chevronButton: "chevronButton",
    compilationModeWithIcon: "compilationModeWithIcon",
    container: "container",
    debugModeIcon: "debugModeIcon",
    expandedUiContainer: "expandedUiContainer",
    flashError: "flashError",
    flashSuccess: "flashSuccess",
    root: "root",
    shortStatusContainer: "shortStatusContainer",
    targetName: "targetName",
    targetRoot: "targetRoot",
    targetRootBottomHalf: "targetRootBottomHalf"
  };
  function getStatusClass({
    statusType,
    statusTypeChanged,
    hasReceivedHotReload,
    uiRelatedUpdate
  }) {
    switch (statusType) {
      case "Success":
        return statusTypeChanged && hasReceivedHotReload ? CLASS.flashSuccess : void 0;
      case "Error":
        return uiRelatedUpdate ? void 0 : CLASS.flashError;
      case "Waiting":
        return void 0;
    }
  }
  var CSS = `
pre {
  margin: 0;
  white-space: pre-wrap;
  border-left: 0.25em solid var(--grey);
  padding-left: 0.5em;
}

input,
button,
select,
textarea {
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  margin: 0;
}

fieldset {
  display: grid;
  gap: 0.25em;
  margin: 0;
  border: 1px solid var(--grey);
  padding: 0.25em 0.75em 0.5em;
}

fieldset:disabled {
  color: var(--grey);
}

p,
dd {
  margin: 0;
}

dl {
  display: grid;
  grid-template-columns: auto auto;
  gap: 0.25em 1em;
  margin: 0;
  white-space: nowrap;
}

dt {
  text-align: right;
  color: var(--grey);
}

time {
  display: inline-grid;
  overflow: hidden;
}

time::after {
  content: attr(data-format);
  visibility: hidden;
  height: 0;
}

.${CLASS.root} {
  --grey: #767676;
  display: flex;
  align-items: start;
  overflow: auto;
  max-height: 100vh;
  max-width: 100vw;
  color: black;
  font-family: system-ui;
}

.${CLASS.targetRootBottomHalf} {
  align-self: end;
}

.${CLASS.targetRoot} + .${CLASS.targetRoot} {
  margin-left: -1px;
}

.${CLASS.targetRoot}:only-of-type .${CLASS.debugModeIcon},
.${CLASS.targetRoot}:only-of-type .${CLASS.targetName} {
  display: none;
}

.${CLASS.container} {
  display: flex;
  flex-direction: column-reverse;
  background-color: white;
  border: 1px solid var(--grey);
}

.${CLASS.targetRootBottomHalf} .${CLASS.container} {
  flex-direction: column;
}

.${CLASS.expandedUiContainer} {
  padding: 0.75em 1em;
  display: grid;
  gap: 0.75em;
  outline: none;
}

.${CLASS.expandedUiContainer}:is(.length0, .length1) {
  grid-template-columns: min-content;
}

.${CLASS.expandedUiContainer} > dl {
  justify-self: start;
}

.${CLASS.expandedUiContainer} label {
  display: grid;
  grid-template-columns: min-content auto;
  align-items: center;
  gap: 0.25em;
}

.${CLASS.expandedUiContainer} label.Disabled {
  color: var(--grey);
}

.${CLASS.expandedUiContainer} label > small {
  grid-column: 2;
}

.${CLASS.compilationModeWithIcon} {
  display: flex;
  align-items: center;
  gap: 0.25em;
}

.${CLASS.shortStatusContainer} {
  line-height: 1;
  padding: 0.25em;
  cursor: pointer;
  user-select: none;
  display: flex;
  align-items: center;
  gap: 0.25em;
}

.${CLASS.flashError}::before,
.${CLASS.flashSuccess}::before {
  content: "";
  position: absolute;
  margin-top: 0.5em;
  margin-left: 0.5em;
  --size: min(500px, 100vmin);
  width: var(--size);
  height: var(--size);
  border-radius: 50%;
  animation: flash 0.7s 0.05s ease-out both;
  pointer-events: none;
}

.${CLASS.flashError}::before {
  background-color: #eb0000;
}

.${CLASS.flashSuccess}::before {
  background-color: #00b600;
}

@keyframes flash {
  from {
    transform: translate(-50%, -50%) scale(0);
    opacity: 0.9;
  }

  to {
    transform: translate(-50%, -50%) scale(1);
    opacity: 0;
  }
}

@keyframes nudge {
  from {
    opacity: 0;
  }

  to {
    opacity: 0.8;
  }
}

@media (prefers-reduced-motion: reduce) {
  .${CLASS.flashError}::before,
  .${CLASS.flashSuccess}::before {
    transform: translate(-50%, -50%);
    width: 2em;
    height: 2em;
    animation: nudge 0.25s ease-in-out 4 alternate forwards;
  }
}

.${CLASS.chevronButton} {
  appearance: none;
  border: none;
  border-radius: 0;
  background: none;
  padding: 0;
  cursor: pointer;
}
`;
  function view(dispatch, passedModel, info, manageFocus) {
    const model = window.__ELM_WATCH_MOCKED_TIMINGS ? {
      ...passedModel,
      status: {
        ...passedModel.status,
        date: new Date("2022-02-05T13:10:05Z")
      }
    } : passedModel;
    const statusData = viewStatus(
      dispatch,
      model.status,
      model.compilationMode,
      info
    );
    const statusType = statusToStatusType(model.status.tag);
    const statusTypeChanged = statusType !== statusToStatusType(model.previousStatusTag);
    const statusClass = getStatusClass({
      statusType,
      statusTypeChanged,
      hasReceivedHotReload: model.elmCompiledTimestamp !== INITIAL_ELM_COMPILED_TIMESTAMP,
      uiRelatedUpdate: manageFocus
    });
    return h(
      HTMLDivElement,
      { className: CLASS.container },
      model.uiExpanded ? viewExpandedUi(model.status, statusData, info) : void 0,
      h(
        HTMLDivElement,
        {
          className: CLASS.shortStatusContainer,
          onclick: () => {
            dispatch({ tag: "PressedChevron" });
          }
        },
        h(
          HTMLButtonElement,
          {
            className: CLASS.chevronButton,
            attrs: { "aria-expanded": model.uiExpanded.toString() }
          },
          icon(
            model.uiExpanded ? "\u25B2" : "\u25BC",
            model.uiExpanded ? "Collapse elm-watch" : "Expand elm-watch"
          )
        ),
        compilationModeIcon(model.compilationMode),
        icon(
          statusData.icon,
          statusData.status,
          statusClass === void 0 ? {} : {
            className: statusClass,
            onanimationend: (event) => {
              if (event.currentTarget instanceof HTMLElement) {
                event.currentTarget.classList.remove(statusClass);
              }
            }
          }
        ),
        h(
          HTMLTimeElement,
          { dateTime: model.status.date.toISOString() },
          formatTime(model.status.date)
        ),
        h(HTMLSpanElement, { className: CLASS.targetName }, TARGET_NAME)
      )
    );
  }
  function icon(emoji, alt, props) {
    return h(
      HTMLSpanElement,
      { attrs: { "aria-label": alt }, ...props },
      h(HTMLSpanElement, { attrs: { "aria-hidden": "true" } }, emoji)
    );
  }
  function viewExpandedUi(status, statusData, info) {
    const items = [
      ["target", info.targetName],
      ["elm-watch", info.version],
      ["web socket", new URL(info.webSocketUrl).origin],
      [
        "updated",
        h(
          HTMLTimeElement,
          {
            dateTime: status.date.toISOString(),
            attrs: { "data-format": "2044-04-30 04:44:44" }
          },
          `${formatDate(status.date)} ${formatTime(status.date)}`
        )
      ],
      ["status", statusData.status],
      ...statusData.dl
    ];
    return h(
      HTMLDivElement,
      {
        className: `${CLASS.expandedUiContainer} length${statusData.content.length}`,
        attrs: {
          tabindex: "-1"
        }
      },
      h(
        HTMLDListElement,
        {},
        ...items.flatMap(([key, value]) => [
          h(HTMLElement, { localName: "dt" }, key),
          h(HTMLElement, { localName: "dd" }, value)
        ])
      ),
      ...statusData.content
    );
  }
  function viewStatus(dispatch, status, compilationMode, info) {
    switch (status.tag) {
      case "Busy":
        return {
          icon: "\u23F3",
          status: "Waiting for compilation",
          dl: [],
          content: viewCompilationModeChooser({
            dispatch,
            sendKey: void 0,
            compilationMode,
            warnAboutCompilationModeMismatch: false,
            info
          })
        };
      case "CompileError":
        return {
          icon: "\u{1F6A8}",
          status: "Compilation error",
          dl: [],
          content: [
            ...viewCompilationModeChooser({
              dispatch,
              sendKey: status.sendKey,
              compilationMode,
              warnAboutCompilationModeMismatch: true,
              info
            }),
            h(
              HTMLParagraphElement,
              {},
              h(
                HTMLElement,
                { localName: "strong" },
                "Check the terminal to see errors!"
              )
            )
          ]
        };
      case "Connecting":
        return {
          icon: "\u{1F50C}",
          status: "Connecting",
          dl: [
            ["attempt", status.attemptNumber.toString()],
            ["sleep", printRetryWaitMs(status.attemptNumber)]
          ],
          content: [
            h(HTMLButtonElement, { disabled: true }, "Connecting web socket\u2026")
          ]
        };
      case "EvalError":
        return {
          icon: "\u26D4\uFE0F",
          status: "Eval error",
          dl: [],
          content: [
            h(
              HTMLParagraphElement,
              {},
              "Check the console in the browser developer tools to see errors!"
            )
          ]
        };
      case "Idle":
        return {
          icon: idleIcon(info.initializedElmAppsStatus),
          status: "Successfully compiled",
          dl: [],
          content: viewCompilationModeChooser({
            dispatch,
            sendKey: status.sendKey,
            compilationMode,
            warnAboutCompilationModeMismatch: true,
            info
          })
        };
      case "SleepingBeforeReconnect":
        return {
          icon: "\u{1F50C}",
          status: "Sleeping",
          dl: [
            ["attempt", status.attemptNumber.toString()],
            ["sleep", printRetryWaitMs(status.attemptNumber)]
          ],
          content: [
            h(
              HTMLButtonElement,
              {
                onclick: () => {
                  dispatch({ tag: "PressedReconnectNow" });
                }
              },
              "Reconnect web socket now"
            )
          ]
        };
      case "UnexpectedError":
        return {
          icon: "\u274C",
          status: "Unexpected error",
          dl: [],
          content: [
            h(
              HTMLParagraphElement,
              {},
              "I ran into an unexpected error! This is the error message:"
            ),
            h(HTMLPreElement, {}, status.message)
          ]
        };
      case "WaitingForReload":
        return {
          icon: "\u23F3",
          status: "Waiting for reload",
          dl: [],
          content: [
            h(
              HTMLParagraphElement,
              {},
              "Waiting for other targets to finish compiling\u2026"
            )
          ]
        };
    }
  }
  function idleIcon(status) {
    switch (status.tag) {
      case "DecodeError":
        return "\u274C";
      case "NoProgramsAtAll":
        return "\u2753";
      case "DebuggerModeStatus":
        return "\u2705";
    }
  }
  function compilationModeIcon(compilationMode) {
    switch (compilationMode) {
      case "proxy":
        return void 0;
      case "debug":
        return icon("\u{1F41B}", "Debug mode", { className: CLASS.debugModeIcon });
      case "standard":
        return void 0;
      case "optimize":
        return icon("\u{1F680}", "Optimize mode");
    }
  }
  var noDebuggerYetReason = "The Elm debugger isn't available at this point.";
  function noDebuggerReason(noDebuggerProgramTypes) {
    return `The Elm debugger isn't supported by ${humanList(
      Array.from(noDebuggerProgramTypes, (programType) => `\`${programType}\``),
      "and"
    )} programs.`;
  }
  function humanList(list, joinWord) {
    const { length } = list;
    return length <= 1 ? list.join("") : length === 2 ? list.join(` ${joinWord} `) : `${list.slice(0, length - 2).join(", ")}, ${list.slice(-2).join(` ${joinWord} `)}`;
  }
  function viewCompilationModeChooser({
    dispatch,
    sendKey,
    compilationMode: selectedMode,
    warnAboutCompilationModeMismatch,
    info
  }) {
    switch (info.initializedElmAppsStatus.tag) {
      case "DecodeError":
        return [
          h(
            HTMLParagraphElement,
            {},
            "window.Elm does not look like expected! This is the error message:"
          ),
          h(HTMLPreElement, {}, info.initializedElmAppsStatus.message)
        ];
      case "NoProgramsAtAll":
        return [
          h(
            HTMLParagraphElement,
            {},
            "It looks like no Elm apps were initialized by elm-watch. Check the console in the browser developer tools to see potential errors!"
          )
        ];
      case "DebuggerModeStatus": {
        const compilationModes = [
          {
            mode: "debug",
            name: "Debug",
            status: info.initializedElmAppsStatus.status
          },
          { mode: "standard", name: "Standard", status: { tag: "Enabled" } },
          { mode: "optimize", name: "Optimize", status: { tag: "Enabled" } }
        ];
        return [
          h(
            HTMLFieldSetElement,
            { disabled: sendKey === void 0 },
            h(HTMLLegendElement, {}, "Compilation mode"),
            ...compilationModes.map(({ mode, name, status }) => {
              const nameWithIcon = h(
                HTMLSpanElement,
                { className: CLASS.compilationModeWithIcon },
                name,
                mode === selectedMode ? compilationModeIcon(mode) : void 0
              );
              return h(
                HTMLLabelElement,
                { className: status.tag },
                h(HTMLInputElement, {
                  type: "radio",
                  name: `CompilationMode-${info.targetName}`,
                  value: mode,
                  checked: mode === selectedMode,
                  disabled: sendKey === void 0 || status.tag === "Disabled",
                  onchange: sendKey === void 0 ? void 0 : () => {
                    dispatch({
                      tag: "ChangedCompilationMode",
                      compilationMode: mode,
                      sendKey
                    });
                  }
                }),
                ...status.tag === "Enabled" ? [
                  nameWithIcon,
                  warnAboutCompilationModeMismatch && mode === selectedMode && selectedMode !== info.originalCompilationMode && info.originalCompilationMode !== "proxy" ? h(
                    HTMLElement,
                    { localName: "small" },
                    `Note: The code currently running is in ${ORIGINAL_COMPILATION_MODE} mode.`
                  ) : void 0
                ] : [
                  nameWithIcon,
                  h(HTMLElement, { localName: "small" }, status.reason)
                ]
              );
            })
          )
        ];
      }
    }
  }
  run();
})();
(function(scope){
'use strict';

var _Platform_effectManagers = {}, _Scheduler_enqueue; // added by elm-watch

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

// This function was slightly modified by elm-watch.
function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		// c: null // commented out by elm-watch
		c: Function.prototype // added by elm-watch
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			// }); // commented out by elm-watch
			}) || Function.prototype; // added by elm-watch
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


// This function was slightly modified by elm-watch.
var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		"Platform.worker", // added by elm-watch
		debugMetadata, // added by elm-watch
		flagDecoder,
		args,
		impl.init,
		// impl.update, // commented out by elm-watch
		// impl.subscriptions, // commented out by elm-watch
		impl, // added by elm-watch
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


// This whole function was changed by elm-watch.
function _Platform_initialize(programType, debugMetadata, flagDecoder, args, init, impl, stepperBuilder)
{
	if (args === "__elmWatchReturnData") {
		return { impl: impl, debugMetadata: debugMetadata, flagDecoder : flagDecoder, programType: programType };
	}

	var flags = _Json_wrap(args ? args['flags'] : undefined);
	var flagResult = A2(_Json_run, flagDecoder, flags);
	$elm$core$Result$isOk(flagResult) || _Debug_crash(2 /**/, _Json_errorToString(flagResult.a) /**/);
	var managers = {};
	var initUrl = programType === "Browser.application" ? _Browser_getUrl() : undefined;
	window.__ELM_WATCH_INIT_URL = initUrl;
	var initPair = init(flagResult.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);
	var update;
	var subscriptions;

	function setUpdateAndSubscriptions() {
		update = impl.update || impl._impl.update;
		subscriptions = impl.subscriptions || impl._impl.subscriptions;
		if (typeof $elm$browser$Debugger$Main$wrapUpdate !== "undefined") {
			update = $elm$browser$Debugger$Main$wrapUpdate(update);
			subscriptions = $elm$browser$Debugger$Main$wrapSubs(subscriptions);
		}
	}

	function sendToApp(msg, viewMetadata) {
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	setUpdateAndSubscriptions();
	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	function __elmWatchHotReload(newData, new_Platform_effectManagers, new_Scheduler_enqueue, moduleName) {
		_Platform_enqueueEffects(managers, _Platform_batch(_List_Nil), _Platform_batch(_List_Nil));
		_Scheduler_enqueue = new_Scheduler_enqueue;

		for (var key in new_Platform_effectManagers) {
			var manager = new_Platform_effectManagers[key];
			if (!(key in _Platform_effectManagers)) {
				_Platform_effectManagers[key] = manager;
				managers[key] = _Platform_instantiateManager(manager, sendToApp);
				if (manager.a) {
					console.info("elm-watch: A new port '" + key + "' was added. You might want to reload the page!");
					manager.a(key, sendToApp)
				}
			}
		}

		for (var key in newData.impl) {
			if (key === "_impl" && impl._impl) {
				for (var subKey in newData.impl[key]) {
					impl._impl[subKey] = newData.impl[key][subKey];
				}
			} else {
				impl[key] = newData.impl[key];
			}
		}

		var newFlagResult = A2(_Json_run, newData.flagDecoder, flags);
		if (!$elm$core$Result$isOk(newFlagResult)) {
			return { tag: "ReloadPage", reason: "the flags type in `" + moduleName + "` changed and now the passed flags aren't correct anymore. The idea is to try to run with new flags!\nThis is the error:\n" + _Json_errorToString(newFlagResult.a) };
		}
		if (!_Utils_eq_elmWatchInternal(debugMetadata, newData.debugMetadata)) {
			return { tag: "ReloadPage", reason: "the message type in `" + moduleName + '` changed in debug mode ("debug metadata" changed).' };
		}
		init = impl.init || impl._impl.init;
		if (typeof $elm$browser$Debugger$Main$wrapInit !== "undefined") {
			init = A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(newData.debugMetadata), initPair.a.popout, init);
		}
		window.__ELM_WATCH_INIT_URL = initUrl;
		var newInitPair = init(newFlagResult.a);
		if (!_Utils_eq_elmWatchInternal(initPair, newInitPair)) {
			return { tag: "ReloadPage", reason: "`" + moduleName + ".init` returned something different than last time. Let's start fresh!" };
		}

		setUpdateAndSubscriptions();
		stepper(model, true /* isSync */);
		_Platform_enqueueEffects(managers, _Platform_batch(_List_Nil), subscriptions(model));
		return { tag: "Success" };
	}

	return Object.defineProperties(
		ports ? { ports: ports } : {},
		{
			__elmWatchHotReload: { value: __elmWatchHotReload },
			__elmWatchProgramType: { value: programType },
		}
	);
}

// This whole function was added by elm-watch.
// Copy-paste of _Utils_eq but does not assume that x and y have the same type,
// and considers functions to always be equal.
function _Utils_eq_elmWatchInternal(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp_elmWatchInternal(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp_elmWatchInternal(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

// This whole function was added by elm-watch.
function _Utils_eqHelp_elmWatchInternal(x, y, depth, stack)
{
	if (x === y) {
		return true;
	}

	var xType = _Utils_typeof_elmWatchInternal(x);
	var yType = _Utils_typeof_elmWatchInternal(y);

	if (xType !== yType) {
		return false;
	}

	switch (xType) {
		case "primitive":
			return false;
		case "function":
			return true;
	}

	if (x.$ !== y.$) {
		return false;
	}

	if (x.$ === 'Set_elm_builtin') {
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	} else if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin' || x.$ < 0) {
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}

	if (Object.keys(x).length !== Object.keys(y).length) {
		return false;
	}

	if (depth > 100) {
		stack.push(_Utils_Tuple2(x, y));
		return true;
	}

	for (var key in x) {
		if (!_Utils_eqHelp_elmWatchInternal(x[key], y[key], depth + 1, stack)) {
			return false;
		}
	}
	return true;
}

// This whole function was added by elm-watch.
function _Utils_typeof_elmWatchInternal(x)
{
	var type = typeof x;
	return type === "function"
		? "function"
		: type !== "object" || type === null
		? "primitive"
		: "objectOrArray";
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


// This whole function was changed by elm-watch.
function _Platform_export(exports)
{
	var reloadReasons = _Platform_mergeExportsElmWatch('Elm', scope['Elm'] || (scope['Elm'] = {}), exports);
	if (reloadReasons.length > 0) {
		throw new Error(["ELM_WATCH_RELOAD_NEEDED"].concat(Array.from(new Set(reloadReasons))).join("\n\n---\n\n"));
	}
}

// This whole function was added by elm-watch.
function _Platform_mergeExportsElmWatch(moduleName, obj, exports)
{
	var reloadReasons = [];
	for (var name in exports) {
		if (name === "init") {
			if ("init" in obj) {
				if ("__elmWatchApps" in obj) {
					var data = exports.init("__elmWatchReturnData");
					for (var index = 0; index < obj.__elmWatchApps.length; index++) {
						var app = obj.__elmWatchApps[index];
						if (app.__elmWatchProgramType !== data.programType) {
							reloadReasons.push("`" + moduleName + ".main` changed from `" + app.__elmWatchProgramType + "` to `" + data.programType + "`.");
						} else {
							var result;
							try {
								result = app.__elmWatchHotReload(data, _Platform_effectManagers, _Scheduler_enqueue, moduleName);
								switch (result.tag) {
									case "Success":
										break;
									case "ReloadPage":
										reloadReasons.push(result.reason);
										break;
								}
							} catch (error) {
								reloadReasons.push("hot reload for `" + moduleName + "` failed, probably because of incompatible model changes.\nThis is the error:\n" + error + "\n" + (error ? error.stack : ""));
							}
						}
					}
				} else {
					throw new Error("elm-watch: I'm trying to create `" + moduleName + ".init`, but it already exists and wasn't created by elm-watch. Maybe a duplicate script is getting loaded accidentally?");
				}
			} else {
				obj.__elmWatchApps = [];
				obj.init = function() {
					var app = exports.init.apply(exports, arguments);
					obj.__elmWatchApps.push(app);
					window.__ELM_WATCH_ON_INIT();
					return app;
				};
			}
		} else {
			var innerReasons = _Platform_mergeExportsElmWatch(moduleName + "." + name, obj[name] || (obj[name] = {}), exports[name]);
			reloadReasons = reloadReasons.concat(innerReasons);
		}
	}
	return reloadReasons;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

// This whole function was changed by elm-watch.
var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	var programType = "Html";

	if (args === "__elmWatchReturnData") {
		return { virtualNode: virtualNode, programType: programType };
	}

	/**_UNUSED/ // always UNUSED with elm-watch
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	var nextNode = _VirtualDom_render(virtualNode, function() {});
	node.parentNode.replaceChild(nextNode, node);
	node = nextNode;
	var sendToApp = function() {};

	function __elmWatchHotReload(newData) {
		var patches = _VirtualDom_diff(virtualNode, newData.virtualNode);
		node = _VirtualDom_applyPatches(node, virtualNode, patches, sendToApp);
		virtualNode = newData.virtualNode;
		return { tag: "Success" };
	}

	return Object.defineProperties(
		{},
		{
			__elmWatchHotReload: { value: __elmWatchHotReload },
			__elmWatchProgramType: { value: programType },
		}
	);
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

// This function was slightly modified by elm-watch.
var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		impl._impl ? "Browser.sandbox" : "Browser.element", // added by elm-watch
		debugMetadata, // added by elm-watch
		flagDecoder,
		args,
		impl.init,
		// impl.update, // commented out by elm-watch
		// impl.subscriptions, // commented out by elm-watch
		impl, // added by elm-watch
		function(sendToApp, initialModel) {
			// var view = impl.view; // commented out by elm-watch
			/**_UNUSED/ // always UNUSED with elm-watch
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				// var nextNode = view(model); // commented out by elm-watch
				var nextNode = impl.view(model); // added by elm-watch
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

// This function was slightly modified by elm-watch.
var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		impl._impl ? "Browser.application" : "Browser.document", // added by elm-watch
		debugMetadata, // added by elm-watch
		flagDecoder,
		args,
		impl.init,
		// impl.update, // commented out by elm-watch
		// impl.subscriptions, // commented out by elm-watch
		impl, // added by elm-watch
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			// var view = impl.view; // commented out by elm-watch
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				// var doc = view(model); // commented out by elm-watch
				var doc = impl.view(model); // added by elm-watch
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


// This function was slightly modified by elm-watch.
function _Browser_application(impl)
{
	// var onUrlChange = impl.onUrlChange; // commented out by elm-watch
	// var onUrlRequest = impl.onUrlRequest; // commented out by elm-watch
	// var key = function() { key.a(onUrlChange(_Browser_getUrl())); }; // commented out by elm-watch
	var key = function() { key.a(impl.onUrlChange(_Browser_getUrl())); }; // added by elm-watch

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(impl.onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			// return A3(impl.init, flags, _Browser_getUrl(), key); // commented out by elm-watch
			return A3(impl.init, flags, window.__ELM_WATCH_INIT_URL, key); // added by elm-watch
		},
		// view: impl.view, // commented out by elm-watch
		// update: impl.update, // commented out by elm-watch
		// subscriptions: impl.subscriptions // commented out by elm-watch
		view: function(model) { return impl.view(model); }, // added by elm-watch
		_impl: impl // added by elm-watch
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.expect.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });
		$elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);

		try {
			xhr.open(request.method, request.url, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.url));
		}

		_Http_configureRequest(xhr, request);

		request.body.a && xhr.setRequestHeader('Content-Type', request.body.a);
		xhr.send(request.body.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.timeout.a || 0;
	xhr.responseType = request.expect.d;
	xhr.withCredentials = request.allowCookiesFromOtherDomains;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		url: xhr.responseURL,
		statusCode: xhr.status,
		statusText: xhr.statusText,
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			sent: event.loaded,
			size: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			received: event.loaded,
			size: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}


function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}


function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}


var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});
var $author$project$Main$UrlChanged = function (a) {
	return {$: 'UrlChanged', a: a};
};
var $author$project$Main$UrlRequested = function (a) {
	return {$: 'UrlRequested', a: a};
};
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Browser$application = _Browser_application;
var $elm$json$Json$Decode$field = _Json_decodeField;
var $author$project$Main$BlankPage = {$: 'BlankPage'};
var $author$project$Main$TextileDbReceived = F2(
	function (a, b) {
		return {$: 'TextileDbReceived', a: a, b: b};
	});
var $author$project$Request$Version$Unknown = {$: 'Unknown'};
var $author$project$Main$VersionReceived = function (a) {
	return {$: 'VersionReceived', a: a};
};
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $author$project$Ports$appStarted = _Platform_outgoingPort(
	'appStarted',
	function ($) {
		return $elm$json$Json$Encode$null;
	});
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $author$project$Data$Country$Code = function (a) {
	return {$: 'Code', a: a};
};
var $author$project$Data$Textile$Material$Id = function (a) {
	return {$: 'Id', a: a};
};
var $author$project$Data$Textile$Product$Id = function (a) {
	return {$: 'Id', a: a};
};
var $ianmackenzie$elm_units$Quantity$Quantity = function (a) {
	return {$: 'Quantity', a: a};
};
var $ianmackenzie$elm_units$Mass$kilograms = function (numKilograms) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numKilograms);
};
var $author$project$Data$Unit$Ratio = function (a) {
	return {$: 'Ratio', a: a};
};
var $author$project$Data$Unit$ratio = function (_float) {
	return $author$project$Data$Unit$Ratio(_float);
};
var $author$project$Data$Textile$Inputs$tShirtCotonFrance = {
	airTransportRatio: $elm$core$Maybe$Nothing,
	countryDyeing: $author$project$Data$Country$Code('FR'),
	countryFabric: $author$project$Data$Country$Code('FR'),
	countryMaking: $author$project$Data$Country$Code('FR'),
	countrySpinning: $elm$core$Maybe$Nothing,
	disabledFading: $elm$core$Maybe$Nothing,
	disabledSteps: _List_Nil,
	dyeingWeighting: $elm$core$Maybe$Nothing,
	makingWaste: $elm$core$Maybe$Nothing,
	mass: $ianmackenzie$elm_units$Mass$kilograms(0.17),
	materials: _List_fromArray(
		[
			{
			id: $author$project$Data$Textile$Material$Id('coton'),
			share: $author$project$Data$Unit$ratio(1)
		}
		]),
	picking: $elm$core$Maybe$Nothing,
	product: $author$project$Data$Textile$Product$Id('tshirt'),
	quality: $elm$core$Maybe$Nothing,
	reparability: $elm$core$Maybe$Nothing,
	surfaceMass: $elm$core$Maybe$Nothing
};
var $author$project$Data$Textile$Inputs$tShirtCotonIndia = _Utils_update(
	$author$project$Data$Textile$Inputs$tShirtCotonFrance,
	{
		countryDyeing: $author$project$Data$Country$Code('IN'),
		countryFabric: $author$project$Data$Country$Code('IN'),
		countryMaking: $author$project$Data$Country$Code('IN')
	});
var $author$project$Data$Textile$Inputs$defaultQuery = $author$project$Data$Textile$Inputs$tShirtCotonIndia;
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $author$project$Data$Session$Store = F2(
	function (savedSimulations, comparedSimulations) {
		return {comparedSimulations: comparedSimulations, savedSimulations: savedSimulations};
	});
var $author$project$Data$Session$SavedSimulation = F2(
	function (name, query) {
		return {name: name, query: query};
	});
var $author$project$Data$Textile$Inputs$Query = function (mass) {
	return function (materials) {
		return function (product) {
			return function (countrySpinning) {
				return function (countryFabric) {
					return function (countryDyeing) {
						return function (countryMaking) {
							return function (dyeingWeighting) {
								return function (airTransportRatio) {
									return function (quality) {
										return function (reparability) {
											return function (makingWaste) {
												return function (picking) {
													return function (surfaceMass) {
														return function (disabledSteps) {
															return function (disabledFading) {
																return {airTransportRatio: airTransportRatio, countryDyeing: countryDyeing, countryFabric: countryFabric, countryMaking: countryMaking, countrySpinning: countrySpinning, disabledFading: disabledFading, disabledSteps: disabledSteps, dyeingWeighting: dyeingWeighting, makingWaste: makingWaste, mass: mass, materials: materials, picking: picking, product: product, quality: quality, reparability: reparability, surfaceMass: surfaceMass};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$Data$Country$decodeCode = A2($elm$json$Json$Decode$map, $author$project$Data$Country$Code, $elm$json$Json$Decode$string);
var $elm$json$Json$Decode$fail = _Json_fail;
var $author$project$Data$Textile$Step$Label$Distribution = {$: 'Distribution'};
var $author$project$Data$Textile$Step$Label$Dyeing = {$: 'Dyeing'};
var $author$project$Data$Textile$Step$Label$EndOfLife = {$: 'EndOfLife'};
var $author$project$Data$Textile$Step$Label$Fabric = {$: 'Fabric'};
var $author$project$Data$Textile$Step$Label$Making = {$: 'Making'};
var $author$project$Data$Textile$Step$Label$Material = {$: 'Material'};
var $author$project$Data$Textile$Step$Label$Spinning = {$: 'Spinning'};
var $author$project$Data$Textile$Step$Label$Use = {$: 'Use'};
var $author$project$Data$Textile$Step$Label$fromCodeString = function (code) {
	switch (code) {
		case 'material':
			return $elm$core$Result$Ok($author$project$Data$Textile$Step$Label$Material);
		case 'spinning':
			return $elm$core$Result$Ok($author$project$Data$Textile$Step$Label$Spinning);
		case 'fabric':
			return $elm$core$Result$Ok($author$project$Data$Textile$Step$Label$Fabric);
		case 'making':
			return $elm$core$Result$Ok($author$project$Data$Textile$Step$Label$Making);
		case 'dyeing':
			return $elm$core$Result$Ok($author$project$Data$Textile$Step$Label$Dyeing);
		case 'distribution':
			return $elm$core$Result$Ok($author$project$Data$Textile$Step$Label$Distribution);
		case 'use':
			return $elm$core$Result$Ok($author$project$Data$Textile$Step$Label$Use);
		case 'eol':
			return $elm$core$Result$Ok($author$project$Data$Textile$Step$Label$EndOfLife);
		default:
			return $elm$core$Result$Err('Code étape inconnu: ' + code);
	}
};
var $author$project$Data$Textile$Step$Label$decodeFromCode = A2(
	$elm$json$Json$Decode$andThen,
	function (str) {
		var _v0 = $author$project$Data$Textile$Step$Label$fromCodeString(str);
		if (_v0.$ === 'Ok') {
			var decoded = _v0.a;
			return $elm$json$Json$Decode$succeed(decoded);
		} else {
			var err = _v0.a;
			return $elm$json$Json$Decode$fail(err);
		}
	},
	$elm$json$Json$Decode$string);
var $author$project$Data$Textile$Inputs$MaterialQuery = F2(
	function (id, share) {
		return {id: id, share: share};
	});
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $elm$core$String$fromFloat = _String_fromNumber;
var $author$project$Data$Unit$decodeRatio = A2(
	$elm$json$Json$Decode$map,
	$author$project$Data$Unit$ratio,
	A2(
		$elm$json$Json$Decode$andThen,
		function (_float) {
			return ((_float < 0) || (_float > 1)) ? $elm$json$Json$Decode$fail(
				'Le ratio spécifié (' + ($elm$core$String$fromFloat(_float) + ') doit être compris entre 0 et 1.')) : $elm$json$Json$Decode$succeed(_float);
		},
		$elm$json$Json$Decode$float));
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom = $elm$json$Json$Decode$map2($elm$core$Basics$apR);
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A2($elm$json$Json$Decode$field, key, valDecoder),
			decoder);
	});
var $author$project$Data$Textile$Inputs$decodeMaterialQuery = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'share',
	$author$project$Data$Unit$decodeRatio,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'id',
		A2($elm$json$Json$Decode$map, $author$project$Data$Textile$Material$Id, $elm$json$Json$Decode$string),
		$elm$json$Json$Decode$succeed($author$project$Data$Textile$Inputs$MaterialQuery)));
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $author$project$Data$Unit$PickPerMeter = function (a) {
	return {$: 'PickPerMeter', a: a};
};
var $author$project$Data$Unit$maxPickPerMeter = $author$project$Data$Unit$PickPerMeter(9000);
var $author$project$Data$Unit$minPickPerMeter = $author$project$Data$Unit$PickPerMeter(800);
var $author$project$Data$Unit$pickPerMeter = $author$project$Data$Unit$PickPerMeter;
var $author$project$Data$Unit$pickPerMeterToInt = function (_v0) {
	var _int = _v0.a;
	return _int;
};
var $author$project$Data$Unit$decodePickPerMeter = A2(
	$elm$json$Json$Decode$map,
	$author$project$Data$Unit$pickPerMeter,
	A2(
		$elm$json$Json$Decode$andThen,
		function (_int) {
			return ((_Utils_cmp(
				_int,
				$author$project$Data$Unit$pickPerMeterToInt($author$project$Data$Unit$minPickPerMeter)) < 0) || (_Utils_cmp(
				_int,
				$author$project$Data$Unit$pickPerMeterToInt($author$project$Data$Unit$maxPickPerMeter)) > 0)) ? $elm$json$Json$Decode$fail(
				'Le duitage spécifié (' + ($elm$core$String$fromInt(_int) + (') doit être compris entre ' + ($elm$core$String$fromInt(
					$author$project$Data$Unit$pickPerMeterToInt($author$project$Data$Unit$minPickPerMeter)) + (' et ' + ($elm$core$String$fromInt(
					$author$project$Data$Unit$pickPerMeterToInt($author$project$Data$Unit$maxPickPerMeter)) + '.')))))) : $elm$json$Json$Decode$succeed(_int);
		},
		$elm$json$Json$Decode$int));
var $author$project$Data$Unit$Quality = function (a) {
	return {$: 'Quality', a: a};
};
var $author$project$Data$Unit$maxQuality = $author$project$Data$Unit$Quality(1.45);
var $author$project$Data$Unit$minQuality = $author$project$Data$Unit$Quality(0.67);
var $author$project$Data$Unit$quality = $author$project$Data$Unit$Quality;
var $author$project$Data$Unit$qualityToFloat = function (_v0) {
	var _float = _v0.a;
	return _float;
};
var $author$project$Data$Unit$decodeQuality = A2(
	$elm$json$Json$Decode$map,
	$author$project$Data$Unit$quality,
	A2(
		$elm$json$Json$Decode$andThen,
		function (_float) {
			return ((_Utils_cmp(
				_float,
				$author$project$Data$Unit$qualityToFloat($author$project$Data$Unit$minQuality)) < 0) || (_Utils_cmp(
				_float,
				$author$project$Data$Unit$qualityToFloat($author$project$Data$Unit$maxQuality)) > 0)) ? $elm$json$Json$Decode$fail(
				'La qualité spécifiée (' + ($elm$core$String$fromFloat(_float) + (') doit être comprise entre ' + ($elm$core$String$fromFloat(
					$author$project$Data$Unit$qualityToFloat($author$project$Data$Unit$minQuality)) + (' et ' + ($elm$core$String$fromFloat(
					$author$project$Data$Unit$qualityToFloat($author$project$Data$Unit$maxQuality)) + '.')))))) : $elm$json$Json$Decode$succeed(_float);
		},
		$elm$json$Json$Decode$float));
var $author$project$Data$Unit$Reparability = function (a) {
	return {$: 'Reparability', a: a};
};
var $author$project$Data$Unit$maxReparability = $author$project$Data$Unit$Reparability(1.15);
var $author$project$Data$Unit$minReparability = $author$project$Data$Unit$Reparability(1);
var $author$project$Data$Unit$reparability = $author$project$Data$Unit$Reparability;
var $author$project$Data$Unit$reparabilityToFloat = function (_v0) {
	var _float = _v0.a;
	return _float;
};
var $author$project$Data$Unit$decodeReparability = A2(
	$elm$json$Json$Decode$map,
	$author$project$Data$Unit$reparability,
	A2(
		$elm$json$Json$Decode$andThen,
		function (_float) {
			return ((_Utils_cmp(
				_float,
				$author$project$Data$Unit$reparabilityToFloat($author$project$Data$Unit$minReparability)) < 0) || (_Utils_cmp(
				_float,
				$author$project$Data$Unit$reparabilityToFloat($author$project$Data$Unit$maxReparability)) > 0)) ? $elm$json$Json$Decode$fail(
				'L\'indice de réparabilité spécifié (' + ($elm$core$String$fromFloat(_float) + (') doit être compris entre ' + ($elm$core$String$fromFloat(
					$author$project$Data$Unit$reparabilityToFloat($author$project$Data$Unit$minReparability)) + (' et ' + ($elm$core$String$fromFloat(
					$author$project$Data$Unit$reparabilityToFloat($author$project$Data$Unit$maxReparability)) + '.')))))) : $elm$json$Json$Decode$succeed(_float);
		},
		$elm$json$Json$Decode$float));
var $author$project$Data$Unit$SurfaceMass = function (a) {
	return {$: 'SurfaceMass', a: a};
};
var $author$project$Data$Unit$maxSurfaceMass = $author$project$Data$Unit$SurfaceMass(500);
var $author$project$Data$Unit$minSurfaceMass = $author$project$Data$Unit$SurfaceMass(30);
var $author$project$Data$Unit$surfaceMass = $author$project$Data$Unit$SurfaceMass;
var $author$project$Data$Unit$surfaceMassToInt = function (_v0) {
	var _int = _v0.a;
	return _int;
};
var $author$project$Data$Unit$decodeSurfaceMass = A2(
	$elm$json$Json$Decode$map,
	$author$project$Data$Unit$surfaceMass,
	A2(
		$elm$json$Json$Decode$andThen,
		function (_int) {
			return ((_Utils_cmp(
				_int,
				$author$project$Data$Unit$surfaceMassToInt($author$project$Data$Unit$minSurfaceMass)) < 0) || (_Utils_cmp(
				_int,
				$author$project$Data$Unit$surfaceMassToInt($author$project$Data$Unit$maxSurfaceMass)) > 0)) ? $elm$json$Json$Decode$fail(
				'La masse surfacique spécifiée (' + ($elm$core$String$fromInt(_int) + (') doit être comprise entre ' + ($elm$core$String$fromInt(
					$author$project$Data$Unit$surfaceMassToInt($author$project$Data$Unit$minSurfaceMass)) + (' et ' + ($elm$core$String$fromInt(
					$author$project$Data$Unit$surfaceMassToInt($author$project$Data$Unit$maxSurfaceMass)) + '.')))))) : $elm$json$Json$Decode$succeed(_int);
		},
		$elm$json$Json$Decode$int));
var $elm$json$Json$Decode$list = _Json_decodeList;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$json$Json$Decode$maybe = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			]));
};
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder = F3(
	function (pathDecoder, valDecoder, fallback) {
		var nullOr = function (decoder) {
			return $elm$json$Json$Decode$oneOf(
				_List_fromArray(
					[
						decoder,
						$elm$json$Json$Decode$null(fallback)
					]));
		};
		var handleResult = function (input) {
			var _v0 = A2($elm$json$Json$Decode$decodeValue, pathDecoder, input);
			if (_v0.$ === 'Ok') {
				var rawValue = _v0.a;
				var _v1 = A2(
					$elm$json$Json$Decode$decodeValue,
					nullOr(valDecoder),
					rawValue);
				if (_v1.$ === 'Ok') {
					var finalResult = _v1.a;
					return $elm$json$Json$Decode$succeed(finalResult);
				} else {
					var finalErr = _v1.a;
					return $elm$json$Json$Decode$fail(
						$elm$json$Json$Decode$errorToString(finalErr));
				}
			} else {
				return $elm$json$Json$Decode$succeed(fallback);
			}
		};
		return A2($elm$json$Json$Decode$andThen, handleResult, $elm$json$Json$Decode$value);
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional = F4(
	function (key, valDecoder, fallback, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder,
				A2($elm$json$Json$Decode$field, key, $elm$json$Json$Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var $author$project$Data$Textile$Inputs$decodeQuery = A4(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
	'disabledFading',
	$elm$json$Json$Decode$maybe($elm$json$Json$Decode$bool),
	$elm$core$Maybe$Nothing,
	A4(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
		'disabledSteps',
		$elm$json$Json$Decode$list($author$project$Data$Textile$Step$Label$decodeFromCode),
		_List_Nil,
		A4(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
			'surfaceMass',
			$elm$json$Json$Decode$maybe($author$project$Data$Unit$decodeSurfaceMass),
			$elm$core$Maybe$Nothing,
			A4(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
				'picking',
				$elm$json$Json$Decode$maybe($author$project$Data$Unit$decodePickPerMeter),
				$elm$core$Maybe$Nothing,
				A4(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
					'makingWaste',
					$elm$json$Json$Decode$maybe($author$project$Data$Unit$decodeRatio),
					$elm$core$Maybe$Nothing,
					A4(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
						'reparability',
						$elm$json$Json$Decode$maybe($author$project$Data$Unit$decodeReparability),
						$elm$core$Maybe$Nothing,
						A4(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
							'quality',
							$elm$json$Json$Decode$maybe($author$project$Data$Unit$decodeQuality),
							$elm$core$Maybe$Nothing,
							A4(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
								'airTransportRatio',
								$elm$json$Json$Decode$maybe($author$project$Data$Unit$decodeRatio),
								$elm$core$Maybe$Nothing,
								A4(
									$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
									'dyeingWeighting',
									$elm$json$Json$Decode$maybe($author$project$Data$Unit$decodeRatio),
									$elm$core$Maybe$Nothing,
									A3(
										$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
										'countryMaking',
										$author$project$Data$Country$decodeCode,
										A3(
											$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
											'countryDyeing',
											$author$project$Data$Country$decodeCode,
											A3(
												$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
												'countryFabric',
												$author$project$Data$Country$decodeCode,
												A4(
													$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
													'countrySpinning',
													$elm$json$Json$Decode$maybe($author$project$Data$Country$decodeCode),
													$elm$core$Maybe$Nothing,
													A3(
														$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
														'product',
														A2($elm$json$Json$Decode$map, $author$project$Data$Textile$Product$Id, $elm$json$Json$Decode$string),
														A3(
															$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
															'materials',
															$elm$json$Json$Decode$list($author$project$Data$Textile$Inputs$decodeMaterialQuery),
															A3(
																$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
																'mass',
																A2($elm$json$Json$Decode$map, $ianmackenzie$elm_units$Mass$kilograms, $elm$json$Json$Decode$float),
																$elm$json$Json$Decode$succeed($author$project$Data$Textile$Inputs$Query)))))))))))))))));
var $author$project$Data$Session$decodeSavedSimulation = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Data$Session$SavedSimulation,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'query', $author$project$Data$Textile$Inputs$decodeQuery));
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $author$project$Data$Session$decodeStore = A4(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
	'comparedSimulations',
	A2(
		$elm$json$Json$Decode$map,
		$elm$core$Set$fromList,
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	$elm$core$Set$empty,
	A4(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
		'savedSimulations',
		$elm$json$Json$Decode$list($author$project$Data$Session$decodeSavedSimulation),
		_List_Nil,
		$elm$json$Json$Decode$succeed($author$project$Data$Session$Store)));
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $author$project$Data$Session$defaultStore = {comparedSimulations: $elm$core$Set$empty, savedSimulations: _List_Nil};
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (result.$ === 'Ok') {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $author$project$Data$Session$deserializeStore = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Decode$decodeString($author$project$Data$Session$decodeStore),
	$elm$core$Result$withDefault($author$project$Data$Session$defaultStore));
var $turboMaCk$any_dict$Dict$Any$AnyDict = function (a) {
	return {$: 'AnyDict', a: a};
};
var $turboMaCk$any_dict$Dict$Any$empty = function (toKey) {
	return $turboMaCk$any_dict$Dict$Any$AnyDict(
		{dict: $elm$core$Dict$empty, toKey: toKey});
};
var $author$project$Data$Food$Product$processNameToString = function (_v0) {
	var name = _v0.a;
	return name;
};
var $author$project$Data$Food$Product$emptyProcesses = $turboMaCk$any_dict$Dict$Any$empty($author$project$Data$Food$Product$processNameToString);
var $author$project$Data$Food$Product$productNameToString = function (_v0) {
	var name = _v0.a;
	return name;
};
var $author$project$Data$Food$Product$emptyProducts = $turboMaCk$any_dict$Dict$Any$empty($author$project$Data$Food$Product$productNameToString);
var $author$project$Data$Food$Db$empty = {impacts: _List_Nil, processes: $author$project$Data$Food$Product$emptyProcesses, products: $author$project$Data$Food$Product$emptyProducts};
var $author$project$Data$Country$codeToString = function (_v0) {
	var string = _v0.a;
	return string;
};
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $turboMaCk$any_dict$Dict$Any$fromList = F2(
	function (f, xs) {
		return $turboMaCk$any_dict$Dict$Any$AnyDict(
			{
				dict: $elm$core$Dict$fromList(
					A2(
						$elm$core$List$map,
						function (_v0) {
							var k = _v0.a;
							var v = _v0.b;
							return _Utils_Tuple2(
								f(k),
								_Utils_Tuple2(k, v));
						},
						xs)),
				toKey: f
			});
	});
var $author$project$Data$Transport$emptyDistances = A2($turboMaCk$any_dict$Dict$Any$fromList, $author$project$Data$Country$codeToString, _List_Nil);
var $author$project$Data$Textile$Db$empty = {countries: _List_Nil, impacts: _List_Nil, materials: _List_Nil, processes: _List_Nil, products: _List_Nil, transports: $author$project$Data$Transport$emptyDistances};
var $krisajenkins$remotedata$RemoteData$NotAsked = {$: 'NotAsked'};
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2(
					$elm$core$Task$onError,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Err),
					A2(
						$elm$core$Task$andThen,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
							$elm$core$Result$Ok),
						task))));
	});
var $author$project$Data$Impact$Definition = F9(
	function (trigram, source, label, description, unit, quality, primary, pefData, scopes) {
		return {description: description, label: label, pefData: pefData, primary: primary, quality: quality, scopes: scopes, source: source, trigram: trigram, unit: unit};
	});
var $author$project$Data$Impact$PefData = F3(
	function (color, normalization, weighting) {
		return {color: color, normalization: normalization, weighting: weighting};
	});
var $author$project$Data$Unit$impact = function (value) {
	return $ianmackenzie$elm_units$Quantity$Quantity(value);
};
var $author$project$Data$Unit$decodeImpact = A2(
	$elm$json$Json$Decode$andThen,
	A2($elm$core$Basics$composeR, $author$project$Data$Unit$impact, $elm$json$Json$Decode$succeed),
	$elm$json$Json$Decode$float);
var $author$project$Data$Impact$getPefWeighting = function (weighting) {
	return weighting;
};
var $elm$json$Json$Decode$map3 = _Json_map3;
var $author$project$Data$Impact$decodePefData = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Data$Impact$PefData,
	A2($elm$json$Json$Decode$field, 'color', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'normalization', $author$project$Data$Unit$decodeImpact),
	A2(
		$elm$json$Json$Decode$field,
		'weighting',
		A2($elm$json$Json$Decode$map, $author$project$Data$Impact$getPefWeighting, $author$project$Data$Unit$decodeRatio)));
var $author$project$Data$Impact$AverageQuality = {$: 'AverageQuality'};
var $author$project$Data$Impact$BadQuality = {$: 'BadQuality'};
var $author$project$Data$Impact$GoodQuality = {$: 'GoodQuality'};
var $author$project$Data$Impact$NotFinished = {$: 'NotFinished'};
var $author$project$Data$Impact$UnknownQuality = {$: 'UnknownQuality'};
var $author$project$Data$Impact$decodeQuality = A2(
	$elm$json$Json$Decode$andThen,
	function (maybeInt) {
		_v0$4:
		while (true) {
			if (maybeInt.$ === 'Just') {
				switch (maybeInt.a) {
					case 0:
						return $elm$json$Json$Decode$succeed($author$project$Data$Impact$NotFinished);
					case 1:
						return $elm$json$Json$Decode$succeed($author$project$Data$Impact$GoodQuality);
					case 2:
						return $elm$json$Json$Decode$succeed($author$project$Data$Impact$AverageQuality);
					case 3:
						return $elm$json$Json$Decode$succeed($author$project$Data$Impact$BadQuality);
					default:
						break _v0$4;
				}
			} else {
				break _v0$4;
			}
		}
		return $elm$json$Json$Decode$succeed($author$project$Data$Impact$UnknownQuality);
	},
	$elm$json$Json$Decode$maybe($elm$json$Json$Decode$int));
var $author$project$Data$Impact$Food = {$: 'Food'};
var $author$project$Data$Impact$Textile = {$: 'Textile'};
var $author$project$Data$Impact$decodeScope = A2(
	$elm$json$Json$Decode$andThen,
	function (scope) {
		switch (scope) {
			case 'textile':
				return $elm$json$Json$Decode$succeed($author$project$Data$Impact$Textile);
			case 'food':
				return $elm$json$Json$Decode$succeed($author$project$Data$Impact$Food);
			default:
				return $elm$json$Json$Decode$fail('Couldn\'t decode unknown scope ' + scope);
		}
	},
	$elm$json$Json$Decode$string);
var $author$project$Data$Impact$Source = F2(
	function (label, url) {
		return {label: label, url: url};
	});
var $author$project$Data$Impact$decodeSource = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Data$Impact$Source,
	A2($elm$json$Json$Decode$field, 'label', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'url', $elm$json$Json$Decode$string));
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$json$Json$Decode$dict = function (decoder) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		$elm$json$Json$Decode$keyValuePairs(decoder));
};
var $elm$json$Json$Decode$map8 = _Json_map8;
var $author$project$Data$Impact$Trigram = function (a) {
	return {$: 'Trigram', a: a};
};
var $author$project$Data$Impact$trg = $author$project$Data$Impact$Trigram;
var $author$project$Data$Impact$decodeList = function () {
	var toImpact = function (_v0) {
		var key = _v0.a;
		var source = _v0.b.source;
		var label = _v0.b.label;
		var description = _v0.b.description;
		var unit = _v0.b.unit;
		var quality = _v0.b.quality;
		var primary = _v0.b.primary;
		var pefData = _v0.b.pefData;
		var scopes = _v0.b.scopes;
		return A9(
			$author$project$Data$Impact$Definition,
			$author$project$Data$Impact$trg(key),
			source,
			label,
			description,
			unit,
			quality,
			primary,
			pefData,
			scopes);
	};
	var decodeDictValue = A9(
		$elm$json$Json$Decode$map8,
		F8(
			function (source, label, description, unit, quality, primary, pefData, scopes) {
				return {description: description, label: label, pefData: pefData, primary: primary, quality: quality, scopes: scopes, source: source, unit: unit};
			}),
		A2($elm$json$Json$Decode$field, 'source', $author$project$Data$Impact$decodeSource),
		A2($elm$json$Json$Decode$field, 'label_fr', $elm$json$Json$Decode$string),
		A2($elm$json$Json$Decode$field, 'description_fr', $elm$json$Json$Decode$string),
		A2($elm$json$Json$Decode$field, 'short_unit', $elm$json$Json$Decode$string),
		A2($elm$json$Json$Decode$field, 'quality', $author$project$Data$Impact$decodeQuality),
		A2($elm$json$Json$Decode$field, 'primary', $elm$json$Json$Decode$bool),
		A2(
			$elm$json$Json$Decode$field,
			'pef',
			$elm$json$Json$Decode$maybe($author$project$Data$Impact$decodePefData)),
		A2(
			$elm$json$Json$Decode$field,
			'scopes',
			$elm$json$Json$Decode$list($author$project$Data$Impact$decodeScope)));
	return A2(
		$elm$json$Json$Decode$andThen,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Dict$toList,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$map(toImpact),
				$elm$json$Json$Decode$succeed)),
		$elm$json$Json$Decode$dict(decodeDictValue));
}();
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 'BadStatus_', a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 'BadUrl_', a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 'GoodStatus_', a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 'NetworkError_'};
var $elm$http$Http$Receiving = function (a) {
	return {$: 'Receiving', a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 'Sending', a: a};
};
var $elm$http$Http$Timeout_ = {$: 'Timeout_'};
var $elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$http$Http$emptyBody = _Http_emptyBody;
var $elm$core$Task$fail = _Scheduler_fail;
var $elm$http$Http$resultToTask = function (result) {
	if (result.$ === 'Ok') {
		var a = result.a;
		return $elm$core$Task$succeed(a);
	} else {
		var x = result.a;
		return $elm$core$Task$fail(x);
	}
};
var $elm$http$Http$riskyTask = function (r) {
	return A3(
		_Http_toTask,
		_Utils_Tuple0,
		$elm$http$Http$resultToTask,
		{allowCookiesFromOtherDomains: true, body: r.body, expect: r.resolver, headers: r.headers, method: r.method, timeout: r.timeout, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $elm$http$Http$task = function (r) {
	return A3(
		_Http_toTask,
		_Utils_Tuple0,
		$elm$http$Http$resultToTask,
		{allowCookiesFromOtherDomains: false, body: r.body, expect: r.resolver, headers: r.headers, method: r.method, timeout: r.timeout, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $ohanhi$remotedata_http$RemoteData$Http$createTask = function (_v0) {
	var risky = _v0.risky;
	return risky ? $elm$http$Http$riskyTask : $elm$http$Http$task;
};
var $elm$http$Http$BadBody = function (a) {
	return {$: 'BadBody', a: a};
};
var $krisajenkins$remotedata$RemoteData$Failure = function (a) {
	return {$: 'Failure', a: a};
};
var $krisajenkins$remotedata$RemoteData$Success = function (a) {
	return {$: 'Success', a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var $elm$http$Http$NetworkError = {$: 'NetworkError'};
var $elm$http$Http$Timeout = {$: 'Timeout'};
var $elm$http$Http$stringResolver = A2(_Http_expect, '', $elm$core$Basics$identity);
var $ohanhi$remotedata_http$RemoteData$Http$taskResolver = function (fromGoodStatus) {
	var fail = A2($elm$core$Basics$composeL, $elm$core$Result$Ok, $krisajenkins$remotedata$RemoteData$Failure);
	return $elm$http$Http$stringResolver(
		function (response) {
			switch (response.$) {
				case 'BadUrl_':
					var url = response.a;
					return fail(
						$elm$http$Http$BadUrl(url));
				case 'Timeout_':
					return fail($elm$http$Http$Timeout);
				case 'NetworkError_':
					return fail($elm$http$Http$NetworkError);
				case 'BadStatus_':
					var metadata = response.a;
					var body = response.b;
					return fail(
						$elm$http$Http$BadStatus(metadata.statusCode));
				default:
					var metadata = response.a;
					var body = response.b;
					return fromGoodStatus(body);
			}
		});
};
var $ohanhi$remotedata_http$RemoteData$Http$jsonResolver = function (decoder) {
	return $ohanhi$remotedata_http$RemoteData$Http$taskResolver(
		function (body) {
			var _v0 = A2($elm$json$Json$Decode$decodeString, decoder, body);
			if (_v0.$ === 'Ok') {
				var value = _v0.a;
				return $elm$core$Result$Ok(
					$krisajenkins$remotedata$RemoteData$Success(value));
			} else {
				var err = _v0.a;
				return $elm$core$Result$Ok(
					$krisajenkins$remotedata$RemoteData$Failure(
						$elm$http$Http$BadBody(
							$elm$json$Json$Decode$errorToString(err))));
			}
		});
};
var $ohanhi$remotedata_http$RemoteData$Http$requestTask = F5(
	function (method, config, url, decoder, body) {
		return A2(
			$ohanhi$remotedata_http$RemoteData$Http$createTask,
			config,
			{
				body: body,
				headers: config.headers,
				method: method,
				resolver: $ohanhi$remotedata_http$RemoteData$Http$jsonResolver(decoder),
				timeout: config.timeout,
				url: url
			});
	});
var $ohanhi$remotedata_http$RemoteData$Http$getTaskWithConfig = F3(
	function (config, url, decoder) {
		return A5($ohanhi$remotedata_http$RemoteData$Http$requestTask, 'GET', config, url, decoder, $elm$http$Http$emptyBody);
	});
var $elm$http$Http$Header = F2(
	function (a, b) {
		return {$: 'Header', a: a, b: b};
	});
var $elm$http$Http$header = $elm$http$Http$Header;
var $ohanhi$remotedata_http$RemoteData$Http$acceptJson = A2($elm$http$Http$header, 'Accept', 'application/json');
var $ohanhi$remotedata_http$RemoteData$Http$defaultTaskConfig = {
	headers: _List_fromArray(
		[$ohanhi$remotedata_http$RemoteData$Http$acceptJson]),
	risky: false,
	timeout: $elm$core$Maybe$Nothing
};
var $author$project$Request$Textile$Db$taskConfig = _Utils_update(
	$ohanhi$remotedata_http$RemoteData$Http$defaultTaskConfig,
	{headers: _List_Nil});
var $author$project$Request$Textile$Db$getJson = F2(
	function (decoder, file) {
		return A3($ohanhi$remotedata_http$RemoteData$Http$getTaskWithConfig, $author$project$Request$Textile$Db$taskConfig, 'data/' + file, decoder);
	});
var $krisajenkins$remotedata$RemoteData$Loading = {$: 'Loading'};
var $author$project$Data$Textile$Process$Process = function (name) {
	return function (info) {
		return function (unit) {
			return function (uuid) {
				return function (impacts) {
					return function (heat) {
						return function (elec_pppm) {
							return function (elec) {
								return function (waste) {
									return function (alias) {
										return {alias: alias, elec: elec, elec_pppm: elec_pppm, heat: heat, impacts: impacts, info: info, name: name, unit: unit, uuid: uuid, waste: waste};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Data$Textile$Process$Uuid = function (a) {
	return {$: 'Uuid', a: a};
};
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (result.$ === 'Ok') {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $turboMaCk$any_dict$Dict$Any$insert = F3(
	function (k, v, _v0) {
		var inner = _v0.a;
		return $turboMaCk$any_dict$Dict$Any$AnyDict(
			_Utils_update(
				inner,
				{
					dict: A3(
						$elm$core$Dict$insert,
						inner.toKey(k),
						_Utils_Tuple2(k, v),
						inner.dict)
				}));
	});
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $turboMaCk$any_dict$Dict$Any$decode_ = F3(
	function (fromStr, toComparable, valueD) {
		var construct = F2(
			function (strK, v) {
				return $elm$core$Result$andThen(
					function (acc) {
						return A2(
							$elm$core$Result$map,
							function (key) {
								return A3($turboMaCk$any_dict$Dict$Any$insert, key, v, acc);
							},
							A2(fromStr, strK, v));
					});
			});
		return A2(
			$elm$json$Json$Decode$andThen,
			function (res) {
				if (res.$ === 'Ok') {
					var val = res.a;
					return $elm$json$Json$Decode$succeed(val);
				} else {
					var err = res.a;
					return $elm$json$Json$Decode$fail(err);
				}
			},
			A2(
				$elm$json$Json$Decode$map,
				A2(
					$elm$core$Dict$foldr,
					construct,
					$elm$core$Result$Ok(
						$turboMaCk$any_dict$Dict$Any$empty(toComparable))),
				$elm$json$Json$Decode$dict(valueD)));
	});
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $author$project$Data$Impact$toString = function (_v0) {
	var string = _v0.a;
	return string;
};
var $author$project$Data$Impact$decodeImpacts = function (definitions) {
	return A3(
		$turboMaCk$any_dict$Dict$Any$decode_,
		F2(
			function (str, _v0) {
				return A2(
					$elm$core$List$member,
					$author$project$Data$Impact$trg(str),
					A2(
						$elm$core$List$map,
						function ($) {
							return $.trigram;
						},
						definitions)) ? $elm$core$Result$Ok(
					$author$project$Data$Impact$trg(str)) : $elm$core$Result$Err('Trigramme d\'impact inconnu: ' + str);
			}),
		$author$project$Data$Impact$toString,
		$author$project$Data$Unit$decodeImpact);
};
var $ianmackenzie$elm_units$Energy$joules = function (numJoules) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numJoules);
};
var $ianmackenzie$elm_units$Energy$megajoules = function (numMegajoules) {
	return $ianmackenzie$elm_units$Energy$joules(1.0e6 * numMegajoules);
};
var $author$project$Data$Textile$Process$decode = function (impacts) {
	return A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'alias',
		$elm$json$Json$Decode$maybe($elm$json$Json$Decode$string),
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'waste',
			A2($elm$json$Json$Decode$map, $ianmackenzie$elm_units$Mass$kilograms, $elm$json$Json$Decode$float),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'elec_MJ',
				A2($elm$json$Json$Decode$map, $ianmackenzie$elm_units$Energy$megajoules, $elm$json$Json$Decode$float),
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'elec_pppm',
					$elm$json$Json$Decode$float,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'heat_MJ',
						A2($elm$json$Json$Decode$map, $ianmackenzie$elm_units$Energy$megajoules, $elm$json$Json$Decode$float),
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'impacts',
							$author$project$Data$Impact$decodeImpacts(impacts),
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'uuid',
								A2($elm$json$Json$Decode$map, $author$project$Data$Textile$Process$Uuid, $elm$json$Json$Decode$string),
								A3(
									$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
									'unit',
									$elm$json$Json$Decode$string,
									A3(
										$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
										'info',
										$elm$json$Json$Decode$string,
										A3(
											$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
											'name',
											$elm$json$Json$Decode$string,
											$elm$json$Json$Decode$succeed($author$project$Data$Textile$Process$Process)))))))))));
};
var $author$project$Data$Textile$Process$decodeList = function (impacts) {
	return $elm$json$Json$Decode$list(
		$author$project$Data$Textile$Process$decode(impacts));
};
var $author$project$Data$Textile$Db$Db = F6(
	function (impacts, processes, countries, materials, products, transports) {
		return {countries: countries, impacts: impacts, materials: materials, processes: processes, products: products, transports: transports};
	});
var $krisajenkins$remotedata$RemoteData$andMap = F2(
	function (wrappedValue, wrappedFunction) {
		var _v0 = _Utils_Tuple2(wrappedFunction, wrappedValue);
		_v0$2:
		while (true) {
			_v0$3:
			while (true) {
				_v0$4:
				while (true) {
					_v0$5:
					while (true) {
						switch (_v0.a.$) {
							case 'Success':
								switch (_v0.b.$) {
									case 'Success':
										var f = _v0.a.a;
										var value = _v0.b.a;
										return $krisajenkins$remotedata$RemoteData$Success(
											f(value));
									case 'Failure':
										break _v0$2;
									case 'Loading':
										break _v0$4;
									default:
										var _v4 = _v0.b;
										return $krisajenkins$remotedata$RemoteData$NotAsked;
								}
							case 'Failure':
								var error = _v0.a.a;
								return $krisajenkins$remotedata$RemoteData$Failure(error);
							case 'Loading':
								switch (_v0.b.$) {
									case 'Failure':
										break _v0$2;
									case 'Loading':
										break _v0$3;
									case 'NotAsked':
										break _v0$3;
									default:
										break _v0$3;
								}
							default:
								switch (_v0.b.$) {
									case 'Failure':
										break _v0$2;
									case 'Loading':
										break _v0$4;
									case 'NotAsked':
										break _v0$5;
									default:
										break _v0$5;
								}
						}
					}
					var _v3 = _v0.a;
					return $krisajenkins$remotedata$RemoteData$NotAsked;
				}
				var _v2 = _v0.b;
				return $krisajenkins$remotedata$RemoteData$Loading;
			}
			var _v1 = _v0.a;
			return $krisajenkins$remotedata$RemoteData$Loading;
		}
		var error = _v0.b.a;
		return $krisajenkins$remotedata$RemoteData$Failure(error);
	});
var $krisajenkins$remotedata$RemoteData$succeed = $krisajenkins$remotedata$RemoteData$Success;
var $author$project$Request$Textile$Db$buildFromWebData = F6(
	function (impacts, processes, countries, materials, products, transports) {
		return A2(
			$krisajenkins$remotedata$RemoteData$andMap,
			transports,
			A2(
				$krisajenkins$remotedata$RemoteData$andMap,
				products,
				A2(
					$krisajenkins$remotedata$RemoteData$andMap,
					materials,
					A2(
						$krisajenkins$remotedata$RemoteData$andMap,
						countries,
						$krisajenkins$remotedata$RemoteData$succeed(
							A2($author$project$Data$Textile$Db$Db, impacts, processes))))));
	});
var $author$project$Data$Country$codeFromString = $author$project$Data$Country$Code;
var $turboMaCk$any_dict$Dict$Any$decode = F3(
	function (fromStr, toComparable, valueD) {
		var construct = F3(
			function (strK, v, acc) {
				return A3(
					$turboMaCk$any_dict$Dict$Any$insert,
					A2(fromStr, strK, v),
					v,
					acc);
			});
		return A2(
			$elm$json$Json$Decode$map,
			A2(
				$elm$core$Dict$foldr,
				construct,
				$turboMaCk$any_dict$Dict$Any$empty(toComparable)),
			$elm$json$Json$Decode$dict(valueD));
	});
var $author$project$Data$Transport$Transport = F4(
	function (road, sea, air, impacts) {
		return {air: air, impacts: impacts, road: road, sea: sea};
	});
var $ianmackenzie$elm_units$Length$meters = function (numMeters) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numMeters);
};
var $ianmackenzie$elm_units$Length$kilometers = function (numKilometers) {
	return $ianmackenzie$elm_units$Length$meters(1000 * numKilometers);
};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $ianmackenzie$elm_units$Quantity$zero = $ianmackenzie$elm_units$Quantity$Quantity(0);
var $author$project$Data$Transport$decodeKm = A2(
	$elm$json$Json$Decode$map,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$Maybe$map($ianmackenzie$elm_units$Length$kilometers),
		$elm$core$Maybe$withDefault($ianmackenzie$elm_units$Quantity$zero)),
	$elm$json$Json$Decode$maybe($elm$json$Json$Decode$float));
var $elm$json$Json$Decode$map4 = _Json_map4;
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $author$project$Data$Impact$noImpacts = A2(
	$turboMaCk$any_dict$Dict$Any$fromList,
	$elm$core$Basics$always(''),
	_List_Nil);
var $author$project$Data$Transport$decode = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Data$Transport$Transport,
	A2($elm$json$Json$Decode$field, 'road', $author$project$Data$Transport$decodeKm),
	A2($elm$json$Json$Decode$field, 'sea', $author$project$Data$Transport$decodeKm),
	A2($elm$json$Json$Decode$field, 'air', $author$project$Data$Transport$decodeKm),
	$elm$json$Json$Decode$succeed($author$project$Data$Impact$noImpacts));
var $author$project$Data$Transport$decodeDistance = A3(
	$turboMaCk$any_dict$Dict$Any$decode,
	F2(
		function (str, _v0) {
			return $author$project$Data$Country$codeFromString(str);
		}),
	$author$project$Data$Country$codeToString,
	$author$project$Data$Transport$decode);
var $author$project$Data$Transport$decodeDistances = A3(
	$turboMaCk$any_dict$Dict$Any$decode,
	F2(
		function (str, _v0) {
			return $author$project$Data$Country$codeFromString(str);
		}),
	$author$project$Data$Country$codeToString,
	$author$project$Data$Transport$decodeDistance);
var $author$project$Data$Country$Country = F6(
	function (code, name, electricityProcess, heatProcess, dyeingWeighting, airTransportRatio) {
		return {airTransportRatio: airTransportRatio, code: code, dyeingWeighting: dyeingWeighting, electricityProcess: electricityProcess, heatProcess: heatProcess, name: name};
	});
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$core$Result$fromMaybe = F2(
	function (err, maybe) {
		if (maybe.$ === 'Just') {
			var v = maybe.a;
			return $elm$core$Result$Ok(v);
		} else {
			return $elm$core$Result$Err(err);
		}
	});
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Data$Textile$Process$uuidToString = function (_v0) {
	var string = _v0.a;
	return string;
};
var $author$project$Data$Textile$Process$findByUuid = function (uuid) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$List$filter(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.uuid;
				},
				$elm$core$Basics$eq(uuid))),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$head,
			$elm$core$Result$fromMaybe(
				'Procédé introuvable par UUID: ' + $author$project$Data$Textile$Process$uuidToString(uuid))));
};
var $elm_community$json_extra$Json$Decode$Extra$fromResult = function (result) {
	if (result.$ === 'Ok') {
		var successValue = result.a;
		return $elm$json$Json$Decode$succeed(successValue);
	} else {
		var errorMessage = result.a;
		return $elm$json$Json$Decode$fail(errorMessage);
	}
};
var $author$project$Data$Textile$Process$decodeFromUuid = function (processes) {
	return A2(
		$elm$json$Json$Decode$andThen,
		function (uuid) {
			return $elm_community$json_extra$Json$Decode$Extra$fromResult(
				A2(
					$author$project$Data$Textile$Process$findByUuid,
					$author$project$Data$Textile$Process$Uuid(uuid),
					processes));
		},
		$elm$json$Json$Decode$string);
};
var $elm$json$Json$Decode$map6 = _Json_map6;
var $author$project$Data$Country$decode = function (processes) {
	return A7(
		$elm$json$Json$Decode$map6,
		$author$project$Data$Country$Country,
		A2(
			$elm$json$Json$Decode$field,
			'code',
			A2($elm$json$Json$Decode$map, $author$project$Data$Country$Code, $elm$json$Json$Decode$string)),
		A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
		A2(
			$elm$json$Json$Decode$field,
			'electricityProcessUuid',
			$author$project$Data$Textile$Process$decodeFromUuid(processes)),
		A2(
			$elm$json$Json$Decode$field,
			'heatProcessUuid',
			$author$project$Data$Textile$Process$decodeFromUuid(processes)),
		A2($elm$json$Json$Decode$field, 'dyeingWeighting', $author$project$Data$Unit$decodeRatio),
		A2($elm$json$Json$Decode$field, 'airTransportRatio', $author$project$Data$Unit$decodeRatio));
};
var $author$project$Data$Country$decodeList = function (processes) {
	return $elm$json$Json$Decode$list(
		$author$project$Data$Country$decode(processes));
};
var $author$project$Data$Textile$Material$Material = function (id) {
	return function (name) {
		return function (shortName) {
			return function (category) {
				return function (materialProcess) {
					return function (recycledProcess) {
						return function (recycledFrom) {
							return function (spinningProcess) {
								return function (geographicOrigin) {
									return function (defaultCountry) {
										return function (priority) {
											return function (cffData) {
												return {category: category, cffData: cffData, defaultCountry: defaultCountry, geographicOrigin: geographicOrigin, id: id, materialProcess: materialProcess, name: name, priority: priority, recycledFrom: recycledFrom, recycledProcess: recycledProcess, shortName: shortName, spinningProcess: spinningProcess};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Data$Textile$Material$Category$Natural = {$: 'Natural'};
var $author$project$Data$Textile$Material$Category$Recycled = {$: 'Recycled'};
var $author$project$Data$Textile$Material$Category$Synthetic = {$: 'Synthetic'};
var $author$project$Data$Textile$Material$Category$fromString = function (category) {
	switch (category) {
		case 'Naturelles':
			return $author$project$Data$Textile$Material$Category$Natural;
		case 'Recyclées':
			return $author$project$Data$Textile$Material$Category$Recycled;
		case 'Synthétiques et artificielles':
			return $author$project$Data$Textile$Material$Category$Synthetic;
		default:
			return $author$project$Data$Textile$Material$Category$Natural;
	}
};
var $author$project$Data$Textile$Material$Category$decode = A2($elm$json$Json$Decode$map, $author$project$Data$Textile$Material$Category$fromString, $elm$json$Json$Decode$string);
var $author$project$Data$Textile$Material$CFFData = F2(
	function (manufacturerAllocation, recycledQualityRatio) {
		return {manufacturerAllocation: manufacturerAllocation, recycledQualityRatio: recycledQualityRatio};
	});
var $author$project$Data$Textile$Material$decodeCFFData = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'recycledQualityRatio',
	$author$project$Data$Unit$decodeRatio,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'manufacturerAllocation',
		$author$project$Data$Unit$decodeRatio,
		$elm$json$Json$Decode$succeed($author$project$Data$Textile$Material$CFFData)));
var $author$project$Data$Textile$Material$decode = function (processes) {
	return A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'cff',
		$elm$json$Json$Decode$maybe($author$project$Data$Textile$Material$decodeCFFData),
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'priority',
			$elm$json$Json$Decode$int,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'defaultCountry',
				A2($elm$json$Json$Decode$map, $author$project$Data$Country$codeFromString, $elm$json$Json$Decode$string),
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'geographicOrigin',
					$elm$json$Json$Decode$string,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'spinningProcessUuid',
						$elm$json$Json$Decode$maybe(
							$author$project$Data$Textile$Process$decodeFromUuid(processes)),
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'recycledFrom',
							$elm$json$Json$Decode$maybe(
								A2($elm$json$Json$Decode$map, $author$project$Data$Textile$Material$Id, $elm$json$Json$Decode$string)),
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'recycledProcessUuid',
								$elm$json$Json$Decode$maybe(
									$author$project$Data$Textile$Process$decodeFromUuid(processes)),
								A3(
									$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
									'materialProcessUuid',
									$author$project$Data$Textile$Process$decodeFromUuid(processes),
									A3(
										$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
										'category',
										$author$project$Data$Textile$Material$Category$decode,
										A3(
											$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
											'shortName',
											$elm$json$Json$Decode$string,
											A3(
												$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
												'name',
												$elm$json$Json$Decode$string,
												A3(
													$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
													'id',
													A2($elm$json$Json$Decode$map, $author$project$Data$Textile$Material$Id, $elm$json$Json$Decode$string),
													$elm$json$Json$Decode$succeed($author$project$Data$Textile$Material$Material)))))))))))));
};
var $author$project$Data$Textile$Material$decodeList = function (processes) {
	return $elm$json$Json$Decode$list(
		$author$project$Data$Textile$Material$decode(processes));
};
var $author$project$Data$Textile$Product$Product = F7(
	function (id, name, mass, fabric, making, use, endOfLife) {
		return {endOfLife: endOfLife, fabric: fabric, id: id, making: making, mass: mass, name: name, use: use};
	});
var $author$project$Data$Textile$Product$EndOfLifeOptions = function (volume) {
	return {volume: volume};
};
var $ianmackenzie$elm_units$Volume$cubicMeters = function (numCubicMeters) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numCubicMeters);
};
var $author$project$Data$Textile$Product$decodeEndOfLifeOptions = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'volume',
	A2($elm$json$Json$Decode$map, $ianmackenzie$elm_units$Volume$cubicMeters, $elm$json$Json$Decode$float),
	$elm$json$Json$Decode$succeed($author$project$Data$Textile$Product$EndOfLifeOptions));
var $author$project$Data$Textile$Product$Knitted = function (a) {
	return {$: 'Knitted', a: a};
};
var $author$project$Data$Textile$Product$Weaved = F3(
	function (a, b, c) {
		return {$: 'Weaved', a: a, b: b, c: c};
	});
var $elm$core$String$toLower = _String_toLower;
var $author$project$Data$Textile$Product$decodeFabricOptions = function (processes) {
	return A2(
		$elm$json$Json$Decode$andThen,
		function (str) {
			var _v0 = $elm$core$String$toLower(str);
			switch (_v0) {
				case 'knitting':
					return A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'processUuid',
						$author$project$Data$Textile$Process$decodeFromUuid(processes),
						$elm$json$Json$Decode$succeed($author$project$Data$Textile$Product$Knitted));
				case 'weaving':
					return A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'surfaceMass',
						$author$project$Data$Unit$decodeSurfaceMass,
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'picking',
							$author$project$Data$Unit$decodePickPerMeter,
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'processUuid',
								$author$project$Data$Textile$Process$decodeFromUuid(processes),
								$elm$json$Json$Decode$succeed($author$project$Data$Textile$Product$Weaved))));
				default:
					return $elm$json$Json$Decode$fail('Type de production d\'étoffe inconnu\u00A0: ' + str);
			}
		},
		A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string));
};
var $author$project$Data$Textile$Product$MakingOptions = F3(
	function (process, fadable, pcrWaste) {
		return {fadable: fadable, pcrWaste: pcrWaste, process: process};
	});
var $author$project$Data$Textile$Product$decodeMakingOptions = function (processes) {
	return A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'pcrWaste',
		$author$project$Data$Unit$decodeRatio,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'fadable',
			$elm$json$Json$Decode$bool,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'processUuid',
				$author$project$Data$Textile$Process$decodeFromUuid(processes),
				$elm$json$Json$Decode$succeed($author$project$Data$Textile$Product$MakingOptions))));
};
var $author$project$Data$Textile$Product$UseOptions = F8(
	function (ironingProcess, nonIroningProcess, wearsPerCycle, defaultNbCycles, ratioDryer, ratioIroning, timeIroning, daysOfWear) {
		return {daysOfWear: daysOfWear, defaultNbCycles: defaultNbCycles, ironingProcess: ironingProcess, nonIroningProcess: nonIroningProcess, ratioDryer: ratioDryer, ratioIroning: ratioIroning, timeIroning: timeIroning, wearsPerCycle: wearsPerCycle};
	});
var $ianmackenzie$elm_units$Constants$second = 1;
var $ianmackenzie$elm_units$Constants$minute = 60 * $ianmackenzie$elm_units$Constants$second;
var $ianmackenzie$elm_units$Constants$hour = 60 * $ianmackenzie$elm_units$Constants$minute;
var $ianmackenzie$elm_units$Constants$day = 24 * $ianmackenzie$elm_units$Constants$hour;
var $ianmackenzie$elm_units$Duration$seconds = function (numSeconds) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numSeconds);
};
var $ianmackenzie$elm_units$Duration$days = function (numDays) {
	return $ianmackenzie$elm_units$Duration$seconds($ianmackenzie$elm_units$Constants$day * numDays);
};
var $ianmackenzie$elm_units$Duration$hours = function (numHours) {
	return $ianmackenzie$elm_units$Duration$seconds($ianmackenzie$elm_units$Constants$hour * numHours);
};
var $author$project$Data$Textile$Product$decodeUseOptions = function (processes) {
	return A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'daysOfWear',
		A2($elm$json$Json$Decode$map, $ianmackenzie$elm_units$Duration$days, $elm$json$Json$Decode$float),
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'timeIroning',
			A2($elm$json$Json$Decode$map, $ianmackenzie$elm_units$Duration$hours, $elm$json$Json$Decode$float),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'ratioIroning',
				$author$project$Data$Unit$decodeRatio,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'ratioDryer',
					$author$project$Data$Unit$decodeRatio,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'defaultNbCycles',
						$elm$json$Json$Decode$int,
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'wearsPerCycle',
							$elm$json$Json$Decode$int,
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'nonIroningProcessUuid',
								$author$project$Data$Textile$Process$decodeFromUuid(processes),
								A3(
									$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
									'ironingProcessUuid',
									$author$project$Data$Textile$Process$decodeFromUuid(processes),
									$elm$json$Json$Decode$succeed($author$project$Data$Textile$Product$UseOptions)))))))));
};
var $author$project$Data$Textile$Product$decode = function (processes) {
	return A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'endOfLife',
		$author$project$Data$Textile$Product$decodeEndOfLifeOptions,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'use',
			$author$project$Data$Textile$Product$decodeUseOptions(processes),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'making',
				$author$project$Data$Textile$Product$decodeMakingOptions(processes),
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'fabric',
					$author$project$Data$Textile$Product$decodeFabricOptions(processes),
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'mass',
						A2($elm$json$Json$Decode$map, $ianmackenzie$elm_units$Mass$kilograms, $elm$json$Json$Decode$float),
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'name',
							$elm$json$Json$Decode$string,
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'id',
								A2($elm$json$Json$Decode$map, $author$project$Data$Textile$Product$Id, $elm$json$Json$Decode$string),
								$elm$json$Json$Decode$succeed($author$project$Data$Textile$Product$Product))))))));
};
var $author$project$Data$Textile$Product$decodeList = function (processes) {
	return $elm$json$Json$Decode$list(
		$author$project$Data$Textile$Product$decode(processes));
};
var $author$project$Request$Textile$Db$loadDependentData = F2(
	function (impacts, processes) {
		var andMap = $elm$core$Task$map2($elm$core$Basics$apR);
		return A2(
			andMap,
			A2($author$project$Request$Textile$Db$getJson, $author$project$Data$Transport$decodeDistances, 'transports.json'),
			A2(
				andMap,
				A2(
					$author$project$Request$Textile$Db$getJson,
					$author$project$Data$Textile$Product$decodeList(processes),
					'products.json'),
				A2(
					andMap,
					A2(
						$author$project$Request$Textile$Db$getJson,
						$author$project$Data$Textile$Material$decodeList(processes),
						'materials.json'),
					A2(
						andMap,
						A2(
							$author$project$Request$Textile$Db$getJson,
							$author$project$Data$Country$decodeList(processes),
							'countries.json'),
						$elm$core$Task$succeed(
							A2($author$project$Request$Textile$Db$buildFromWebData, impacts, processes))))));
	});
var $author$project$Request$Textile$Db$handleProcessesLoaded = F2(
	function (impacts, processesData) {
		switch (processesData.$) {
			case 'Success':
				var processes = processesData.a;
				return A2($author$project$Request$Textile$Db$loadDependentData, impacts, processes);
			case 'Failure':
				var error = processesData.a;
				return $elm$core$Task$succeed(
					$krisajenkins$remotedata$RemoteData$Failure(error));
			case 'NotAsked':
				return $elm$core$Task$succeed($krisajenkins$remotedata$RemoteData$NotAsked);
			default:
				return $elm$core$Task$succeed($krisajenkins$remotedata$RemoteData$Loading);
		}
	});
var $author$project$Request$Textile$Db$handleImpactsLoaded = function (impactsData) {
	switch (impactsData.$) {
		case 'Success':
			var impacts = impactsData.a;
			return A2(
				$elm$core$Task$andThen,
				$author$project$Request$Textile$Db$handleProcessesLoaded(impacts),
				A2(
					$author$project$Request$Textile$Db$getJson,
					$author$project$Data$Textile$Process$decodeList(impacts),
					'processes.json'));
		case 'Failure':
			var error = impactsData.a;
			return $elm$core$Task$succeed(
				$krisajenkins$remotedata$RemoteData$Failure(error));
		case 'NotAsked':
			return $elm$core$Task$succeed($krisajenkins$remotedata$RemoteData$NotAsked);
		default:
			return $elm$core$Task$succeed($krisajenkins$remotedata$RemoteData$Loading);
	}
};
var $author$project$Request$Textile$Db$loadDb = F2(
	function (_v0, event) {
		return A2(
			$elm$core$Task$attempt,
			function (result) {
				if (result.$ === 'Ok') {
					var wd = result.a;
					return event(wd);
				} else {
					return event($krisajenkins$remotedata$RemoteData$NotAsked);
				}
			},
			A2(
				$elm$core$Task$andThen,
				$author$project$Request$Textile$Db$handleImpactsLoaded,
				A2($author$project$Request$Textile$Db$getJson, $author$project$Data$Impact$decodeList, 'impacts.json')));
	});
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 'BadUrl_':
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 'Timeout_':
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 'NetworkError_':
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 'BadStatus_':
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.statusCode));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectJson = F2(
	function (toMsg, decoder) {
		return A2(
			$elm$http$Http$expectStringResponse,
			toMsg,
			$elm$http$Http$resolve(
				function (string) {
					return A2(
						$elm$core$Result$mapError,
						$elm$json$Json$Decode$errorToString,
						A2($elm$json$Json$Decode$decodeString, decoder, string));
				}));
	});
var $krisajenkins$remotedata$RemoteData$fromResult = function (result) {
	if (result.$ === 'Err') {
		var e = result.a;
		return $krisajenkins$remotedata$RemoteData$Failure(e);
	} else {
		var x = result.a;
		return $krisajenkins$remotedata$RemoteData$Success(x);
	}
};
var $elm$http$Http$Request = function (a) {
	return {$: 'Request', a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {reqs: reqs, subs: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (cmd.$ === 'Cancel') {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 'Nothing') {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.tracker;
							if (_v4.$ === 'Nothing') {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.reqs));
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.subs)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 'Cancel', a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (cmd.$ === 'Cancel') {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					allowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,
					body: r.body,
					expect: A2(_Http_mapExpect, func, r.expect),
					headers: r.headers,
					method: r.method,
					timeout: r.timeout,
					tracker: r.tracker,
					url: r.url
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 'MySub', a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{allowCookiesFromOtherDomains: false, body: r.body, expect: r.expect, headers: r.headers, method: r.method, timeout: r.timeout, tracker: r.tracker, url: r.url}));
};
var $elm$http$Http$riskyRequest = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{allowCookiesFromOtherDomains: true, body: r.body, expect: r.expect, headers: r.headers, method: r.method, timeout: r.timeout, tracker: r.tracker, url: r.url}));
};
var $ohanhi$remotedata_http$RemoteData$Http$performRequest = function (_v0) {
	var risky = _v0.risky;
	return risky ? $elm$http$Http$riskyRequest : $elm$http$Http$request;
};
var $ohanhi$remotedata_http$RemoteData$Http$request = F6(
	function (method, config, url, tagger, decoder, body) {
		return A2(
			$ohanhi$remotedata_http$RemoteData$Http$performRequest,
			config,
			{
				body: body,
				expect: A2(
					$elm$http$Http$expectJson,
					A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, tagger),
					decoder),
				headers: config.headers,
				method: method,
				timeout: config.timeout,
				tracker: config.tracker,
				url: url
			});
	});
var $ohanhi$remotedata_http$RemoteData$Http$getWithConfig = F4(
	function (config, url, tagger, decoder) {
		return A6($ohanhi$remotedata_http$RemoteData$Http$request, 'GET', config, url, tagger, decoder, $elm$http$Http$emptyBody);
	});
var $ohanhi$remotedata_http$RemoteData$Http$defaultConfig = {
	headers: _List_fromArray(
		[$ohanhi$remotedata_http$RemoteData$Http$acceptJson]),
	risky: false,
	timeout: $elm$core$Maybe$Nothing,
	tracker: $elm$core$Maybe$Nothing
};
var $ohanhi$remotedata_http$RemoteData$Http$noCache = A2($elm$http$Http$header, 'Cache-Control', 'no-store, must-revalidate, no-cache, max-age=0');
var $ohanhi$remotedata_http$RemoteData$Http$noCacheConfig = _Utils_update(
	$ohanhi$remotedata_http$RemoteData$Http$defaultConfig,
	{
		headers: A2($elm$core$List$cons, $ohanhi$remotedata_http$RemoteData$Http$noCache, $ohanhi$remotedata_http$RemoteData$Http$defaultConfig.headers)
	});
var $ohanhi$remotedata_http$RemoteData$Http$get = $ohanhi$remotedata_http$RemoteData$Http$getWithConfig($ohanhi$remotedata_http$RemoteData$Http$noCacheConfig);
var $author$project$Request$Version$hashDecoder = A2($elm$json$Json$Decode$field, 'hash', $elm$json$Json$Decode$string);
var $author$project$Request$Version$loadVersion = function (event) {
	return A3($ohanhi$remotedata_http$RemoteData$Http$get, '/version.json', event, $author$project$Request$Version$hashDecoder);
};
var $author$project$Main$init = F3(
	function (flags, url, navKey) {
		var session = {
			clientUrl: flags.clientUrl,
			currentVersion: $author$project$Request$Version$Unknown,
			db: $author$project$Data$Textile$Db$empty,
			foodDb: $author$project$Data$Food$Db$empty,
			navKey: navKey,
			notifications: _List_Nil,
			query: $author$project$Data$Textile$Inputs$defaultQuery,
			store: $author$project$Data$Session$deserializeStore(flags.rawStore)
		};
		return _Utils_Tuple2(
			{mobileNavigationOpened: false, page: $author$project$Main$BlankPage, session: session},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						$author$project$Ports$appStarted(_Utils_Tuple0),
						A2(
						$author$project$Request$Textile$Db$loadDb,
						session,
						$author$project$Main$TextileDbReceived(url)),
						$author$project$Request$Version$loadVersion($author$project$Main$VersionReceived)
					])));
	});
var $author$project$Main$StoreChanged = function (a) {
	return {$: 'StoreChanged', a: a};
};
var $author$project$Main$TextileExploreMsg = function (a) {
	return {$: 'TextileExploreMsg', a: a};
};
var $author$project$Main$TextileSimulatorMsg = function (a) {
	return {$: 'TextileSimulatorMsg', a: a};
};
var $author$project$Main$VersionPoll = {$: 'VersionPoll'};
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$core$Platform$Sub$map = _Platform_map;
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $elm$time$Time$Every = F2(
	function (a, b) {
		return {$: 'Every', a: a, b: b};
	});
var $elm$time$Time$State = F2(
	function (taggers, processes) {
		return {processes: processes, taggers: taggers};
	});
var $elm$time$Time$init = $elm$core$Task$succeed(
	A2($elm$time$Time$State, $elm$core$Dict$empty, $elm$core$Dict$empty));
var $elm$time$Time$addMySub = F2(
	function (_v0, state) {
		var interval = _v0.a;
		var tagger = _v0.b;
		var _v1 = A2($elm$core$Dict$get, interval, state);
		if (_v1.$ === 'Nothing') {
			return A3(
				$elm$core$Dict$insert,
				interval,
				_List_fromArray(
					[tagger]),
				state);
		} else {
			var taggers = _v1.a;
			return A3(
				$elm$core$Dict$insert,
				interval,
				A2($elm$core$List$cons, tagger, taggers),
				state);
		}
	});
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$time$Time$Name = function (a) {
	return {$: 'Name', a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 'Offset', a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 'Zone', a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$setInterval = _Time_setInterval;
var $elm$time$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		if (!intervals.b) {
			return $elm$core$Task$succeed(processes);
		} else {
			var interval = intervals.a;
			var rest = intervals.b;
			var spawnTimer = $elm$core$Process$spawn(
				A2(
					$elm$time$Time$setInterval,
					interval,
					A2($elm$core$Platform$sendToSelf, router, interval)));
			var spawnRest = function (id) {
				return A3(
					$elm$time$Time$spawnHelp,
					router,
					rest,
					A3($elm$core$Dict$insert, interval, id, processes));
			};
			return A2($elm$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var $elm$time$Time$onEffects = F3(
	function (router, subs, _v0) {
		var processes = _v0.processes;
		var rightStep = F3(
			function (_v6, id, _v7) {
				var spawns = _v7.a;
				var existing = _v7.b;
				var kills = _v7.c;
				return _Utils_Tuple3(
					spawns,
					existing,
					A2(
						$elm$core$Task$andThen,
						function (_v5) {
							return kills;
						},
						$elm$core$Process$kill(id)));
			});
		var newTaggers = A3($elm$core$List$foldl, $elm$time$Time$addMySub, $elm$core$Dict$empty, subs);
		var leftStep = F3(
			function (interval, taggers, _v4) {
				var spawns = _v4.a;
				var existing = _v4.b;
				var kills = _v4.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, interval, spawns),
					existing,
					kills);
			});
		var bothStep = F4(
			function (interval, taggers, id, _v3) {
				var spawns = _v3.a;
				var existing = _v3.b;
				var kills = _v3.c;
				return _Utils_Tuple3(
					spawns,
					A3($elm$core$Dict$insert, interval, id, existing),
					kills);
			});
		var _v1 = A6(
			$elm$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			processes,
			_Utils_Tuple3(
				_List_Nil,
				$elm$core$Dict$empty,
				$elm$core$Task$succeed(_Utils_Tuple0)));
		var spawnList = _v1.a;
		var existingDict = _v1.b;
		var killTask = _v1.c;
		return A2(
			$elm$core$Task$andThen,
			function (newProcesses) {
				return $elm$core$Task$succeed(
					A2($elm$time$Time$State, newTaggers, newProcesses));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v2) {
					return A3($elm$time$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var $elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
var $elm$time$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _v0 = A2($elm$core$Dict$get, interval, state.taggers);
		if (_v0.$ === 'Nothing') {
			return $elm$core$Task$succeed(state);
		} else {
			var taggers = _v0.a;
			var tellTaggers = function (time) {
				return $elm$core$Task$sequence(
					A2(
						$elm$core$List$map,
						function (tagger) {
							return A2(
								$elm$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						taggers));
			};
			return A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$succeed(state);
				},
				A2($elm$core$Task$andThen, tellTaggers, $elm$time$Time$now));
		}
	});
var $elm$time$Time$subMap = F2(
	function (f, _v0) {
		var interval = _v0.a;
		var tagger = _v0.b;
		return A2(
			$elm$time$Time$Every,
			interval,
			A2($elm$core$Basics$composeL, f, tagger));
	});
_Platform_effectManagers['Time'] = _Platform_createManager($elm$time$Time$init, $elm$time$Time$onEffects, $elm$time$Time$onSelfMsg, 0, $elm$time$Time$subMap);
var $elm$time$Time$subscription = _Platform_leaf('Time');
var $elm$time$Time$every = F2(
	function (interval, tagger) {
		return $elm$time$Time$subscription(
			A2($elm$time$Time$Every, interval, tagger));
	});
var $author$project$Request$Version$pollVersion = function (event) {
	return A2(
		$elm$time$Time$every,
		60 * 1000,
		$elm$core$Basics$always(event));
};
var $author$project$Ports$storeChanged = _Platform_incomingPort('storeChanged', $elm$json$Json$Decode$string);
var $author$project$Page$Textile$Explore$CloseModal = {$: 'CloseModal'};
var $author$project$Data$Key$forKeyCode = F3(
	function (key, msg, keyCode) {
		return _Utils_eq(keyCode, key) ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail(
			$elm$core$String$fromInt(keyCode));
	});
var $author$project$Data$Key$succeedForKeyCode = F2(
	function (key, msg) {
		return A2(
			$elm$json$Json$Decode$andThen,
			A2($author$project$Data$Key$forKeyCode, key, msg),
			A2($elm$json$Json$Decode$field, 'keyCode', $elm$json$Json$Decode$int));
	});
var $author$project$Data$Key$escape = function (msg) {
	return A2($author$project$Data$Key$succeedForKeyCode, 27, msg);
};
var $author$project$Page$Textile$Explore$modalOpened = function (dataset) {
	_v0$4:
	while (true) {
		switch (dataset.$) {
			case 'Countries':
				if (dataset.a.$ === 'Just') {
					return true;
				} else {
					break _v0$4;
				}
			case 'Impacts':
				if (dataset.a.$ === 'Just') {
					return true;
				} else {
					break _v0$4;
				}
			case 'Products':
				if (dataset.a.$ === 'Just') {
					return true;
				} else {
					break _v0$4;
				}
			default:
				if (dataset.a.$ === 'Just') {
					return true;
				} else {
					break _v0$4;
				}
		}
	}
	return false;
};
var $elm$browser$Browser$Events$Document = {$: 'Document'};
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 'MySub', a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {pids: pids, subs: subs};
	});
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (node.$ === 'Document') {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {event: event, key: key};
	});
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (node.$ === 'Document') {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.pids,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var key = _v0.key;
		var event = _v0.event;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.subs);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onKeyDown = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, 'keydown');
var $author$project$Page$Textile$Explore$subscriptions = function (_v0) {
	var dataset = _v0.dataset;
	return $author$project$Page$Textile$Explore$modalOpened(dataset) ? $elm$browser$Browser$Events$onKeyDown(
		$author$project$Data$Key$escape($author$project$Page$Textile$Explore$CloseModal)) : $elm$core$Platform$Sub$none;
};
var $author$project$Page$Textile$Simulator$NoModal = {$: 'NoModal'};
var $author$project$Page$Textile$Simulator$SetModal = function (a) {
	return {$: 'SetModal', a: a};
};
var $author$project$Page$Textile$Simulator$subscriptions = function (_v0) {
	var modal = _v0.modal;
	if (modal.$ === 'NoModal') {
		return $elm$core$Platform$Sub$none;
	} else {
		return $elm$browser$Browser$Events$onKeyDown(
			$author$project$Data$Key$escape(
				$author$project$Page$Textile$Simulator$SetModal($author$project$Page$Textile$Simulator$NoModal)));
	}
};
var $author$project$Main$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$Ports$storeChanged($author$project$Main$StoreChanged),
				$author$project$Request$Version$pollVersion($author$project$Main$VersionPoll),
				function () {
				var _v0 = model.page;
				switch (_v0.$) {
					case 'HomePage':
						return $elm$core$Platform$Sub$none;
					case 'ApiPage':
						return $elm$core$Platform$Sub$none;
					case 'ChangelogPage':
						return $elm$core$Platform$Sub$none;
					case 'EditorialPage':
						return $elm$core$Platform$Sub$none;
					case 'TextileExamplesPage':
						return $elm$core$Platform$Sub$none;
					case 'TextileExplorePage':
						var subModel = _v0.a;
						return A2(
							$elm$core$Platform$Sub$map,
							$author$project$Main$TextileExploreMsg,
							$author$project$Page$Textile$Explore$subscriptions(subModel));
					case 'TextileSimulatorPage':
						var subModel = _v0.a;
						return A2(
							$elm$core$Platform$Sub$map,
							$author$project$Main$TextileSimulatorMsg,
							$author$project$Page$Textile$Simulator$subscriptions(subModel));
					case 'StatsPage':
						return $elm$core$Platform$Sub$none;
					case 'FoodSimulatorPage':
						return $elm$core$Platform$Sub$none;
					case 'NotFoundPage':
						return $elm$core$Platform$Sub$none;
					default:
						return $elm$core$Platform$Sub$none;
				}
			}()
			]));
};
var $author$project$Main$ApiMsg = function (a) {
	return {$: 'ApiMsg', a: a};
};
var $author$project$Main$ApiPage = function (a) {
	return {$: 'ApiPage', a: a};
};
var $author$project$Main$ChangelogMsg = function (a) {
	return {$: 'ChangelogMsg', a: a};
};
var $author$project$Main$ChangelogPage = function (a) {
	return {$: 'ChangelogPage', a: a};
};
var $author$project$Main$EditorialMsg = function (a) {
	return {$: 'EditorialMsg', a: a};
};
var $author$project$Main$EditorialPage = function (a) {
	return {$: 'EditorialPage', a: a};
};
var $author$project$Main$FoodSimulatorMsg = function (a) {
	return {$: 'FoodSimulatorMsg', a: a};
};
var $author$project$Main$FoodSimulatorPage = function (a) {
	return {$: 'FoodSimulatorPage', a: a};
};
var $author$project$Main$HomeMsg = function (a) {
	return {$: 'HomeMsg', a: a};
};
var $author$project$Main$HomePage = function (a) {
	return {$: 'HomePage', a: a};
};
var $author$project$Main$NotFoundPage = {$: 'NotFoundPage'};
var $author$project$Main$StatsMsg = function (a) {
	return {$: 'StatsMsg', a: a};
};
var $author$project$Main$StatsPage = function (a) {
	return {$: 'StatsPage', a: a};
};
var $author$project$Main$TextileExamplesMsg = function (a) {
	return {$: 'TextileExamplesMsg', a: a};
};
var $author$project$Main$TextileExamplesPage = function (a) {
	return {$: 'TextileExamplesPage', a: a};
};
var $author$project$Main$TextileExplorePage = function (a) {
	return {$: 'TextileExplorePage', a: a};
};
var $author$project$Main$TextileSimulatorPage = function (a) {
	return {$: 'TextileSimulatorPage', a: a};
};
var $elm$core$Basics$neq = _Utils_notEqual;
var $author$project$Data$Session$closeNotification = F2(
	function (notification, session) {
		var notifications = session.notifications;
		return _Utils_update(
			session,
			{
				notifications: A2(
					$elm$core$List$filter,
					$elm$core$Basics$neq(notification),
					notifications)
			});
	});
var $elm$url$Url$Parser$State = F5(
	function (visited, unvisited, params, frag, value) {
		return {frag: frag, params: params, unvisited: unvisited, value: value, visited: visited};
	});
var $elm$url$Url$Parser$getFirstMatch = function (states) {
	getFirstMatch:
	while (true) {
		if (!states.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var state = states.a;
			var rest = states.b;
			var _v1 = state.unvisited;
			if (!_v1.b) {
				return $elm$core$Maybe$Just(state.value);
			} else {
				if ((_v1.a === '') && (!_v1.b.b)) {
					return $elm$core$Maybe$Just(state.value);
				} else {
					var $temp$states = rest;
					states = $temp$states;
					continue getFirstMatch;
				}
			}
		}
	}
};
var $elm$url$Url$Parser$removeFinalEmpty = function (segments) {
	if (!segments.b) {
		return _List_Nil;
	} else {
		if ((segments.a === '') && (!segments.b.b)) {
			return _List_Nil;
		} else {
			var segment = segments.a;
			var rest = segments.b;
			return A2(
				$elm$core$List$cons,
				segment,
				$elm$url$Url$Parser$removeFinalEmpty(rest));
		}
	}
};
var $elm$url$Url$Parser$preparePath = function (path) {
	var _v0 = A2($elm$core$String$split, '/', path);
	if (_v0.b && (_v0.a === '')) {
		var segments = _v0.b;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	} else {
		var segments = _v0;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	}
};
var $elm$url$Url$Parser$addToParametersHelp = F2(
	function (value, maybeList) {
		if (maybeList.$ === 'Nothing') {
			return $elm$core$Maybe$Just(
				_List_fromArray(
					[value]));
		} else {
			var list = maybeList.a;
			return $elm$core$Maybe$Just(
				A2($elm$core$List$cons, value, list));
		}
	});
var $elm$url$Url$percentDecode = _Url_percentDecode;
var $elm$url$Url$Parser$addParam = F2(
	function (segment, dict) {
		var _v0 = A2($elm$core$String$split, '=', segment);
		if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
			var rawKey = _v0.a;
			var _v1 = _v0.b;
			var rawValue = _v1.a;
			var _v2 = $elm$url$Url$percentDecode(rawKey);
			if (_v2.$ === 'Nothing') {
				return dict;
			} else {
				var key = _v2.a;
				var _v3 = $elm$url$Url$percentDecode(rawValue);
				if (_v3.$ === 'Nothing') {
					return dict;
				} else {
					var value = _v3.a;
					return A3(
						$elm$core$Dict$update,
						key,
						$elm$url$Url$Parser$addToParametersHelp(value),
						dict);
				}
			}
		} else {
			return dict;
		}
	});
var $elm$url$Url$Parser$prepareQuery = function (maybeQuery) {
	if (maybeQuery.$ === 'Nothing') {
		return $elm$core$Dict$empty;
	} else {
		var qry = maybeQuery.a;
		return A3(
			$elm$core$List$foldr,
			$elm$url$Url$Parser$addParam,
			$elm$core$Dict$empty,
			A2($elm$core$String$split, '&', qry));
	}
};
var $elm$url$Url$Parser$parse = F2(
	function (_v0, url) {
		var parser = _v0.a;
		return $elm$url$Url$Parser$getFirstMatch(
			parser(
				A5(
					$elm$url$Url$Parser$State,
					_List_Nil,
					$elm$url$Url$Parser$preparePath(url.path),
					$elm$url$Url$Parser$prepareQuery(url.query),
					url.fragment,
					$elm$core$Basics$identity)));
	});
var $author$project$Route$Api = {$: 'Api'};
var $author$project$Route$Changelog = {$: 'Changelog'};
var $author$project$Data$Textile$Db$Countries = function (a) {
	return {$: 'Countries', a: a};
};
var $author$project$Route$Editorial = function (a) {
	return {$: 'Editorial', a: a};
};
var $author$project$Route$FoodSimulator = {$: 'FoodSimulator'};
var $author$project$Route$Home = {$: 'Home'};
var $author$project$Data$Unit$PerItem = {$: 'PerItem'};
var $author$project$Page$Textile$Simulator$ViewMode$Simple = {$: 'Simple'};
var $author$project$Route$Stats = {$: 'Stats'};
var $author$project$Route$TextileExamples = {$: 'TextileExamples'};
var $author$project$Route$TextileExplore = function (a) {
	return {$: 'TextileExplore', a: a};
};
var $author$project$Route$TextileSimulator = F4(
	function (a, b, c, d) {
		return {$: 'TextileSimulator', a: a, b: b, c: c, d: d};
	});
var $author$project$Data$Impact$defaultTrigram = $author$project$Data$Impact$trg('pef');
var $elm$url$Url$Parser$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$url$Url$Parser$mapState = F2(
	function (func, _v0) {
		var visited = _v0.visited;
		var unvisited = _v0.unvisited;
		var params = _v0.params;
		var frag = _v0.frag;
		var value = _v0.value;
		return A5(
			$elm$url$Url$Parser$State,
			visited,
			unvisited,
			params,
			frag,
			func(value));
	});
var $elm$url$Url$Parser$map = F2(
	function (subValue, _v0) {
		var parseArg = _v0.a;
		return $elm$url$Url$Parser$Parser(
			function (_v1) {
				var visited = _v1.visited;
				var unvisited = _v1.unvisited;
				var params = _v1.params;
				var frag = _v1.frag;
				var value = _v1.value;
				return A2(
					$elm$core$List$map,
					$elm$url$Url$Parser$mapState(value),
					parseArg(
						A5($elm$url$Url$Parser$State, visited, unvisited, params, frag, subValue)));
			});
	});
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $elm$url$Url$Parser$oneOf = function (parsers) {
	return $elm$url$Url$Parser$Parser(
		function (state) {
			return A2(
				$elm$core$List$concatMap,
				function (_v0) {
					var parser = _v0.a;
					return parser(state);
				},
				parsers);
		});
};
var $author$project$Page$Textile$Simulator$ViewMode$Dataviz = {$: 'Dataviz'};
var $author$project$Page$Textile$Simulator$ViewMode$DetailedAll = {$: 'DetailedAll'};
var $elm$url$Url$Parser$custom = F2(
	function (tipe, stringToSomething) {
		return $elm$url$Url$Parser$Parser(
			function (_v0) {
				var visited = _v0.visited;
				var unvisited = _v0.unvisited;
				var params = _v0.params;
				var frag = _v0.frag;
				var value = _v0.value;
				if (!unvisited.b) {
					return _List_Nil;
				} else {
					var next = unvisited.a;
					var rest = unvisited.b;
					var _v2 = stringToSomething(next);
					if (_v2.$ === 'Just') {
						var nextValue = _v2.a;
						return _List_fromArray(
							[
								A5(
								$elm$url$Url$Parser$State,
								A2($elm$core$List$cons, next, visited),
								rest,
								params,
								frag,
								value(nextValue))
							]);
					} else {
						return _List_Nil;
					}
				}
			});
	});
var $author$project$Page$Textile$Simulator$ViewMode$parse = A2(
	$elm$url$Url$Parser$custom,
	'VIEW_MODE',
	function (string) {
		switch (string) {
			case 'dataviz':
				return $elm$core$Maybe$Just($author$project$Page$Textile$Simulator$ViewMode$Dataviz);
			case 'detailed':
				return $elm$core$Maybe$Just($author$project$Page$Textile$Simulator$ViewMode$DetailedAll);
			default:
				return $elm$core$Maybe$Just($author$project$Page$Textile$Simulator$ViewMode$Simple);
		}
	});
var $truqu$elm_base64$Base64$Decode$pad = function (input) {
	var _v0 = $elm$core$String$length(input) % 4;
	switch (_v0) {
		case 3:
			return input + '=';
		case 2:
			return input + '==';
		default:
			return input;
	}
};
var $truqu$elm_base64$Base64$Decode$charToInt = function (_char) {
	switch (_char.valueOf()) {
		case 'A':
			return 0;
		case 'B':
			return 1;
		case 'C':
			return 2;
		case 'D':
			return 3;
		case 'E':
			return 4;
		case 'F':
			return 5;
		case 'G':
			return 6;
		case 'H':
			return 7;
		case 'I':
			return 8;
		case 'J':
			return 9;
		case 'K':
			return 10;
		case 'L':
			return 11;
		case 'M':
			return 12;
		case 'N':
			return 13;
		case 'O':
			return 14;
		case 'P':
			return 15;
		case 'Q':
			return 16;
		case 'R':
			return 17;
		case 'S':
			return 18;
		case 'T':
			return 19;
		case 'U':
			return 20;
		case 'V':
			return 21;
		case 'W':
			return 22;
		case 'X':
			return 23;
		case 'Y':
			return 24;
		case 'Z':
			return 25;
		case 'a':
			return 26;
		case 'b':
			return 27;
		case 'c':
			return 28;
		case 'd':
			return 29;
		case 'e':
			return 30;
		case 'f':
			return 31;
		case 'g':
			return 32;
		case 'h':
			return 33;
		case 'i':
			return 34;
		case 'j':
			return 35;
		case 'k':
			return 36;
		case 'l':
			return 37;
		case 'm':
			return 38;
		case 'n':
			return 39;
		case 'o':
			return 40;
		case 'p':
			return 41;
		case 'q':
			return 42;
		case 'r':
			return 43;
		case 's':
			return 44;
		case 't':
			return 45;
		case 'u':
			return 46;
		case 'v':
			return 47;
		case 'w':
			return 48;
		case 'x':
			return 49;
		case 'y':
			return 50;
		case 'z':
			return 51;
		case '0':
			return 52;
		case '1':
			return 53;
		case '2':
			return 54;
		case '3':
			return 55;
		case '4':
			return 56;
		case '5':
			return 57;
		case '6':
			return 58;
		case '7':
			return 59;
		case '8':
			return 60;
		case '9':
			return 61;
		case '+':
			return 62;
		case '/':
			return 63;
		default:
			return 0;
	}
};
var $elm$core$Bitwise$or = _Bitwise_or;
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Char$fromCode = _Char_fromCode;
var $truqu$elm_base64$Base64$Decode$intToString = A2($elm$core$Basics$composeR, $elm$core$Char$fromCode, $elm$core$String$fromChar);
var $truqu$elm_base64$Base64$Decode$add = F2(
	function (_char, _v0) {
		var curr = _v0.a;
		var need = _v0.b;
		var res = _v0.c;
		var shiftAndAdd = function (_int) {
			return (63 & _int) | (curr << 6);
		};
		return (!need) ? ((!(128 & _char)) ? _Utils_Tuple3(
			0,
			0,
			_Utils_ap(
				res,
				$truqu$elm_base64$Base64$Decode$intToString(_char))) : (((224 & _char) === 192) ? _Utils_Tuple3(31 & _char, 1, res) : (((240 & _char) === 224) ? _Utils_Tuple3(15 & _char, 2, res) : _Utils_Tuple3(7 & _char, 3, res)))) : ((need === 1) ? _Utils_Tuple3(
			0,
			0,
			_Utils_ap(
				res,
				$truqu$elm_base64$Base64$Decode$intToString(
					shiftAndAdd(_char)))) : _Utils_Tuple3(
			shiftAndAdd(_char),
			need - 1,
			res));
	});
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $truqu$elm_base64$Base64$Decode$toUTF16 = F2(
	function (_char, acc) {
		return _Utils_Tuple3(
			0,
			0,
			A2(
				$truqu$elm_base64$Base64$Decode$add,
				255 & (_char >>> 0),
				A2(
					$truqu$elm_base64$Base64$Decode$add,
					255 & (_char >>> 8),
					A2($truqu$elm_base64$Base64$Decode$add, 255 & (_char >>> 16), acc))));
	});
var $truqu$elm_base64$Base64$Decode$chomp = F2(
	function (char_, _v0) {
		var curr = _v0.a;
		var cnt = _v0.b;
		var utf8ToUtf16 = _v0.c;
		var _char = $truqu$elm_base64$Base64$Decode$charToInt(char_);
		if (cnt === 3) {
			return A2($truqu$elm_base64$Base64$Decode$toUTF16, curr | _char, utf8ToUtf16);
		} else {
			return _Utils_Tuple3((_char << ((3 - cnt) * 6)) | curr, cnt + 1, utf8ToUtf16);
		}
	});
var $elm$core$String$foldl = _String_foldl;
var $truqu$elm_base64$Base64$Decode$initial = _Utils_Tuple3(
	0,
	0,
	_Utils_Tuple3(0, 0, ''));
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $elm$core$String$endsWith = _String_endsWith;
var $truqu$elm_base64$Base64$Decode$stripNulls = F2(
	function (input, output) {
		return A2($elm$core$String$endsWith, '==', input) ? A2($elm$core$String$dropRight, 2, output) : (A2($elm$core$String$endsWith, '=', input) ? A2($elm$core$String$dropRight, 1, output) : output);
	});
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var $elm$regex$Regex$contains = _Regex_contains;
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $truqu$elm_base64$Base64$Decode$validBase64Regex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^([A-Za-z0-9\\/+]{4})*([A-Za-z0-9\\/+]{2}[A-Za-z0-9\\/+=]{2})?$'));
var $truqu$elm_base64$Base64$Decode$validate = function (input) {
	return A2($elm$regex$Regex$contains, $truqu$elm_base64$Base64$Decode$validBase64Regex, input) ? $elm$core$Result$Ok(input) : $elm$core$Result$Err('Invalid base64');
};
var $truqu$elm_base64$Base64$Decode$wrapUp = function (_v0) {
	var _v1 = _v0.c;
	var need = _v1.b;
	var res = _v1.c;
	return (need > 0) ? $elm$core$Result$Err('Invalid UTF-16') : $elm$core$Result$Ok(res);
};
var $truqu$elm_base64$Base64$Decode$validateAndDecode = function (input) {
	return A2(
		$elm$core$Result$map,
		$truqu$elm_base64$Base64$Decode$stripNulls(input),
		A2(
			$elm$core$Result$andThen,
			A2(
				$elm$core$Basics$composeR,
				A2($elm$core$String$foldl, $truqu$elm_base64$Base64$Decode$chomp, $truqu$elm_base64$Base64$Decode$initial),
				$truqu$elm_base64$Base64$Decode$wrapUp),
			$truqu$elm_base64$Base64$Decode$validate(input)));
};
var $truqu$elm_base64$Base64$Decode$decode = A2($elm$core$Basics$composeR, $truqu$elm_base64$Base64$Decode$pad, $truqu$elm_base64$Base64$Decode$validateAndDecode);
var $truqu$elm_base64$Base64$decode = $truqu$elm_base64$Base64$Decode$decode;
var $author$project$Data$Textile$Inputs$b64decode = A2(
	$elm$core$Basics$composeR,
	$truqu$elm_base64$Base64$decode,
	$elm$core$Result$andThen(
		A2(
			$elm$core$Basics$composeR,
			$elm$json$Json$Decode$decodeString($author$project$Data$Textile$Inputs$decodeQuery),
			$elm$core$Result$mapError($elm$json$Json$Decode$errorToString))));
var $elm$core$Result$toMaybe = function (result) {
	if (result.$ === 'Ok') {
		var v = result.a;
		return $elm$core$Maybe$Just(v);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Data$Textile$Inputs$parseBase64Query = A2(
	$elm$url$Url$Parser$custom,
	'QUERY',
	A2(
		$elm$core$Basics$composeR,
		$author$project$Data$Textile$Inputs$b64decode,
		A2($elm$core$Basics$composeR, $elm$core$Result$toMaybe, $elm$core$Maybe$Just)));
var $author$project$Data$Textile$Db$Impacts = function (a) {
	return {$: 'Impacts', a: a};
};
var $author$project$Data$Textile$Db$Materials = function (a) {
	return {$: 'Materials', a: a};
};
var $author$project$Data$Textile$Db$Products = function (a) {
	return {$: 'Products', a: a};
};
var $author$project$Data$Textile$Db$datasetFromSlug = function (string) {
	switch (string) {
		case 'impacts':
			return $author$project$Data$Textile$Db$Impacts($elm$core$Maybe$Nothing);
		case 'products':
			return $author$project$Data$Textile$Db$Products($elm$core$Maybe$Nothing);
		case 'materials':
			return $author$project$Data$Textile$Db$Materials($elm$core$Maybe$Nothing);
		default:
			return $author$project$Data$Textile$Db$Countries($elm$core$Maybe$Nothing);
	}
};
var $author$project$Data$Textile$Db$parseDatasetSlug = A2(
	$elm$url$Url$Parser$custom,
	'DATASET',
	function (string) {
		return $elm$core$Maybe$Just(
			$author$project$Data$Textile$Db$datasetFromSlug(string));
	});
var $author$project$Data$Unit$PerDayOfWear = {$: 'PerDayOfWear'};
var $author$project$Data$Unit$parseFunctional = A2(
	$elm$url$Url$Parser$custom,
	'FUNCTIONAL_UNIT',
	function (string) {
		if (string === 'per-day') {
			return $elm$core$Maybe$Just($author$project$Data$Unit$PerDayOfWear);
		} else {
			return $elm$core$Maybe$Just($author$project$Data$Unit$PerItem);
		}
	});
var $author$project$Data$Impact$parseTrigram = function () {
	var trigrams = A2($elm$core$String$split, ',', 'acd,ozd,cch,ccb,ccf,ccl,fwe,swe,tre,pco,pma,ior,fru,mru,ldu,pef,wtu');
	return A2(
		$elm$url$Url$Parser$custom,
		'TRIGRAM',
		function (trigram) {
			return A2($elm$core$List$member, trigram, trigrams) ? $elm$core$Maybe$Just(
				$author$project$Data$Impact$trg(trigram)) : $elm$core$Maybe$Just($author$project$Data$Impact$defaultTrigram);
		});
}();
var $elm$url$Url$Parser$s = function (str) {
	return $elm$url$Url$Parser$Parser(
		function (_v0) {
			var visited = _v0.visited;
			var unvisited = _v0.unvisited;
			var params = _v0.params;
			var frag = _v0.frag;
			var value = _v0.value;
			if (!unvisited.b) {
				return _List_Nil;
			} else {
				var next = unvisited.a;
				var rest = unvisited.b;
				return _Utils_eq(next, str) ? _List_fromArray(
					[
						A5(
						$elm$url$Url$Parser$State,
						A2($elm$core$List$cons, next, visited),
						rest,
						params,
						frag,
						value)
					]) : _List_Nil;
			}
		});
};
var $elm$url$Url$Parser$slash = F2(
	function (_v0, _v1) {
		var parseBefore = _v0.a;
		var parseAfter = _v1.a;
		return $elm$url$Url$Parser$Parser(
			function (state) {
				return A2(
					$elm$core$List$concatMap,
					parseAfter,
					parseBefore(state));
			});
	});
var $elm$url$Url$Parser$string = A2($elm$url$Url$Parser$custom, 'STRING', $elm$core$Maybe$Just);
var $author$project$Data$Textile$Db$datasetSlugWithId = F2(
	function (dataset, idString) {
		switch (dataset.$) {
			case 'Countries':
				return $author$project$Data$Textile$Db$Countries(
					$elm$core$Maybe$Just(
						$author$project$Data$Country$codeFromString(idString)));
			case 'Impacts':
				return $author$project$Data$Textile$Db$Impacts(
					$elm$core$Maybe$Just(
						$author$project$Data$Impact$trg(idString)));
			case 'Products':
				return $author$project$Data$Textile$Db$Products(
					$elm$core$Maybe$Just(
						$author$project$Data$Textile$Product$Id(idString)));
			default:
				return $author$project$Data$Textile$Db$Materials(
					$elm$core$Maybe$Just(
						$author$project$Data$Textile$Material$Id(idString)));
		}
	});
var $author$project$Route$toExploreWithId = F2(
	function (dataset, idString) {
		return $author$project$Route$TextileExplore(
			A2($author$project$Data$Textile$Db$datasetSlugWithId, dataset, idString));
	});
var $elm$url$Url$Parser$top = $elm$url$Url$Parser$Parser(
	function (state) {
		return _List_fromArray(
			[state]);
	});
var $author$project$Route$parser = $elm$url$Url$Parser$oneOf(
	_List_fromArray(
		[
			A2($elm$url$Url$Parser$map, $author$project$Route$Home, $elm$url$Url$Parser$top),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$Api,
			$elm$url$Url$Parser$s('api')),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$Changelog,
			$elm$url$Url$Parser$s('changelog')),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$Editorial,
			A2(
				$elm$url$Url$Parser$slash,
				$elm$url$Url$Parser$s('pages'),
				$elm$url$Url$Parser$string)),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$Stats,
			$elm$url$Url$Parser$s('stats')),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$FoodSimulator,
			$elm$url$Url$Parser$s('food')),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$TextileExamples,
			A2(
				$elm$url$Url$Parser$slash,
				$elm$url$Url$Parser$s('textile'),
				$elm$url$Url$Parser$s('examples'))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$TextileExplore(
				$author$project$Data$Textile$Db$Countries($elm$core$Maybe$Nothing)),
			A2(
				$elm$url$Url$Parser$slash,
				$elm$url$Url$Parser$s('textile'),
				$elm$url$Url$Parser$s('explore'))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$TextileExplore,
			A2(
				$elm$url$Url$Parser$slash,
				$elm$url$Url$Parser$s('textile'),
				A2(
					$elm$url$Url$Parser$slash,
					$elm$url$Url$Parser$s('explore'),
					$author$project$Data$Textile$Db$parseDatasetSlug))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$toExploreWithId,
			A2(
				$elm$url$Url$Parser$slash,
				$elm$url$Url$Parser$s('textile'),
				A2(
					$elm$url$Url$Parser$slash,
					$elm$url$Url$Parser$s('explore'),
					A2($elm$url$Url$Parser$slash, $author$project$Data$Textile$Db$parseDatasetSlug, $elm$url$Url$Parser$string)))),
			A2(
			$elm$url$Url$Parser$map,
			A4($author$project$Route$TextileSimulator, $author$project$Data$Impact$defaultTrigram, $author$project$Data$Unit$PerItem, $author$project$Page$Textile$Simulator$ViewMode$Simple, $elm$core$Maybe$Nothing),
			A2(
				$elm$url$Url$Parser$slash,
				$elm$url$Url$Parser$s('textile'),
				$elm$url$Url$Parser$s('simulator'))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$TextileSimulator,
			A2(
				$elm$url$Url$Parser$slash,
				$elm$url$Url$Parser$s('textile'),
				A2(
					$elm$url$Url$Parser$slash,
					$elm$url$Url$Parser$s('simulator'),
					A2(
						$elm$url$Url$Parser$slash,
						$author$project$Data$Impact$parseTrigram,
						A2(
							$elm$url$Url$Parser$slash,
							$author$project$Data$Unit$parseFunctional,
							A2($elm$url$Url$Parser$slash, $author$project$Page$Textile$Simulator$ViewMode$parse, $author$project$Data$Textile$Inputs$parseBase64Query))))))
		]));
var $author$project$Route$fromUrl = function (url) {
	var protocol = _Utils_eq(url.protocol, $elm$url$Url$Https) ? 'https' : 'http';
	var port_ = function () {
		var _v0 = url.port_;
		if (_v0.$ === 'Just') {
			var p = _v0.a;
			return ':' + $elm$core$String$fromInt(p);
		} else {
			return '';
		}
	}();
	var path = A2($elm$core$Maybe$withDefault, '/', url.fragment);
	return A2(
		$elm$url$Url$Parser$parse,
		$author$project$Route$parser,
		A2(
			$elm$core$Maybe$withDefault,
			url,
			$elm$url$Url$fromString(protocol + ('://' + (url.host + (port_ + path))))));
};
var $elm$browser$Browser$Navigation$load = _Browser_load;
var $elm$core$Platform$Cmd$map = _Platform_map;
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $author$project$Data$Session$HttpError = function (a) {
	return {$: 'HttpError', a: a};
};
var $author$project$Data$Session$notifyHttpError = F2(
	function (error, session) {
		var notifications = session.notifications;
		return _Utils_update(
			session,
			{
				notifications: _Utils_ap(
					notifications,
					_List_fromArray(
						[
							$author$project$Data$Session$HttpError(error)
						]))
			});
	});
var $elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;
var $elm$browser$Browser$Navigation$reloadAndSkipCache = _Browser_reload(true);
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$Ports$saveStore = _Platform_outgoingPort('saveStore', $elm$json$Json$Encode$string);
var $elm$json$Json$Encode$bool = _Json_wrap;
var $author$project$Data$Textile$Step$Label$toCodeString = function (label) {
	switch (label.$) {
		case 'Material':
			return 'material';
		case 'Spinning':
			return 'spinning';
		case 'Fabric':
			return 'fabric';
		case 'Making':
			return 'making';
		case 'Dyeing':
			return 'dyeing';
		case 'Distribution':
			return 'distribution';
		case 'Use':
			return 'use';
		default:
			return 'eol';
	}
};
var $author$project$Data$Textile$Step$Label$encode = A2($elm$core$Basics$composeR, $author$project$Data$Textile$Step$Label$toCodeString, $elm$json$Json$Encode$string);
var $author$project$Data$Country$encodeCode = A2($elm$core$Basics$composeR, $author$project$Data$Country$codeToString, $elm$json$Json$Encode$string);
var $author$project$Data$Textile$Material$idToString = function (_v0) {
	var string = _v0.a;
	return string;
};
var $author$project$Data$Textile$Material$encodeId = A2($elm$core$Basics$composeR, $author$project$Data$Textile$Material$idToString, $elm$json$Json$Encode$string);
var $elm$json$Json$Encode$float = _Json_wrap;
var $author$project$Data$Unit$encodeRatio = function (_v0) {
	var _float = _v0.a;
	return $elm$json$Json$Encode$float(_float);
};
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $author$project$Data$Textile$Inputs$encodeMaterialQuery = function (v) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'id',
				$author$project$Data$Textile$Material$encodeId(v.id)),
				_Utils_Tuple2(
				'share',
				$author$project$Data$Unit$encodeRatio(v.share))
			]));
};
var $elm$json$Json$Encode$int = _Json_wrap;
var $author$project$Data$Unit$encodePickPerMeter = function (_v0) {
	var _int = _v0.a;
	return $elm$json$Json$Encode$int(_int);
};
var $author$project$Data$Unit$encodeQuality = function (_v0) {
	var _float = _v0.a;
	return $elm$json$Json$Encode$float(_float);
};
var $author$project$Data$Unit$encodeReparability = function (_v0) {
	var _float = _v0.a;
	return $elm$json$Json$Encode$float(_float);
};
var $author$project$Data$Unit$encodeSurfaceMass = function (_v0) {
	var _int = _v0.a;
	return $elm$json$Json$Encode$int(_int);
};
var $author$project$Data$Textile$Product$idToString = function (_v0) {
	var string = _v0.a;
	return string;
};
var $ianmackenzie$elm_units$Mass$inKilograms = function (_v0) {
	var numKilograms = _v0.a;
	return numKilograms;
};
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $author$project$Data$Textile$Inputs$encodeQuery = function (query) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'mass',
				$elm$json$Json$Encode$float(
					$ianmackenzie$elm_units$Mass$inKilograms(query.mass))),
				_Utils_Tuple2(
				'materials',
				A2($elm$json$Json$Encode$list, $author$project$Data$Textile$Inputs$encodeMaterialQuery, query.materials)),
				_Utils_Tuple2(
				'product',
				$elm$json$Json$Encode$string(
					$author$project$Data$Textile$Product$idToString(query.product))),
				_Utils_Tuple2(
				'countrySpinning',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $author$project$Data$Country$encodeCode, query.countrySpinning))),
				_Utils_Tuple2(
				'countryFabric',
				$author$project$Data$Country$encodeCode(query.countryFabric)),
				_Utils_Tuple2(
				'countryDyeing',
				$author$project$Data$Country$encodeCode(query.countryDyeing)),
				_Utils_Tuple2(
				'countryMaking',
				$author$project$Data$Country$encodeCode(query.countryMaking)),
				_Utils_Tuple2(
				'dyeingWeighting',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $author$project$Data$Unit$encodeRatio, query.dyeingWeighting))),
				_Utils_Tuple2(
				'airTransportRatio',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $author$project$Data$Unit$encodeRatio, query.airTransportRatio))),
				_Utils_Tuple2(
				'quality',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $author$project$Data$Unit$encodeQuality, query.quality))),
				_Utils_Tuple2(
				'reparability',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $author$project$Data$Unit$encodeReparability, query.reparability))),
				_Utils_Tuple2(
				'makingWaste',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $author$project$Data$Unit$encodeRatio, query.makingWaste))),
				_Utils_Tuple2(
				'picking',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $author$project$Data$Unit$encodePickPerMeter, query.picking))),
				_Utils_Tuple2(
				'surfaceMass',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $author$project$Data$Unit$encodeSurfaceMass, query.surfaceMass))),
				_Utils_Tuple2(
				'disabledSteps',
				A2($elm$json$Json$Encode$list, $author$project$Data$Textile$Step$Label$encode, query.disabledSteps)),
				_Utils_Tuple2(
				'disabledFading',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $elm$json$Json$Encode$bool, query.disabledFading)))
			]));
};
var $author$project$Data$Session$encodeSavedSimulation = function (_v0) {
	var name = _v0.name;
	var query = _v0.query;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(name)),
				_Utils_Tuple2(
				'query',
				$author$project$Data$Textile$Inputs$encodeQuery(query))
			]));
};
var $author$project$Data$Session$encodeStore = function (store) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'savedSimulations',
				A2($elm$json$Json$Encode$list, $author$project$Data$Session$encodeSavedSimulation, store.savedSimulations)),
				_Utils_Tuple2(
				'comparedSimulations',
				A2(
					$elm$json$Json$Encode$list,
					$elm$json$Json$Encode$string,
					$elm$core$Set$toList(store.comparedSimulations)))
			]));
};
var $author$project$Data$Session$serializeStore = A2(
	$elm$core$Basics$composeR,
	$author$project$Data$Session$encodeStore,
	$elm$json$Json$Encode$encode(0));
var $author$project$Ports$scrollTo = _Platform_outgoingPort(
	'scrollTo',
	function ($) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'x',
					$elm$json$Json$Encode$float($.x)),
					_Utils_Tuple2(
					'y',
					$elm$json$Json$Encode$float($.y))
				]));
	});
var $author$project$Page$Api$init = function (session) {
	return _Utils_Tuple3(
		_Utils_Tuple0,
		session,
		$author$project$Ports$scrollTo(
			{x: 0, y: 0}));
};
var $author$project$Page$Changelog$ChangelogReceived = function (a) {
	return {$: 'ChangelogReceived', a: a};
};
var $author$project$Page$Changelog$NewTime = function (a) {
	return {$: 'NewTime', a: a};
};
var $author$project$Request$Github$config = _Utils_update(
	$ohanhi$remotedata_http$RemoteData$Http$defaultConfig,
	{headers: _List_Nil});
var $author$project$Data$Github$Commit = F6(
	function (sha, message, date, authorName, authorLogin, authorAvatar) {
		return {authorAvatar: authorAvatar, authorLogin: authorLogin, authorName: authorName, date: date, message: message, sha: sha};
	});
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $rtfeldman$elm_iso8601_date_strings$DeadEnds$problemToString = function (p) {
	switch (p.$) {
		case 'Expecting':
			var s = p.a;
			return 'expecting \'' + (s + '\'');
		case 'ExpectingInt':
			return 'expecting int';
		case 'ExpectingHex':
			return 'expecting hex';
		case 'ExpectingOctal':
			return 'expecting octal';
		case 'ExpectingBinary':
			return 'expecting binary';
		case 'ExpectingFloat':
			return 'expecting float';
		case 'ExpectingNumber':
			return 'expecting number';
		case 'ExpectingVariable':
			return 'expecting variable';
		case 'ExpectingSymbol':
			var s = p.a;
			return 'expecting symbol \'' + (s + '\'');
		case 'ExpectingKeyword':
			var s = p.a;
			return 'expecting keyword \'' + (s + '\'');
		case 'ExpectingEnd':
			return 'expecting end';
		case 'UnexpectedChar':
			return 'unexpected char';
		case 'Problem':
			var s = p.a;
			return 'problem ' + s;
		default:
			return 'bad repeat';
	}
};
var $rtfeldman$elm_iso8601_date_strings$DeadEnds$deadEndToString = function (deadend) {
	return $rtfeldman$elm_iso8601_date_strings$DeadEnds$problemToString(deadend.problem) + (' at row ' + ($elm$core$String$fromInt(deadend.row) + (', col ' + $elm$core$String$fromInt(deadend.col))));
};
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $rtfeldman$elm_iso8601_date_strings$DeadEnds$deadEndsToString = function (deadEnds) {
	return $elm$core$String$concat(
		A2(
			$elm$core$List$intersperse,
			'; ',
			A2($elm$core$List$map, $rtfeldman$elm_iso8601_date_strings$DeadEnds$deadEndToString, deadEnds)));
};
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 'Bad', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 'Good', a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parseA(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					var _v2 = callback(a);
					var parseB = _v2.a;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
					}
				}
			});
	});
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $elm$parser$Parser$ExpectingEnd = {$: 'ExpectingEnd'};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 'AddRight', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {col: col, contextStack: contextStack, problem: problem, row: row};
	});
var $elm$parser$Parser$Advanced$Empty = {$: 'Empty'};
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));
	});
var $elm$parser$Parser$Advanced$end = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return _Utils_eq(
				$elm$core$String$length(s.src),
				s.offset) ? A3($elm$parser$Parser$Advanced$Good, false, _Utils_Tuple0, s) : A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.offset, offset) < 0,
					_Utils_Tuple0,
					{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);
		});
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						A2(
							func,
							A3($elm$core$String$slice, s0.offset, s1.offset, s0.src),
							a),
						s1);
				}
			});
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $elm$parser$Parser$Problem = function (a) {
	return {$: 'Problem', a: a};
};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $elm$core$Basics$round = _Basics_round;
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$Good, false, a, s);
		});
};
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $elm$core$String$toFloat = _String_toFloat;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$fractionsOfASecondInMs = A2(
	$elm$parser$Parser$andThen,
	function (str) {
		if ($elm$core$String$length(str) <= 9) {
			var _v0 = $elm$core$String$toFloat('0.' + str);
			if (_v0.$ === 'Just') {
				var floatVal = _v0.a;
				return $elm$parser$Parser$succeed(
					$elm$core$Basics$round(floatVal * 1000));
			} else {
				return $elm$parser$Parser$problem('Invalid float: \"' + (str + '\"'));
			}
		} else {
			return $elm$parser$Parser$problem(
				'Expected at most 9 digits, but got ' + $elm$core$String$fromInt(
					$elm$core$String$length(str)));
		}
	},
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$chompWhile($elm$core$Char$isDigit)));
var $rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts = F6(
	function (monthYearDayMs, hour, minute, second, ms, utcOffsetMinutes) {
		return $elm$time$Time$millisToPosix((((monthYearDayMs + (((hour * 60) * 60) * 1000)) + (((minute - utcOffsetMinutes) * 60) * 1000)) + (second * 1000)) + ms);
	});
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var p = _v2.a;
					var x = _v2.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v2.a;
					var a = _v2.b;
					var s1 = _v2.c;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3(
							$elm$parser$Parser$Advanced$Good,
							p1 || p2,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 'Append', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
		});
};
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $elm$parser$Parser$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$core$String$append = _String_append;
var $elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.offset, s.src);
				return _Utils_eq(newOffset, -1) ? A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: 1, context: s.context, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src}) : A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: s.col + 1, context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src}));
			});
	});
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0.a;
			var _v1 = parse(s0);
			if (_v1.$ === 'Good') {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (step.$ === 'Loop') {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
			});
	});
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						func(a),
						s1);
				} else {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				}
			});
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (step.$ === 'Loop') {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt = function (quantity) {
	var helper = function (str) {
		if (_Utils_eq(
			$elm$core$String$length(str),
			quantity)) {
			var _v0 = $elm$core$String$toInt(str);
			if (_v0.$ === 'Just') {
				var intVal = _v0.a;
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$Done,
					$elm$parser$Parser$succeed(intVal));
			} else {
				return $elm$parser$Parser$problem('Invalid integer: \"' + (str + '\"'));
			}
		} else {
			return A2(
				$elm$parser$Parser$map,
				function (nextChar) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$String$append, str, nextChar));
				},
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$chompIf($elm$core$Char$isDigit)));
		}
	};
	return A2($elm$parser$Parser$loop, '', helper);
};
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 'ExpectingSymbol', a: a};
};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 'Token', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$core$Basics$not = _Basics_not;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear = 1970;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay = function (day) {
	return $elm$parser$Parser$problem(
		'Invalid day: ' + $elm$core$String$fromInt(day));
};
var $elm$core$Basics$modBy = _Basics_modBy;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear = function (year) {
	return (!A2($elm$core$Basics$modBy, 4, year)) && ((!(!A2($elm$core$Basics$modBy, 100, year))) || (!A2($elm$core$Basics$modBy, 400, year)));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore = function (y1) {
	var y = y1 - 1;
	return (((y / 4) | 0) - ((y / 100) | 0)) + ((y / 400) | 0);
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerDay = 86400000;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerYear = 31536000000;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$yearMonthDay = function (_v0) {
	var year = _v0.a;
	var month = _v0.b;
	var dayInMonth = _v0.c;
	if (dayInMonth < 0) {
		return $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth);
	} else {
		var succeedWith = function (extraMs) {
			var yearMs = $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerYear * (year - $rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear);
			var days = ((month < 3) || (!$rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear(year))) ? (dayInMonth - 1) : dayInMonth;
			var dayMs = $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerDay * (days + ($rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore(year) - $rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore($rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear)));
			return $elm$parser$Parser$succeed((extraMs + yearMs) + dayMs);
		};
		switch (month) {
			case 1:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(0);
			case 2:
				return ((dayInMonth > 29) || ((dayInMonth === 29) && (!$rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear(year)))) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(2678400000);
			case 3:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(5097600000);
			case 4:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(7776000000);
			case 5:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(10368000000);
			case 6:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(13046400000);
			case 7:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(15638400000);
			case 8:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(18316800000);
			case 9:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(20995200000);
			case 10:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(23587200000);
			case 11:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(26265600000);
			case 12:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(28857600000);
			default:
				return $elm$parser$Parser$problem(
					'Invalid month: \"' + ($elm$core$String$fromInt(month) + '\"'));
		}
	}
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$monthYearDayInMs = A2(
	$elm$parser$Parser$andThen,
	$rtfeldman$elm_iso8601_date_strings$Iso8601$yearMonthDay,
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				$elm$parser$Parser$succeed(
					F3(
						function (year, month, day) {
							return _Utils_Tuple3(year, month, day);
						})),
				$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(4)),
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed($elm$core$Basics$identity),
							$elm$parser$Parser$symbol('-')),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
					]))),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed($elm$core$Basics$identity),
						$elm$parser$Parser$symbol('-')),
					$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
					$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
				]))));
var $rtfeldman$elm_iso8601_date_strings$Iso8601$utcOffsetInMinutes = function () {
	var utcOffsetMinutesFromParts = F3(
		function (multiplier, hours, minutes) {
			return (multiplier * (hours * 60)) + minutes;
		});
	return A2(
		$elm$parser$Parser$keeper,
		$elm$parser$Parser$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return 0;
					},
					$elm$parser$Parser$symbol('Z')),
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							$elm$parser$Parser$succeed(utcOffsetMinutesFromParts),
							$elm$parser$Parser$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$map,
										function (_v1) {
											return 1;
										},
										$elm$parser$Parser$symbol('+')),
										A2(
										$elm$parser$Parser$map,
										function (_v2) {
											return -1;
										},
										$elm$parser$Parser$symbol('-'))
									]))),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$parser$Parser$keeper,
								A2(
									$elm$parser$Parser$ignorer,
									$elm$parser$Parser$succeed($elm$core$Basics$identity),
									$elm$parser$Parser$symbol(':')),
								$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
								$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2),
								$elm$parser$Parser$succeed(0)
							]))),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(0),
					$elm$parser$Parser$end)
				])));
}();
var $rtfeldman$elm_iso8601_date_strings$Iso8601$iso8601 = A2(
	$elm$parser$Parser$andThen,
	function (datePart) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							A2(
								$elm$parser$Parser$keeper,
								A2(
									$elm$parser$Parser$keeper,
									A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed(
											$rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts(datePart)),
										$elm$parser$Parser$symbol('T')),
									$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
								$elm$parser$Parser$oneOf(
									_List_fromArray(
										[
											A2(
											$elm$parser$Parser$keeper,
											A2(
												$elm$parser$Parser$ignorer,
												$elm$parser$Parser$succeed($elm$core$Basics$identity),
												$elm$parser$Parser$symbol(':')),
											$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
											$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
										]))),
							$elm$parser$Parser$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$keeper,
										A2(
											$elm$parser$Parser$ignorer,
											$elm$parser$Parser$succeed($elm$core$Basics$identity),
											$elm$parser$Parser$symbol(':')),
										$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
										$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2),
										$elm$parser$Parser$succeed(0)
									]))),
						$elm$parser$Parser$oneOf(
							_List_fromArray(
								[
									A2(
									$elm$parser$Parser$keeper,
									A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed($elm$core$Basics$identity),
										$elm$parser$Parser$symbol('.')),
									$rtfeldman$elm_iso8601_date_strings$Iso8601$fractionsOfASecondInMs),
									$elm$parser$Parser$succeed(0)
								]))),
					A2($elm$parser$Parser$ignorer, $rtfeldman$elm_iso8601_date_strings$Iso8601$utcOffsetInMinutes, $elm$parser$Parser$end)),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A6($rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts, datePart, 0, 0, 0, 0, 0)),
					$elm$parser$Parser$end)
				]));
	},
	$rtfeldman$elm_iso8601_date_strings$Iso8601$monthYearDayInMs);
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {col: col, problem: problem, row: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);
};
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 'Empty':
					return list;
				case 'AddRight':
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0.a;
		var _v1 = parse(
			{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});
		if (_v1.$ === 'Good') {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (_v0.$ === 'Ok') {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime = function (str) {
	return A2($elm$parser$Parser$run, $rtfeldman$elm_iso8601_date_strings$Iso8601$iso8601, str);
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$decoder = A2(
	$elm$json$Json$Decode$andThen,
	function (str) {
		var _v0 = $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(str);
		if (_v0.$ === 'Err') {
			var deadEnds = _v0.a;
			return $elm$json$Json$Decode$fail(
				$rtfeldman$elm_iso8601_date_strings$DeadEnds$deadEndsToString(deadEnds));
		} else {
			var time = _v0.a;
			return $elm$json$Json$Decode$succeed(time);
		}
	},
	$elm$json$Json$Decode$string);
var $author$project$Data$Github$decodeCommit = A7(
	$elm$json$Json$Decode$map6,
	$author$project$Data$Github$Commit,
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['sha']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['commit', 'message']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['commit', 'author', 'date']),
		$rtfeldman$elm_iso8601_date_strings$Iso8601$decoder),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['commit', 'author', 'name']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['author', 'login']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['author', 'avatar_url']),
		$elm$json$Json$Decode$string));
var $author$project$Data$Env$githubRepository = 'MTES-MCT/ecobalyse';
var $author$project$Request$Github$getChangelog = F2(
	function (_v0, event) {
		return A4(
			$ohanhi$remotedata_http$RemoteData$Http$getWithConfig,
			$author$project$Request$Github$config,
			'https://api.github.com/repos/' + ($author$project$Data$Env$githubRepository + '/commits'),
			event,
			$elm$json$Json$Decode$list($author$project$Data$Github$decodeCommit));
	});
var $author$project$Page$Changelog$init = function (session) {
	return _Utils_Tuple3(
		{
			changelog: $krisajenkins$remotedata$RemoteData$NotAsked,
			time: $elm$time$Time$millisToPosix(0)
		},
		session,
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$Ports$scrollTo(
					{x: 0, y: 0}),
					A2($author$project$Request$Github$getChangelog, session, $author$project$Page$Changelog$ChangelogReceived),
					A2($elm$core$Task$perform, $author$project$Page$Changelog$NewTime, $elm$time$Time$now)
				])));
};
var $author$project$Page$Editorial$ContentReceived = function (a) {
	return {$: 'ContentReceived', a: a};
};
var $elm$http$Http$expectString = function (toMsg) {
	return A2(
		$elm$http$Http$expectStringResponse,
		toMsg,
		$elm$http$Http$resolve($elm$core$Result$Ok));
};
var $elm$http$Http$get = function (r) {
	return $elm$http$Http$request(
		{body: $elm$http$Http$emptyBody, expect: r.expect, headers: _List_Nil, method: 'GET', timeout: $elm$core$Maybe$Nothing, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $author$project$Page$Editorial$init = F2(
	function (slug, session) {
		return _Utils_Tuple3(
			{content: $krisajenkins$remotedata$RemoteData$Loading, slug: slug},
			session,
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						$author$project$Ports$scrollTo(
						{x: 0, y: 0}),
						$elm$http$Http$get(
						{
							expect: $elm$http$Http$expectString(
								A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$Editorial$ContentReceived)),
							url: 'pages/' + (slug + '.md')
						})
					])));
	});
var $author$project$Page$Food$Simulator$DbLoaded = function (a) {
	return {$: 'DbLoaded', a: a};
};
var $author$project$Data$Food$Product$defaultCountry = $author$project$Data$Country$codeFromString('FR');
var $author$project$Data$Food$Product$ProcessName = function (a) {
	return {$: 'ProcessName', a: a};
};
var $author$project$Data$Food$Product$Process = function (name) {
	return function (impacts) {
		return function (ciqualCode) {
			return function (step) {
				return function (dqr) {
					return function (emptyProcess) {
						return function (unit) {
							return function (code) {
								return function (simaproCategory) {
									return function (systemDescription) {
										return function (categoryTags) {
											return {categoryTags: categoryTags, ciqualCode: ciqualCode, code: code, dqr: dqr, emptyProcess: emptyProcess, impacts: impacts, name: name, simaproCategory: simaproCategory, step: step, systemDescription: systemDescription, unit: unit};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Data$Food$Product$formatStringUnit = function (str) {
	switch (str) {
		case 'cubic meter':
			return 'm³';
		case 'kilogram':
			return 'kg';
		case 'kilometer':
			return 'km';
		case 'kilowatt hour':
			return 'kWh';
		case 'litre':
			return 'l';
		case 'megajoule':
			return 'MJ';
		case 'ton kilometer':
			return 't/km';
		default:
			return str;
	}
};
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded = A2($elm$core$Basics$composeR, $elm$json$Json$Decode$succeed, $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom);
var $elm$json$Json$Decode$nullable = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)
			]));
};
var $author$project$Data$Food$Product$stringToProcessName = $author$project$Data$Food$Product$ProcessName;
var $author$project$Data$Food$Product$decodeProcess = function (definitions) {
	return A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'category_tags',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'system_description',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'simapro_category',
				$elm$json$Json$Decode$string,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'code',
					$elm$json$Json$Decode$string,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'unit',
						A2($elm$json$Json$Decode$map, $author$project$Data$Food$Product$formatStringUnit, $elm$json$Json$Decode$string),
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'empty_process',
							$elm$json$Json$Decode$bool,
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'dqr',
								$elm$json$Json$Decode$nullable($elm$json$Json$Decode$float),
								A3(
									$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
									'step',
									$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
									A3(
										$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
										'ciqual_code',
										$elm$json$Json$Decode$nullable($elm$json$Json$Decode$int),
										A3(
											$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
											'impacts',
											$author$project$Data$Impact$decodeImpacts(definitions),
											A2(
												$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded,
												$author$project$Data$Food$Product$stringToProcessName('to be defined'),
												$elm$json$Json$Decode$succeed($author$project$Data$Food$Product$Process))))))))))));
};
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $turboMaCk$any_dict$Dict$Any$map = F2(
	function (f, _v0) {
		var dict = _v0.a.dict;
		var toKey = _v0.a.toKey;
		return $turboMaCk$any_dict$Dict$Any$AnyDict(
			{
				dict: A2(
					$elm$core$Dict$map,
					F2(
						function (_v1, _v2) {
							var k = _v2.a;
							var v = _v2.b;
							return _Utils_Tuple2(
								k,
								A2(f, k, v));
						}),
					dict),
				toKey: toKey
			});
	});
var $author$project$Data$Food$Product$decodeProcesses = function (definitions) {
	return A2(
		$elm$json$Json$Decode$map,
		$turboMaCk$any_dict$Dict$Any$map(
			F2(
				function (processName, process) {
					return _Utils_update(
						process,
						{name: processName});
				})),
		A3(
			$turboMaCk$any_dict$Dict$Any$decode,
			F2(
				function (str, _v0) {
					return $author$project$Data$Food$Product$ProcessName(str);
				}),
			$author$project$Data$Food$Product$processNameToString,
			$author$project$Data$Food$Product$decodeProcess(definitions)));
};
var $author$project$Request$Food$Db$taskConfig = _Utils_update(
	$ohanhi$remotedata_http$RemoteData$Http$defaultTaskConfig,
	{headers: _List_Nil});
var $author$project$Request$Food$Db$getJson = F2(
	function (decoder, file) {
		return A3($ohanhi$remotedata_http$RemoteData$Http$getTaskWithConfig, $author$project$Request$Food$Db$taskConfig, 'data/' + file, decoder);
	});
var $author$project$Data$Food$Product$ProductName = function (a) {
	return {$: 'ProductName', a: a};
};
var $author$project$Data$Food$Product$Product = F5(
	function (consumer, supermarket, distribution, packaging, plant) {
		return {consumer: consumer, distribution: distribution, packaging: packaging, plant: plant, supermarket: supermarket};
	});
var $author$project$Data$Food$Product$Step = F5(
	function (material, transport, wasteTreatment, energy, processing) {
		return {energy: energy, material: material, processing: processing, transport: transport, wasteTreatment: wasteTreatment};
	});
var $author$project$Data$Food$Product$Item = F4(
	function (amount, comment, process, mainItem) {
		return {amount: amount, comment: comment, mainItem: mainItem, process: process};
	});
var $author$project$Data$Food$Product$decodeAmount = $elm$json$Json$Decode$float;
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $turboMaCk$any_dict$Dict$Any$get = F2(
	function (k, _v0) {
		var dict = _v0.a.dict;
		var toKey = _v0.a.toKey;
		return A2(
			$elm$core$Maybe$map,
			$elm$core$Tuple$second,
			A2(
				$elm$core$Dict$get,
				toKey(k),
				dict));
	});
var $author$project$Data$Food$Product$findProcessByName = function (procName) {
	var name = procName.a;
	return A2(
		$elm$core$Basics$composeR,
		$turboMaCk$any_dict$Dict$Any$get(procName),
		$elm$core$Result$fromMaybe('Procédé introuvable par nom : ' + name));
};
var $author$project$Data$Food$Product$linkProcess = function (processes) {
	return A2(
		$elm$json$Json$Decode$andThen,
		function (name) {
			return $elm_community$json_extra$Json$Decode$Extra$fromResult(
				function (processName) {
					return A2($author$project$Data$Food$Product$findProcessByName, processName, processes);
				}(
					$author$project$Data$Food$Product$stringToProcessName(name)));
		},
		$elm$json$Json$Decode$string);
};
var $author$project$Data$Food$Product$decodeItem = function (processes) {
	return A4(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
		'mainProcess',
		$elm$json$Json$Decode$bool,
		false,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'processName',
			$author$project$Data$Food$Product$linkProcess(processes),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'comment',
				$elm$json$Json$Decode$string,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'amount',
					$author$project$Data$Food$Product$decodeAmount,
					$elm$json$Json$Decode$succeed($author$project$Data$Food$Product$Item)))));
};
var $author$project$Data$Food$Product$decodeAffectation = function (processes) {
	return $elm$json$Json$Decode$list(
		$author$project$Data$Food$Product$decodeItem(processes));
};
var $author$project$Data$Food$Product$emptyItems = _List_Nil;
var $author$project$Data$Food$Product$decodeStep = function (processes) {
	return A4(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
		'processing',
		$author$project$Data$Food$Product$decodeAffectation(processes),
		$author$project$Data$Food$Product$emptyItems,
		A4(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
			'energy',
			$author$project$Data$Food$Product$decodeAffectation(processes),
			$author$project$Data$Food$Product$emptyItems,
			A4(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
				'waste treatment',
				$author$project$Data$Food$Product$decodeAffectation(processes),
				$author$project$Data$Food$Product$emptyItems,
				A4(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
					'transport',
					$author$project$Data$Food$Product$decodeAffectation(processes),
					$author$project$Data$Food$Product$emptyItems,
					A4(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
						'material',
						$author$project$Data$Food$Product$decodeAffectation(processes),
						$author$project$Data$Food$Product$emptyItems,
						$elm$json$Json$Decode$succeed($author$project$Data$Food$Product$Step))))));
};
var $author$project$Data$Food$Product$decodeProduct = function (processes) {
	return A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'plant',
		$author$project$Data$Food$Product$decodeStep(processes),
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'packaging',
			$author$project$Data$Food$Product$decodeStep(processes),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'distribution',
				$author$project$Data$Food$Product$decodeStep(processes),
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'supermarket',
					$author$project$Data$Food$Product$decodeStep(processes),
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'consumer',
						$author$project$Data$Food$Product$decodeStep(processes),
						$elm$json$Json$Decode$succeed($author$project$Data$Food$Product$Product))))));
};
var $author$project$Data$Food$Product$decodeProducts = function (processes) {
	return A3(
		$turboMaCk$any_dict$Dict$Any$decode,
		F2(
			function (str, _v0) {
				return $author$project$Data$Food$Product$ProductName(str);
			}),
		$author$project$Data$Food$Product$productNameToString,
		$author$project$Data$Food$Product$decodeProduct(processes));
};
var $author$project$Data$Food$Db$Db = F3(
	function (impacts, processes, products) {
		return {impacts: impacts, processes: processes, products: products};
	});
var $author$project$Request$Food$Db$handleProductsLoaded = F3(
	function (impacts, processes, productsData) {
		switch (productsData.$) {
			case 'Success':
				var products = productsData.a;
				return $elm$core$Task$succeed(
					$krisajenkins$remotedata$RemoteData$succeed(
						A3($author$project$Data$Food$Db$Db, impacts, processes, products)));
			case 'Failure':
				var error = productsData.a;
				return $elm$core$Task$succeed(
					$krisajenkins$remotedata$RemoteData$Failure(error));
			case 'NotAsked':
				return $elm$core$Task$succeed($krisajenkins$remotedata$RemoteData$NotAsked);
			default:
				return $elm$core$Task$succeed($krisajenkins$remotedata$RemoteData$Loading);
		}
	});
var $author$project$Request$Food$Db$handleProcessesLoaded = F2(
	function (impacts, processesData) {
		switch (processesData.$) {
			case 'Success':
				var processes = processesData.a;
				return A2(
					$elm$core$Task$andThen,
					A2($author$project$Request$Food$Db$handleProductsLoaded, impacts, processes),
					A2(
						$author$project$Request$Food$Db$getJson,
						$author$project$Data$Food$Product$decodeProducts(processes),
						'food/products.json'));
			case 'Failure':
				var error = processesData.a;
				return $elm$core$Task$succeed(
					$krisajenkins$remotedata$RemoteData$Failure(error));
			case 'NotAsked':
				return $elm$core$Task$succeed($krisajenkins$remotedata$RemoteData$NotAsked);
			default:
				return $elm$core$Task$succeed($krisajenkins$remotedata$RemoteData$Loading);
		}
	});
var $author$project$Request$Food$Db$loadDb = F2(
	function (_v0, event) {
		var db = _v0.db;
		return A2(
			$elm$core$Task$attempt,
			function (result) {
				if (result.$ === 'Ok') {
					var wd = result.a;
					return event(wd);
				} else {
					return event($krisajenkins$remotedata$RemoteData$NotAsked);
				}
			},
			A2(
				$elm$core$Task$andThen,
				$author$project$Request$Food$Db$handleProcessesLoaded(db.impacts),
				A2(
					$author$project$Request$Food$Db$getJson,
					$author$project$Data$Food$Product$decodeProcesses(db.impacts),
					'food/processes.json')));
	});
var $author$project$Data$Food$Product$stringToProductName = function (str) {
	return $author$project$Data$Food$Product$ProductName(str);
};
var $author$project$Page$Food$Simulator$tunaPizza = $author$project$Data$Food$Product$stringToProductName('Pizza, tuna, processed in FR | Chilled | Cardboard | Oven | at consumer/FR [Ciqual code: 26270]');
var $author$project$Page$Food$Simulator$init = function (session) {
	return _Utils_Tuple3(
		{currentProductInfo: $elm$core$Maybe$Nothing, impact: $author$project$Data$Impact$defaultTrigram, selectedCountry: $author$project$Data$Food$Product$defaultCountry, selectedItem: $elm$core$Maybe$Nothing, selectedProduct: $author$project$Page$Food$Simulator$tunaPizza},
		session,
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$Ports$scrollTo(
					{x: 0, y: 0}),
					A2($author$project$Request$Food$Db$loadDb, session, $author$project$Page$Food$Simulator$DbLoaded)
				])));
};
var $author$project$Page$Home$GitbookContentReceived = function (a) {
	return {$: 'GitbookContentReceived', a: a};
};
var $author$project$Data$Gitbook$Home = {$: 'Home'};
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $author$project$Data$Gitbook$transformMarkdown = A2(
	$elm$core$Basics$composeR,
	A2($elm$core$String$replace, '$$', '```'),
	A2(
		$elm$core$Basics$composeR,
		A2($elm$core$String$replace, '{% hint style=\"danger\" %}', '<hint level=\"danger\">'),
		A2(
			$elm$core$Basics$composeR,
			A2($elm$core$String$replace, '{% hint style=\"warning\" %}', '<hint level=\"warning\">'),
			A2(
				$elm$core$Basics$composeR,
				A2($elm$core$String$replace, '{% hint style=\"info\" %}', '<hint level=\"info\">'),
				A2(
					$elm$core$Basics$composeR,
					A2($elm$core$String$replace, '{% endhint %}', '</hint>'),
					A2(
						$elm$core$Basics$composeR,
						A2($elm$core$String$replace, '-->', '→'),
						A2(
							$elm$core$Basics$composeR,
							A2($elm$core$String$replace, ' & ', ' &amp; '),
							A2($elm$core$String$replace, '\\_', '_'))))))));
var $elm$core$String$trim = _String_trim;
var $author$project$Data$Gitbook$fromMarkdown = F2(
	function (path, markdown) {
		var blocks = A2(
			$elm$core$String$split,
			'\n\n',
			$author$project$Data$Gitbook$transformMarkdown(markdown));
		var description = A2(
			$elm$core$Maybe$map,
			A2(
				$elm$core$Basics$composeR,
				A2($elm$core$String$replace, '---', ''),
				A2(
					$elm$core$Basics$composeR,
					A2($elm$core$String$replace, '\n', ''),
					A2(
						$elm$core$Basics$composeR,
						A2($elm$core$String$replace, 'description:', ''),
						A2(
							$elm$core$Basics$composeR,
							A2($elm$core$String$replace, '>-', ''),
							$elm$core$String$trim)))),
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (block) {
						return A2($elm$core$String$startsWith, '---', block) && A2($elm$core$String$endsWith, '---', block);
					},
					blocks)));
		var title = $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				$elm$core$String$startsWith('# '),
				blocks));
		var _final = A2(
			$elm$core$String$join,
			'\n\n',
			A2(
				$elm$core$List$filter,
				function (block) {
					return !_Utils_eq(
						title,
						$elm$core$Maybe$Just(block));
				},
				A2(
					$elm$core$List$filter,
					function (block) {
						return !(A2($elm$core$String$startsWith, '---\n', block) && A2($elm$core$String$endsWith, '---', block));
					},
					A2($elm$core$List$map, $elm$core$String$trim, blocks))));
		var finalTitle = A2(
			$elm$core$Maybe$withDefault,
			'Sans titre',
			A2(
				$elm$core$Maybe$map,
				A2($elm$core$String$replace, '# ', ''),
				title));
		return {description: description, markdown: _final, path: path, title: finalTitle};
	});
var $krisajenkins$remotedata$RemoteData$map = F2(
	function (f, data) {
		switch (data.$) {
			case 'Success':
				var value = data.a;
				return $krisajenkins$remotedata$RemoteData$Success(
					f(value));
			case 'Loading':
				return $krisajenkins$remotedata$RemoteData$Loading;
			case 'NotAsked':
				return $krisajenkins$remotedata$RemoteData$NotAsked;
			default:
				var error = data.a;
				return $krisajenkins$remotedata$RemoteData$Failure(error);
		}
	});
var $author$project$Data$Gitbook$pathToString = function (path) {
	switch (path.$) {
		case 'Home':
			return 'README';
		case 'MaterialAndSpinning':
			return 'textile/filature';
		case 'Fabric':
			return 'textile/tricotage-tissage';
		case 'Dyeing':
			return 'textile/teinture';
		case 'Making':
			return 'textile/confection';
		case 'Distribution':
			return 'textile/distribution';
		case 'Use':
			return 'textile/etape-6-utilisation';
		case 'EndOfLife':
			return 'textile/etape-7-fin-de-vie';
		case 'Electricity':
			return 'textile/electricite';
		case 'Transport':
			return 'textile/transport';
		case 'Heat':
			return 'textile/chaleur';
		case 'Waste':
			return 'textile/pertes-et-rebus';
		case 'ImpactQuality':
			return 'textile/impacts-consideres#niveaux-de-recommandation';
		default:
			return 'textile/ajout-dun-pays#procedes-specifiques-au-pays';
	}
};
var $author$project$Request$Gitbook$getPage = F3(
	function (_v0, path, event) {
		return $elm$http$Http$get(
			{
				expect: $elm$http$Http$expectString(
					A2(
						$elm$core$Basics$composeR,
						$krisajenkins$remotedata$RemoteData$fromResult,
						A2(
							$elm$core$Basics$composeR,
							$krisajenkins$remotedata$RemoteData$map(
								$author$project$Data$Gitbook$fromMarkdown(path)),
							event))),
				url: 'https://raw.githubusercontent.com/' + ($author$project$Data$Env$githubRepository + ('/docs/' + ($author$project$Data$Gitbook$pathToString(path) + '.md')))
			});
	});
var $author$project$Page$Home$init = function (session) {
	return _Utils_Tuple3(
		{content: $krisajenkins$remotedata$RemoteData$Loading, isIsntSectionIndex: $elm$core$Maybe$Nothing},
		session,
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$Ports$scrollTo(
					{x: 0, y: 0}),
					A3($author$project$Request$Gitbook$getPage, session, $author$project$Data$Gitbook$Home, $author$project$Page$Home$GitbookContentReceived)
				])));
};
var $author$project$Page$Stats$ApiStats = function (a) {
	return {$: 'ApiStats', a: a};
};
var $author$project$Page$Stats$Simple = {$: 'Simple'};
var $author$project$Page$Stats$WebStats = function (a) {
	return {$: 'WebStats', a: a};
};
var $author$project$Data$Matomo$Stat = F3(
	function (label, hits, time) {
		return {hits: hits, label: label, time: time};
	});
var $elm$core$Result$map2 = F3(
	function (func, ra, rb) {
		if (ra.$ === 'Err') {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 'Err') {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				return $elm$core$Result$Ok(
					A2(func, a, b));
			}
		}
	});
var $elm_community$result_extra$Result$Extra$combine = A2(
	$elm$core$List$foldr,
	$elm$core$Result$map2($elm$core$List$cons),
	$elm$core$Result$Ok(_List_Nil));
var $author$project$Data$Matomo$decodeStats = function (key) {
	return A2(
		$elm$json$Json$Decode$andThen,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Dict$toList,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$map(
					function (_v0) {
						var label = _v0.a;
						var hits = _v0.b;
						return A2(
							$elm$core$Result$mapError,
							$elm$core$Basics$always('Format de date invalide: ' + label),
							A2(
								$elm$core$Result$map,
								A2($author$project$Data$Matomo$Stat, label, hits),
								$rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(label)));
					}),
				A2(
					$elm$core$Basics$composeR,
					$elm_community$result_extra$Result$Extra$combine,
					function (res) {
						if (res.$ === 'Ok') {
							var list = res.a;
							return $elm$json$Json$Decode$succeed(list);
						} else {
							var err = res.a;
							return $elm$json$Json$Decode$fail(err);
						}
					}))),
		$elm$json$Json$Decode$dict(
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					[key]),
				$elm$json$Json$Decode$int)));
};
var $author$project$Request$Matomo$getStats = F4(
	function (_v0, jsonKey, qs, event) {
		return $elm$http$Http$get(
			{
				expect: A2(
					$elm$http$Http$expectJson,
					A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, event),
					$author$project$Data$Matomo$decodeStats(jsonKey)),
				url: 'https://stats.data.gouv.fr/' + qs
			});
	});
var $author$project$Request$Matomo$getApiStats = function (session) {
	return A3($author$project$Request$Matomo$getStats, session, 'nb_conversions', '?module=API&method=Goals.get&format=json&idSite=196&idGoal=1&period=day&date=last30');
};
var $author$project$Request$Matomo$getWebStats = function (session) {
	return A3($author$project$Request$Matomo$getStats, session, 'nb_visits', '?module=API&method=VisitsSummary.get&format=json&idSite=196&period=day&date=last30');
};
var $author$project$Page$Stats$init = function (session) {
	return _Utils_Tuple3(
		{apiStats: $krisajenkins$remotedata$RemoteData$NotAsked, mode: $author$project$Page$Stats$Simple, webStats: $krisajenkins$remotedata$RemoteData$NotAsked},
		session,
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					A2($author$project$Request$Matomo$getApiStats, session, $author$project$Page$Stats$ApiStats),
					A2($author$project$Request$Matomo$getWebStats, session, $author$project$Page$Stats$WebStats),
					$author$project$Ports$scrollTo(
					{x: 0, y: 0})
				])));
};
var $author$project$Page$Textile$Examples$init = function (session) {
	return _Utils_Tuple3(
		{funit: $author$project$Data$Unit$PerItem, impact: $author$project$Data$Impact$defaultTrigram},
		session,
		$author$project$Ports$scrollTo(
			{x: 0, y: 0}));
};
var $author$project$Page$Textile$Explore$init = F2(
	function (dataset, session) {
		return _Utils_Tuple3(
			{dataset: dataset},
			session,
			$author$project$Ports$scrollTo(
				{x: 0, y: 0}));
	});
var $author$project$Page$Textile$Simulator$SaveLink = {$: 'SaveLink'};
var $ianmackenzie$elm_units$Quantity$at = F2(
	function (_v0, _v1) {
		var rateOfChange = _v0.a;
		var independentValue = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(rateOfChange * independentValue);
	});
var $ianmackenzie$elm_units$Energy$kilowattHours = function (numKilowattHours) {
	return $ianmackenzie$elm_units$Energy$joules(3.6e6 * numKilowattHours);
};
var $ianmackenzie$elm_units$Quantity$per = F2(
	function (_v0, _v1) {
		var independentValue = _v0.a;
		var dependentValue = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(dependentValue / independentValue);
	});
var $author$project$Data$Unit$forKWh = function (forOneKWh) {
	return $ianmackenzie$elm_units$Quantity$at(
		A2(
			$ianmackenzie$elm_units$Quantity$per,
			$ianmackenzie$elm_units$Energy$kilowattHours(1),
			forOneKWh));
};
var $ianmackenzie$elm_units$Mass$kilogram = $ianmackenzie$elm_units$Mass$kilograms(1);
var $author$project$Data$Unit$forKg = function (forOneKg) {
	return $ianmackenzie$elm_units$Quantity$at(
		A2($ianmackenzie$elm_units$Quantity$per, $ianmackenzie$elm_units$Mass$kilogram, forOneKg));
};
var $author$project$Data$Unit$forMJ = function (forOneMJ) {
	return $ianmackenzie$elm_units$Quantity$at(
		A2(
			$ianmackenzie$elm_units$Quantity$per,
			$ianmackenzie$elm_units$Energy$megajoules(1),
			forOneMJ));
};
var $author$project$Data$Impact$getImpact = function (trigram) {
	return A2(
		$elm$core$Basics$composeR,
		$turboMaCk$any_dict$Dict$Any$get(trigram),
		$elm$core$Maybe$withDefault($ianmackenzie$elm_units$Quantity$zero));
};
var $author$project$Data$Textile$Process$getImpact = function (trigram) {
	return A2(
		$elm$core$Basics$composeR,
		function ($) {
			return $.impacts;
		},
		$author$project$Data$Impact$getImpact(trigram));
};
var $ianmackenzie$elm_units$Energy$inJoules = function (_v0) {
	var numJoules = _v0.a;
	return numJoules;
};
var $ianmackenzie$elm_units$Energy$inMegajoules = function (energy) {
	return $ianmackenzie$elm_units$Energy$inJoules(energy) / 1.0e6;
};
var $author$project$Data$Impact$mapImpacts = function (fn) {
	return $turboMaCk$any_dict$Dict$Any$map(fn);
};
var $ianmackenzie$elm_units$Quantity$multiplyBy = F2(
	function (scale, _v0) {
		var value = _v0.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(scale * value);
	});
var $ianmackenzie$elm_units$Quantity$plus = F2(
	function (_v0, _v1) {
		var y = _v0.a;
		var x = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(x + y);
	});
var $ianmackenzie$elm_units$Quantity$sum = function (quantities) {
	return A3($elm$core$List$foldl, $ianmackenzie$elm_units$Quantity$plus, $ianmackenzie$elm_units$Quantity$zero, quantities);
};
var $author$project$Data$Textile$Formula$dyeingImpacts = F6(
	function (impacts, _v0, _v1, heatProcess, elecProcess, baseMass) {
		var dyeingLowProcess = _v0.a;
		var dyeingHighProcess = _v0.b;
		var highDyeingWeighting = _v1.a;
		var lowDyeingWeighting = 1 - highDyeingWeighting;
		var kwh = $ianmackenzie$elm_units$Energy$megajoules(
			$ianmackenzie$elm_units$Mass$inKilograms(baseMass) * ((highDyeingWeighting * $ianmackenzie$elm_units$Energy$inMegajoules(dyeingHighProcess.elec)) + (lowDyeingWeighting * $ianmackenzie$elm_units$Energy$inMegajoules(dyeingLowProcess.elec))));
		var heatMJ = $ianmackenzie$elm_units$Energy$megajoules(
			$ianmackenzie$elm_units$Mass$inKilograms(baseMass) * ((highDyeingWeighting * $ianmackenzie$elm_units$Energy$inMegajoules(dyeingHighProcess.heat)) + (lowDyeingWeighting * $ianmackenzie$elm_units$Energy$inMegajoules(dyeingLowProcess.heat))));
		var _v2 = _Utils_Tuple2(
			A2($ianmackenzie$elm_units$Quantity$multiplyBy, lowDyeingWeighting, baseMass),
			A2($ianmackenzie$elm_units$Quantity$multiplyBy, highDyeingWeighting, baseMass));
		var lowDyeingMass = _v2.a;
		var highDyeingMass = _v2.b;
		return {
			heat: heatMJ,
			impacts: A2(
				$author$project$Data$Impact$mapImpacts,
				F2(
					function (trigram, _v3) {
						var heatImpact = A2(
							$author$project$Data$Unit$forMJ,
							A2($author$project$Data$Textile$Process$getImpact, trigram, heatProcess),
							heatMJ);
						var elecImpact = A2(
							$author$project$Data$Unit$forKWh,
							A2($author$project$Data$Textile$Process$getImpact, trigram, elecProcess),
							kwh);
						var dyeingImpact_ = $ianmackenzie$elm_units$Quantity$sum(
							_List_fromArray(
								[
									A2(
									$author$project$Data$Unit$forKg,
									A2($author$project$Data$Textile$Process$getImpact, trigram, dyeingLowProcess),
									lowDyeingMass),
									A2(
									$author$project$Data$Unit$forKg,
									A2($author$project$Data$Textile$Process$getImpact, trigram, dyeingHighProcess),
									highDyeingMass)
								]));
						return $ianmackenzie$elm_units$Quantity$sum(
							_List_fromArray(
								[dyeingImpact_, heatImpact, elecImpact]));
					}),
				impacts),
			kwh: kwh
		};
	});
var $author$project$Data$Textile$Process$WellKnown = function (airTransport) {
	return function (seaTransport) {
		return function (roadTransportPreMaking) {
			return function (roadTransportPostMaking) {
				return function (distribution) {
					return function (dyeingHigh) {
						return function (dyeingLow) {
							return function (passengerCar) {
								return function (endOfLife) {
									return function (fading) {
										return {airTransport: airTransport, distribution: distribution, dyeingHigh: dyeingHigh, dyeingLow: dyeingLow, endOfLife: endOfLife, fading: fading, passengerCar: passengerCar, roadTransportPostMaking: roadTransportPostMaking, roadTransportPreMaking: roadTransportPreMaking, seaTransport: seaTransport};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $elm_community$result_extra$Result$Extra$andMap = F2(
	function (ra, rb) {
		var _v0 = _Utils_Tuple2(ra, rb);
		if (_v0.b.$ === 'Err') {
			var x = _v0.b.a;
			return $elm$core$Result$Err(x);
		} else {
			var o = _v0.a;
			var fn = _v0.b.a;
			return A2($elm$core$Result$map, fn, o);
		}
	});
var $author$project$Data$Textile$Process$findByAlias = function (alias) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$List$filter(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.alias;
				},
				$elm$core$Basics$eq(
					$elm$core$Maybe$Just(alias)))),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$head,
			$elm$core$Result$fromMaybe('Procédé introuvable par alias: ' + alias)));
};
var $author$project$Data$Textile$Process$loadWellKnown = function (processes) {
	var fromAlias = function (alias) {
		return $elm_community$result_extra$Result$Extra$andMap(
			A2($author$project$Data$Textile$Process$findByAlias, alias, processes));
	};
	return A2(
		fromAlias,
		'fading',
		A2(
			fromAlias,
			'end-of-life',
			A2(
				fromAlias,
				'passenger-car',
				A2(
					fromAlias,
					'dyeing-low',
					A2(
						fromAlias,
						'dyeing-high',
						A2(
							fromAlias,
							'distribution',
							A2(
								fromAlias,
								'road-transport-post-making',
								A2(
									fromAlias,
									'road-transport-pre-making',
									A2(
										fromAlias,
										'sea-transport',
										A2(
											fromAlias,
											'air-transport',
											$elm$core$Result$Ok($author$project$Data$Textile$Process$WellKnown)))))))))));
};
var $author$project$Data$Textile$Simulator$updateLifeCycle = F2(
	function (update, simulator) {
		return _Utils_update(
			simulator,
			{
				lifeCycle: update(simulator.lifeCycle)
			});
	});
var $elm$core$Elm$JsArray$map = _JsArray_map;
var $elm$core$Array$map = F2(
	function (func, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = function (node) {
			if (node.$ === 'SubTree') {
				var subTree = node.a;
				return $elm$core$Array$SubTree(
					A2($elm$core$Elm$JsArray$map, helper, subTree));
			} else {
				var values = node.a;
				return $elm$core$Array$Leaf(
					A2($elm$core$Elm$JsArray$map, func, values));
			}
		};
		return A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A2($elm$core$Elm$JsArray$map, helper, tree),
			A2($elm$core$Elm$JsArray$map, func, tail));
	});
var $author$project$Data$Textile$LifeCycle$updateStep = F2(
	function (label, update_) {
		return $elm$core$Array$map(
			function (step) {
				return _Utils_eq(step.label, label) ? update_(step) : step;
			});
	});
var $author$project$Data$Textile$Simulator$updateLifeCycleStep = F2(
	function (label, update) {
		return $author$project$Data$Textile$Simulator$updateLifeCycle(
			A2($author$project$Data$Textile$LifeCycle$updateStep, label, update));
	});
var $author$project$Data$Textile$Simulator$computeDyeingImpacts = F2(
	function (_v0, simulator) {
		var processes = _v0.processes;
		return A2(
			$elm$core$Result$map,
			function (_v1) {
				var dyeingHigh = _v1.dyeingHigh;
				var dyeingLow = _v1.dyeingLow;
				return A3(
					$author$project$Data$Textile$Simulator$updateLifeCycleStep,
					$author$project$Data$Textile$Step$Label$Dyeing,
					function (step) {
						var dyeingWeighting = step.dyeingWeighting;
						var country = step.country;
						var _v2 = A6(
							$author$project$Data$Textile$Formula$dyeingImpacts,
							step.impacts,
							_Utils_Tuple2(dyeingLow, dyeingHigh),
							dyeingWeighting,
							country.heatProcess,
							country.electricityProcess,
							step.outputMass);
						var heat = _v2.heat;
						var kwh = _v2.kwh;
						var impacts = _v2.impacts;
						return _Utils_update(
							step,
							{heat: heat, impacts: impacts, kwh: kwh});
					},
					simulator);
			},
			$author$project$Data$Textile$Process$loadWellKnown(processes));
	});
var $ianmackenzie$elm_units$Quantity$divideBy = F2(
	function (divisor, _v0) {
		var value = _v0.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(value / divisor);
	});
var $ianmackenzie$elm_units$Volume$inCubicMeters = function (_v0) {
	var numCubicMeters = _v0.a;
	return numCubicMeters;
};
var $author$project$Data$Textile$Formula$endOfLifeImpacts = F3(
	function (impacts, _v0, baseMass) {
		var volume = _v0.volume;
		var passengerCar = _v0.passengerCar;
		var endOfLife = _v0.endOfLife;
		var countryElecProcess = _v0.countryElecProcess;
		var heatProcess = _v0.heatProcess;
		var carTrunkAllocationRatio = $ianmackenzie$elm_units$Volume$inCubicMeters(
			A2($ianmackenzie$elm_units$Quantity$divideBy, 0.2, volume));
		var _v1 = _Utils_Tuple2(
			$ianmackenzie$elm_units$Quantity$sum(
				_List_fromArray(
					[
						A2($ianmackenzie$elm_units$Quantity$multiplyBy, carTrunkAllocationRatio, passengerCar.elec),
						A2(
						$ianmackenzie$elm_units$Quantity$multiplyBy,
						$ianmackenzie$elm_units$Mass$inKilograms(baseMass),
						endOfLife.elec)
					])),
			$ianmackenzie$elm_units$Quantity$sum(
				_List_fromArray(
					[
						A2($ianmackenzie$elm_units$Quantity$multiplyBy, carTrunkAllocationRatio, passengerCar.heat),
						A2(
						$ianmackenzie$elm_units$Quantity$multiplyBy,
						$ianmackenzie$elm_units$Mass$inKilograms(baseMass),
						endOfLife.heat)
					])));
		var elecEnergy = _v1.a;
		var heatEnergy = _v1.b;
		return {
			heat: heatEnergy,
			impacts: A2(
				$author$project$Data$Impact$mapImpacts,
				F2(
					function (trigram, _v2) {
						return $ianmackenzie$elm_units$Quantity$sum(
							_List_fromArray(
								[
									A2(
									$ianmackenzie$elm_units$Quantity$multiplyBy,
									carTrunkAllocationRatio,
									A2($author$project$Data$Textile$Process$getImpact, trigram, passengerCar)),
									A2(
									$author$project$Data$Unit$forKWh,
									A2($author$project$Data$Textile$Process$getImpact, trigram, countryElecProcess),
									elecEnergy),
									A2(
									$author$project$Data$Unit$forMJ,
									A2($author$project$Data$Textile$Process$getImpact, trigram, heatProcess),
									heatEnergy),
									A2(
									$author$project$Data$Unit$forKg,
									A2($author$project$Data$Textile$Process$getImpact, trigram, endOfLife),
									baseMass)
								]));
					}),
				impacts),
			kwh: elecEnergy
		};
	});
var $author$project$Data$Textile$Simulator$computeEndOfLifeImpacts = F2(
	function (_v0, simulator) {
		var processes = _v0.processes;
		return A2(
			$elm$core$Result$map,
			function (_v1) {
				var passengerCar = _v1.passengerCar;
				var endOfLife = _v1.endOfLife;
				return A3(
					$author$project$Data$Textile$Simulator$updateLifeCycleStep,
					$author$project$Data$Textile$Step$Label$EndOfLife,
					function (step) {
						var country = step.country;
						var _v2 = A3(
							$author$project$Data$Textile$Formula$endOfLifeImpacts,
							step.impacts,
							{countryElecProcess: country.electricityProcess, endOfLife: endOfLife, heatProcess: country.heatProcess, passengerCar: passengerCar, volume: simulator.inputs.product.endOfLife.volume},
							step.outputMass);
						var kwh = _v2.kwh;
						var heat = _v2.heat;
						var impacts = _v2.impacts;
						return _Utils_update(
							step,
							{heat: heat, impacts: impacts, kwh: kwh});
					},
					simulator);
			},
			$author$project$Data$Textile$Process$loadWellKnown(processes));
	});
var $ianmackenzie$elm_units$Energy$inKilowattHours = function (energy) {
	return $ianmackenzie$elm_units$Energy$inJoules(energy) / 3.6e6;
};
var $author$project$Data$Textile$Formula$knittingImpacts = F3(
	function (impacts, _v0, baseMass) {
		var elec = _v0.elec;
		var countryElecProcess = _v0.countryElecProcess;
		var electricityKWh = $ianmackenzie$elm_units$Energy$kilowattHours(
			$ianmackenzie$elm_units$Mass$inKilograms(baseMass) * $ianmackenzie$elm_units$Energy$inKilowattHours(elec));
		return {
			impacts: A2(
				$author$project$Data$Impact$mapImpacts,
				F2(
					function (trigram, _v1) {
						return A2(
							$author$project$Data$Unit$forKWh,
							A2($author$project$Data$Textile$Process$getImpact, trigram, countryElecProcess),
							electricityKWh);
					}),
				impacts),
			kwh: electricityKWh
		};
	});
var $author$project$Data$Unit$pickPerMeterToFloat = function (_v0) {
	var _int = _v0.a;
	return _int;
};
var $author$project$Data$Unit$surfaceMassToFloat = function (_v0) {
	var _int = _v0.a;
	return _int;
};
var $author$project$Data$Textile$Formula$weavingImpacts = F3(
	function (impacts, _v0, baseMass) {
		var pickingElec = _v0.pickingElec;
		var countryElecProcess = _v0.countryElecProcess;
		var picking = _v0.picking;
		var surfaceMass = _v0.surfaceMass;
		var electricityKWh = $ianmackenzie$elm_units$Energy$kilowattHours(
			((($ianmackenzie$elm_units$Mass$inKilograms(baseMass) * 1000) * $author$project$Data$Unit$pickPerMeterToFloat(picking)) / $author$project$Data$Unit$surfaceMassToFloat(surfaceMass)) * pickingElec);
		return {
			impacts: A2(
				$author$project$Data$Impact$mapImpacts,
				F2(
					function (trigram, _v1) {
						return A2(
							$author$project$Data$Unit$forKWh,
							A2($author$project$Data$Textile$Process$getImpact, trigram, countryElecProcess),
							electricityKWh);
					}),
				impacts),
			kwh: electricityKWh
		};
	});
var $author$project$Data$Textile$Simulator$computeFabricImpacts = function (simulator) {
	var inputs = simulator.inputs;
	return A3(
		$author$project$Data$Textile$Simulator$updateLifeCycleStep,
		$author$project$Data$Textile$Step$Label$Fabric,
		function (step) {
			var country = step.country;
			var _v0 = function () {
				var _v1 = inputs.product.fabric;
				if (_v1.$ === 'Knitted') {
					var process = _v1.a;
					return A3(
						$author$project$Data$Textile$Formula$knittingImpacts,
						step.impacts,
						{countryElecProcess: country.electricityProcess, elec: process.elec},
						step.outputMass);
				} else {
					var process = _v1.a;
					var defaultPicking = _v1.b;
					var defaultSurfaceMass = _v1.c;
					return A3(
						$author$project$Data$Textile$Formula$weavingImpacts,
						step.impacts,
						{
							countryElecProcess: country.electricityProcess,
							picking: A2($elm$core$Maybe$withDefault, defaultPicking, inputs.picking),
							pickingElec: process.elec_pppm,
							surfaceMass: A2($elm$core$Maybe$withDefault, defaultSurfaceMass, inputs.surfaceMass)
						},
						step.outputMass);
				}
			}();
			var kwh = _v0.kwh;
			var impacts = _v0.impacts;
			return _Utils_update(
				step,
				{impacts: impacts, kwh: kwh});
		},
		simulator);
};
var $author$project$Data$Textile$Formula$genericWaste = F2(
	function (processWaste, baseMass) {
		var waste = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			$ianmackenzie$elm_units$Mass$inKilograms(processWaste),
			baseMass);
		return {
			mass: A2($ianmackenzie$elm_units$Quantity$plus, waste, baseMass),
			waste: waste
		};
	});
var $author$project$Data$Textile$Product$getFabricProcess = function (_v0) {
	var fabric = _v0.fabric;
	if (fabric.$ === 'Knitted') {
		var process = fabric.a;
		return process;
	} else {
		var process = fabric.a;
		return process;
	}
};
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $elm$core$Array$filter = F2(
	function (isGood, array) {
		return $elm$core$Array$fromList(
			A3(
				$elm$core$Array$foldr,
				F2(
					function (x, xs) {
						return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
					}),
				_List_Nil,
				array));
	});
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Basics$ge = _Utils_ge;
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $author$project$Data$Textile$LifeCycle$getStep = function (label) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$Array$filter(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.label;
				},
				$elm$core$Basics$eq(label))),
		$elm$core$Array$get(0));
};
var $author$project$Data$Textile$LifeCycle$getStepProp = F3(
	function (label, prop, _default) {
		return A2(
			$elm$core$Basics$composeR,
			$author$project$Data$Textile$LifeCycle$getStep(label),
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Maybe$map(prop),
				$elm$core$Maybe$withDefault(_default)));
	});
var $author$project$Data$Textile$Step$initMass = F2(
	function (mass, step) {
		return _Utils_update(
			step,
			{inputMass: mass, outputMass: mass});
	});
var $author$project$Data$Textile$LifeCycle$updateSteps = F3(
	function (labels, update_, lifeCycle) {
		return A3(
			$elm$core$List$foldl,
			function (label) {
				return A2($author$project$Data$Textile$LifeCycle$updateStep, label, update_);
			},
			lifeCycle,
			labels);
	});
var $author$project$Data$Textile$Simulator$updateLifeCycleSteps = F2(
	function (labels, update) {
		return $author$project$Data$Textile$Simulator$updateLifeCycle(
			A2($author$project$Data$Textile$LifeCycle$updateSteps, labels, update));
	});
var $ianmackenzie$elm_units$Quantity$difference = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var y = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(x - y);
	});
var $author$project$Data$Textile$Step$updateWaste = F3(
	function (waste, mass, step) {
		return _Utils_update(
			step,
			{
				inputMass: mass,
				outputMass: A2($ianmackenzie$elm_units$Quantity$difference, mass, waste),
				waste: waste
			});
	});
var $author$project$Data$Textile$Simulator$computeFabricStepWaste = function (simulator) {
	var inputs = simulator.inputs;
	var lifeCycle = simulator.lifeCycle;
	var _v0 = A2(
		$author$project$Data$Textile$Formula$genericWaste,
		$author$project$Data$Textile$Product$getFabricProcess(inputs.product).waste,
		A4(
			$author$project$Data$Textile$LifeCycle$getStepProp,
			$author$project$Data$Textile$Step$Label$Making,
			function ($) {
				return $.inputMass;
			},
			$ianmackenzie$elm_units$Quantity$zero,
			lifeCycle));
	var mass = _v0.mass;
	var waste = _v0.waste;
	return A3(
		$author$project$Data$Textile$Simulator$updateLifeCycleSteps,
		_List_fromArray(
			[$author$project$Data$Textile$Step$Label$Material, $author$project$Data$Textile$Step$Label$Spinning]),
		$author$project$Data$Textile$Step$initMass(mass),
		A3(
			$author$project$Data$Textile$Simulator$updateLifeCycleStep,
			$author$project$Data$Textile$Step$Label$Fabric,
			A2($author$project$Data$Textile$Step$updateWaste, waste, mass),
			simulator));
};
var $elm$core$Elm$JsArray$foldl = _JsArray_foldl;
var $elm$core$Array$foldl = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldl, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldl, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldl,
			func,
			A3($elm$core$Elm$JsArray$foldl, helper, baseCase, tree),
			tail);
	});
var $author$project$Data$Impact$impactsFromDefinitons = A2(
	$elm$core$Basics$composeR,
	$elm$core$List$map(
		function (_v0) {
			var trigram = _v0.trigram;
			return _Utils_Tuple2(trigram, $ianmackenzie$elm_units$Quantity$zero);
		}),
	$turboMaCk$any_dict$Dict$Any$fromList($author$project$Data$Impact$toString));
var $author$project$Data$Textile$LifeCycle$computeFinalImpacts = function (db) {
	return A2(
		$elm$core$Array$foldl,
		F2(
			function (_v0, finalImpacts) {
				var impacts = _v0.impacts;
				var transport = _v0.transport;
				return A2(
					$author$project$Data$Impact$mapImpacts,
					F2(
						function (trigram, impact) {
							return $ianmackenzie$elm_units$Quantity$sum(
								_List_fromArray(
									[
										A2($author$project$Data$Impact$getImpact, trigram, impacts),
										impact,
										A2($author$project$Data$Impact$getImpact, trigram, transport.impacts)
									]));
						}),
					finalImpacts);
			}),
		$author$project$Data$Impact$impactsFromDefinitons(db.impacts));
};
var $author$project$Data$Textile$Simulator$computeFinalImpacts = F2(
	function (db, simulator) {
		var lifeCycle = simulator.lifeCycle;
		return _Utils_update(
			simulator,
			{
				impacts: A2($author$project$Data$Textile$LifeCycle$computeFinalImpacts, db, lifeCycle)
			});
	});
var $author$project$Data$Textile$Formula$makingImpacts = F3(
	function (impacts, _v0, outputMass) {
		var makingProcess = _v0.makingProcess;
		var fadingProcess = _v0.fadingProcess;
		var countryElecProcess = _v0.countryElecProcess;
		var countryHeatProcess = _v0.countryHeatProcess;
		var _v1 = _Utils_Tuple2(
			A2(
				$ianmackenzie$elm_units$Quantity$multiplyBy,
				$ianmackenzie$elm_units$Mass$inKilograms(outputMass),
				A2(
					$elm$core$Maybe$withDefault,
					$ianmackenzie$elm_units$Quantity$zero,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.elec;
						},
						fadingProcess))),
			A2(
				$ianmackenzie$elm_units$Quantity$multiplyBy,
				$ianmackenzie$elm_units$Mass$inKilograms(outputMass),
				A2(
					$elm$core$Maybe$withDefault,
					$ianmackenzie$elm_units$Quantity$zero,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.heat;
						},
						fadingProcess))));
		var fadingElec = _v1.a;
		var fadingHeat = _v1.b;
		return {
			heat: $ianmackenzie$elm_units$Quantity$sum(
				_List_fromArray(
					[makingProcess.heat, fadingHeat])),
			impacts: A2(
				$author$project$Data$Impact$mapImpacts,
				F2(
					function (trigram, _v2) {
						return $ianmackenzie$elm_units$Quantity$sum(
							_List_fromArray(
								[
									A2(
									$author$project$Data$Unit$forKWh,
									A2($author$project$Data$Textile$Process$getImpact, trigram, countryElecProcess),
									makingProcess.elec),
									A2(
									$author$project$Data$Unit$forMJ,
									A2($author$project$Data$Textile$Process$getImpact, trigram, countryElecProcess),
									makingProcess.heat),
									A2(
									$author$project$Data$Unit$forKg,
									A2(
										$elm$core$Maybe$withDefault,
										$ianmackenzie$elm_units$Quantity$zero,
										A2(
											$elm$core$Maybe$map,
											$author$project$Data$Textile$Process$getImpact(trigram),
											fadingProcess)),
									outputMass),
									A2(
									$author$project$Data$Unit$forKWh,
									A2($author$project$Data$Textile$Process$getImpact, trigram, countryElecProcess),
									fadingElec),
									A2(
									$author$project$Data$Unit$forMJ,
									A2($author$project$Data$Textile$Process$getImpact, trigram, countryHeatProcess),
									fadingHeat)
								]));
					}),
				impacts),
			kwh: $ianmackenzie$elm_units$Quantity$sum(
				_List_fromArray(
					[makingProcess.elec, fadingElec]))
		};
	});
var $author$project$Data$Textile$Simulator$computeMakingImpacts = F2(
	function (_v0, simulator) {
		var processes = _v0.processes;
		var inputs = simulator.inputs;
		return A2(
			$elm$core$Result$map,
			function (_v1) {
				var fading = _v1.fading;
				return A3(
					$author$project$Data$Textile$Simulator$updateLifeCycleStep,
					$author$project$Data$Textile$Step$Label$Making,
					function (step) {
						var country = step.country;
						var _v2 = A3(
							$author$project$Data$Textile$Formula$makingImpacts,
							step.impacts,
							{
								countryElecProcess: country.electricityProcess,
								countryHeatProcess: country.heatProcess,
								fadingProcess: (inputs.product.making.fadable && (!_Utils_eq(
									inputs.disabledFading,
									$elm$core$Maybe$Just(true)))) ? $elm$core$Maybe$Just(fading) : $elm$core$Maybe$Nothing,
								makingProcess: inputs.product.making.process
							},
							step.outputMass);
						var kwh = _v2.kwh;
						var heat = _v2.heat;
						var impacts = _v2.impacts;
						return _Utils_update(
							step,
							{heat: heat, impacts: impacts, kwh: kwh});
					},
					simulator);
			},
			$author$project$Data$Textile$Process$loadWellKnown(processes));
	});
var $ianmackenzie$elm_units$Quantity$minus = F2(
	function (_v0, _v1) {
		var y = _v0.a;
		var x = _v1.a;
		return $ianmackenzie$elm_units$Quantity$Quantity(x - y);
	});
var $author$project$Data$Unit$ratioToFloat = function (_v0) {
	var _float = _v0.a;
	return _float;
};
var $author$project$Data$Textile$Formula$makingWaste = F2(
	function (_v0, baseMass) {
		var processWaste = _v0.processWaste;
		var pcrWaste = _v0.pcrWaste;
		var mass = $ianmackenzie$elm_units$Mass$kilograms(
			($ianmackenzie$elm_units$Mass$inKilograms(baseMass) + ($ianmackenzie$elm_units$Mass$inKilograms(baseMass) * $ianmackenzie$elm_units$Mass$inKilograms(processWaste))) / (1 - $author$project$Data$Unit$ratioToFloat(pcrWaste)));
		return {
			mass: mass,
			waste: A2($ianmackenzie$elm_units$Quantity$minus, baseMass, mass)
		};
	});
var $author$project$Data$Textile$Simulator$computeMakingStepWaste = function (simulator) {
	var inputs = simulator.inputs;
	var _v0 = A2(
		$author$project$Data$Textile$Formula$makingWaste,
		{
			pcrWaste: A2($elm$core$Maybe$withDefault, inputs.product.making.pcrWaste, inputs.makingWaste),
			processWaste: inputs.product.making.process.waste
		},
		inputs.mass);
	var mass = _v0.mass;
	var waste = _v0.waste;
	return A3(
		$author$project$Data$Textile$Simulator$updateLifeCycleSteps,
		_List_fromArray(
			[$author$project$Data$Textile$Step$Label$Material, $author$project$Data$Textile$Step$Label$Spinning, $author$project$Data$Textile$Step$Label$Fabric, $author$project$Data$Textile$Step$Label$Dyeing]),
		$author$project$Data$Textile$Step$initMass(mass),
		A3(
			$author$project$Data$Textile$Simulator$updateLifeCycleStep,
			$author$project$Data$Textile$Step$Label$Making,
			A2($author$project$Data$Textile$Step$updateWaste, waste, mass),
			simulator));
};
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Data$Textile$Material$findById = function (id) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$List$filter(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.id;
				},
				$elm$core$Basics$eq(id))),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$head,
			$elm$core$Result$fromMaybe(
				'Matière non trouvée id=' + ($author$project$Data$Textile$Material$idToString(id) + '.'))));
};
var $elm$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $author$project$Data$Textile$Material$getRecyclingData = F2(
	function (material, materials) {
		return A3(
			$elm$core$Maybe$map2,
			$elm$core$Tuple$pair,
			A2(
				$elm$core$Maybe$andThen,
				function (id) {
					return $elm$core$Result$toMaybe(
						A2($author$project$Data$Textile$Material$findById, id, materials));
				},
				material.recycledFrom),
			material.cffData);
	});
var $author$project$Data$Textile$Formula$pureMaterialImpacts = F3(
	function (impacts, process, mass) {
		return A2(
			$author$project$Data$Impact$mapImpacts,
			F2(
				function (trigram, _v0) {
					return A2(
						$author$project$Data$Unit$forKg,
						A2($author$project$Data$Textile$Process$getImpact, trigram, process),
						mass);
				}),
			impacts);
	});
var $author$project$Data$Unit$impactToFloat = function (_v0) {
	var value = _v0.a;
	return value;
};
var $author$project$Data$Textile$Formula$recycledMaterialImpacts = F3(
	function (impacts, _v0, outputMass) {
		var recycledProcess = _v0.recycledProcess;
		var nonRecycledProcess = _v0.nonRecycledProcess;
		var cffData = _v0.cffData;
		var _v1 = cffData;
		var manufacturerAllocation = _v1.manufacturerAllocation;
		var recycledQualityRatio = _v1.recycledQualityRatio;
		return A2(
			$author$project$Data$Impact$mapImpacts,
			F2(
				function (trigram, _v2) {
					var _v3 = _Utils_Tuple2(
						$author$project$Data$Unit$impactToFloat(
							A2($author$project$Data$Textile$Process$getImpact, trigram, recycledProcess)),
						$author$project$Data$Unit$impactToFloat(
							A2($author$project$Data$Textile$Process$getImpact, trigram, nonRecycledProcess)));
					var recycledImpactPerKg = _v3.a;
					var nonRecycledImpactPerKg = _v3.b;
					return $author$project$Data$Unit$impact(
						$ianmackenzie$elm_units$Mass$inKilograms(outputMass) * (($author$project$Data$Unit$ratioToFloat(manufacturerAllocation) * recycledImpactPerKg) + (((1 - $author$project$Data$Unit$ratioToFloat(manufacturerAllocation)) * $author$project$Data$Unit$ratioToFloat(recycledQualityRatio)) * nonRecycledImpactPerKg)));
				}),
			impacts);
	});
var $author$project$Data$Textile$Simulator$stepMaterialImpacts = F3(
	function (db, material, step) {
		var _v0 = A2($author$project$Data$Textile$Material$getRecyclingData, material, db.materials);
		if (_v0.$ === 'Nothing') {
			return A3($author$project$Data$Textile$Formula$pureMaterialImpacts, step.impacts, material.materialProcess, step.outputMass);
		} else {
			var _v1 = _v0.a;
			var sourceMaterial = _v1.a;
			var cffData = _v1.b;
			return A3(
				$author$project$Data$Textile$Formula$recycledMaterialImpacts,
				step.impacts,
				{cffData: cffData, nonRecycledProcess: sourceMaterial.materialProcess, recycledProcess: material.materialProcess},
				step.outputMass);
		}
	});
var $author$project$Data$Impact$sumImpacts = function (defs) {
	return A2(
		$elm$core$List$foldl,
		function (impacts) {
			return $author$project$Data$Impact$mapImpacts(
				F2(
					function (trigram, impact) {
						return $ianmackenzie$elm_units$Quantity$sum(
							_List_fromArray(
								[
									A2($author$project$Data$Impact$getImpact, trigram, impacts),
									impact
								]));
					}));
		},
		$author$project$Data$Impact$impactsFromDefinitons(defs));
};
var $author$project$Data$Textile$Simulator$computeMaterialImpacts = F2(
	function (db, simulator) {
		var inputs = simulator.inputs;
		return A3(
			$author$project$Data$Textile$Simulator$updateLifeCycleStep,
			$author$project$Data$Textile$Step$Label$Material,
			function (step) {
				return _Utils_update(
					step,
					{
						impacts: A2(
							$author$project$Data$Impact$sumImpacts,
							db.impacts,
							A2(
								$elm$core$List$map,
								function (_v0) {
									var material = _v0.material;
									var share = _v0.share;
									return A2(
										$author$project$Data$Impact$mapImpacts,
										function (_v1) {
											return $ianmackenzie$elm_units$Quantity$multiplyBy(
												$author$project$Data$Unit$ratioToFloat(share));
										},
										A3($author$project$Data$Textile$Simulator$stepMaterialImpacts, db, material, step));
								},
								inputs.materials))
					});
			},
			simulator);
	});
var $author$project$Data$Textile$Simulator$computeMaterialStepWaste = function (simulator) {
	var inputs = simulator.inputs;
	var lifeCycle = simulator.lifeCycle;
	var _v0 = function (inputMass) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (curr, acc) {
					return {
						mass: A2($ianmackenzie$elm_units$Quantity$plus, acc.mass, curr.mass),
						waste: A2($ianmackenzie$elm_units$Quantity$plus, acc.waste, curr.waste)
					};
				}),
			{mass: $ianmackenzie$elm_units$Quantity$zero, waste: $ianmackenzie$elm_units$Quantity$zero},
			A2(
				$elm$core$List$map,
				function (_v1) {
					var material = _v1.material;
					var share = _v1.share;
					return A2(
						$author$project$Data$Textile$Formula$genericWaste,
						material.materialProcess.waste,
						A2(
							$ianmackenzie$elm_units$Quantity$multiplyBy,
							$author$project$Data$Unit$ratioToFloat(share),
							inputMass));
				},
				inputs.materials));
	}(
		A4(
			$author$project$Data$Textile$LifeCycle$getStepProp,
			$author$project$Data$Textile$Step$Label$Spinning,
			function ($) {
				return $.inputMass;
			},
			$ianmackenzie$elm_units$Quantity$zero,
			lifeCycle));
	var mass = _v0.mass;
	var waste = _v0.waste;
	return A3(
		$author$project$Data$Textile$Simulator$updateLifeCycleStep,
		$author$project$Data$Textile$Step$Label$Material,
		A2($author$project$Data$Textile$Step$updateWaste, waste, mass),
		simulator);
};
var $author$project$Data$Textile$LifeCycle$mapSteps = $elm$core$Array$map;
var $turboMaCk$any_dict$Dict$Any$foldl = F3(
	function (f, acc, _v0) {
		var dict = _v0.a.dict;
		return A3(
			$elm$core$Dict$foldl,
			F2(
				function (_v1, _v2) {
					var k = _v2.a;
					var v = _v2.b;
					return A2(f, k, v);
				}),
			acc,
			dict);
	});
var $author$project$Data$Impact$getDefinition = function (trigram) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$List$filter(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.trigram;
				},
				$elm$core$Basics$eq(trigram))),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$head,
			$elm$core$Result$fromMaybe(
				'Impact ' + ($author$project$Data$Impact$toString(trigram) + ' invalide'))));
};
var $author$project$Data$Unit$impactPefScore = F2(
	function (normalization, weighting) {
		return A2(
			$elm$core$Basics$composeR,
			$ianmackenzie$elm_units$Quantity$divideBy(
				$author$project$Data$Unit$impactToFloat(normalization)),
			A2(
				$elm$core$Basics$composeR,
				$ianmackenzie$elm_units$Quantity$multiplyBy(
					$author$project$Data$Unit$ratioToFloat(weighting)),
				$ianmackenzie$elm_units$Quantity$multiplyBy(1000)));
	});
var $author$project$Data$Impact$computePefScore = function (defs) {
	return A2(
		$elm$core$Basics$composeR,
		$turboMaCk$any_dict$Dict$Any$map(
			F2(
				function (trigram, impact) {
					var _v0 = A2($author$project$Data$Impact$getDefinition, trigram, defs);
					if (_v0.$ === 'Ok') {
						var pefData = _v0.a.pefData;
						if (pefData.$ === 'Just') {
							var normalization = pefData.a.normalization;
							var weighting = pefData.a.weighting;
							return A3($author$project$Data$Unit$impactPefScore, normalization, weighting, impact);
						} else {
							return $ianmackenzie$elm_units$Quantity$zero;
						}
					} else {
						return $ianmackenzie$elm_units$Quantity$zero;
					}
				})),
		A2(
			$turboMaCk$any_dict$Dict$Any$foldl,
			function (_v2) {
				return $ianmackenzie$elm_units$Quantity$plus;
			},
			$ianmackenzie$elm_units$Quantity$zero));
};
var $author$project$Data$Impact$updateImpact = F2(
	function (trigram, value) {
		return A2($turboMaCk$any_dict$Dict$Any$insert, trigram, value);
	});
var $author$project$Data$Impact$updatePefImpact = F2(
	function (definitions, impacts) {
		return A3(
			$author$project$Data$Impact$updateImpact,
			$author$project$Data$Impact$trg('pef'),
			A2($author$project$Data$Impact$computePefScore, definitions, impacts),
			impacts);
	});
var $author$project$Data$Textile$Simulator$computePefScores = function (db) {
	return $author$project$Data$Textile$Simulator$updateLifeCycle(
		$author$project$Data$Textile$LifeCycle$mapSteps(
			function (step) {
				var impacts = step.impacts;
				return _Utils_update(
					step,
					{
						impacts: A2($author$project$Data$Impact$updatePefImpact, db.impacts, impacts)
					});
			}));
};
var $author$project$Data$Textile$Formula$spinningImpacts = F3(
	function (impacts, _v0, mass) {
		var spinningProcess = _v0.spinningProcess;
		var countryElecProcess = _v0.countryElecProcess;
		var kwh = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			$ianmackenzie$elm_units$Mass$inKilograms(mass),
			spinningProcess.elec);
		return {
			impacts: A2(
				$author$project$Data$Impact$mapImpacts,
				F2(
					function (trigram, _v1) {
						return A2(
							$author$project$Data$Unit$forKWh,
							A2($author$project$Data$Textile$Process$getImpact, trigram, countryElecProcess),
							kwh);
					}),
				impacts),
			kwh: kwh
		};
	});
var $author$project$Data$Textile$Simulator$stepSpinningImpacts = F3(
	function (_v0, material, step) {
		var _v1 = material.spinningProcess;
		if (_v1.$ === 'Nothing') {
			return {impacts: step.impacts, kwh: $ianmackenzie$elm_units$Quantity$zero};
		} else {
			var spinningProcess = _v1.a;
			return A3(
				$author$project$Data$Textile$Formula$spinningImpacts,
				step.impacts,
				{countryElecProcess: step.country.electricityProcess, spinningProcess: spinningProcess},
				step.outputMass);
		}
	});
var $author$project$Data$Textile$Simulator$computeSpinningImpacts = F2(
	function (db, simulator) {
		var inputs = simulator.inputs;
		return A3(
			$author$project$Data$Textile$Simulator$updateLifeCycleStep,
			$author$project$Data$Textile$Step$Label$Spinning,
			function (step) {
				return _Utils_update(
					step,
					{
						impacts: A2(
							$author$project$Data$Impact$sumImpacts,
							db.impacts,
							A2(
								$elm$core$List$map,
								function (_v0) {
									var material = _v0.material;
									var share = _v0.share;
									return A2(
										$author$project$Data$Impact$mapImpacts,
										function (_v1) {
											return $ianmackenzie$elm_units$Quantity$multiplyBy(
												$author$project$Data$Unit$ratioToFloat(share));
										},
										A3($author$project$Data$Textile$Simulator$stepSpinningImpacts, db, material, step).impacts);
								},
								inputs.materials)),
						kwh: A3(
							$elm$core$List$foldl,
							$ianmackenzie$elm_units$Quantity$plus,
							$ianmackenzie$elm_units$Quantity$zero,
							A2(
								$elm$core$List$map,
								function (_v2) {
									var material = _v2.material;
									var share = _v2.share;
									return A2(
										$ianmackenzie$elm_units$Quantity$multiplyBy,
										$author$project$Data$Unit$ratioToFloat(share),
										A3($author$project$Data$Textile$Simulator$stepSpinningImpacts, db, material, step).kwh);
								},
								inputs.materials))
					});
			},
			simulator);
	});
var $author$project$Data$Textile$Simulator$computeSpinningStepWaste = function (simulator) {
	var inputs = simulator.inputs;
	var lifeCycle = simulator.lifeCycle;
	var _v0 = function (inputMass) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (curr, acc) {
					return {
						mass: A2($ianmackenzie$elm_units$Quantity$plus, acc.mass, curr.mass),
						waste: A2($ianmackenzie$elm_units$Quantity$plus, acc.waste, curr.waste)
					};
				}),
			{mass: $ianmackenzie$elm_units$Quantity$zero, waste: $ianmackenzie$elm_units$Quantity$zero},
			A2(
				$elm$core$List$map,
				function (_v1) {
					var material = _v1.material;
					var share = _v1.share;
					var processWaste = A2(
						$elm$core$Maybe$withDefault,
						$ianmackenzie$elm_units$Mass$kilograms(0),
						A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.waste;
							},
							material.spinningProcess));
					return A2(
						$author$project$Data$Textile$Formula$genericWaste,
						processWaste,
						A2(
							$ianmackenzie$elm_units$Quantity$multiplyBy,
							$author$project$Data$Unit$ratioToFloat(share),
							inputMass));
				},
				inputs.materials));
	}(
		A4(
			$author$project$Data$Textile$LifeCycle$getStepProp,
			$author$project$Data$Textile$Step$Label$Fabric,
			function ($) {
				return $.inputMass;
			},
			$ianmackenzie$elm_units$Quantity$zero,
			lifeCycle));
	var mass = _v0.mass;
	var waste = _v0.waste;
	return A3(
		$author$project$Data$Textile$Simulator$updateLifeCycleStep,
		$author$project$Data$Textile$Step$Label$Spinning,
		A2($author$project$Data$Textile$Step$updateWaste, waste, mass),
		simulator);
};
var $ianmackenzie$elm_units$Length$inMeters = function (_v0) {
	var numMeters = _v0.a;
	return numMeters;
};
var $ianmackenzie$elm_units$Length$inKilometers = function (length) {
	return 0.001 * $ianmackenzie$elm_units$Length$inMeters(length);
};
var $author$project$Data$Unit$forKgAndDistance = F3(
	function (cc, distance, mass) {
		return A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			$ianmackenzie$elm_units$Length$inKilometers(distance),
			A2(
				$author$project$Data$Unit$forKg,
				cc,
				A2($ianmackenzie$elm_units$Quantity$divideBy, 1000, mass)));
	});
var $author$project$Data$Textile$Step$computeTransportImpacts = F6(
	function (db, impacts, _v0, roadProcess, mass, _v1) {
		var seaTransport = _v0.seaTransport;
		var airTransport = _v0.airTransport;
		var road = _v1.road;
		var sea = _v1.sea;
		var air = _v1.air;
		return {
			air: air,
			impacts: A2(
				$author$project$Data$Impact$updatePefImpact,
				db.impacts,
				A2(
					$author$project$Data$Impact$mapImpacts,
					F2(
						function (trigram, _v2) {
							var _v3 = _Utils_Tuple3(
								A3(
									$author$project$Data$Unit$forKgAndDistance,
									A2($author$project$Data$Textile$Process$getImpact, trigram, roadProcess),
									road,
									mass),
								A3(
									$author$project$Data$Unit$forKgAndDistance,
									A2($author$project$Data$Textile$Process$getImpact, trigram, seaTransport),
									sea,
									mass),
								A3(
									$author$project$Data$Unit$forKgAndDistance,
									A2($author$project$Data$Textile$Process$getImpact, trigram, airTransport),
									air,
									mass));
							var roadImpact = _v3.a;
							var seaImpact = _v3.b;
							var airImpact = _v3.c;
							return $ianmackenzie$elm_units$Quantity$sum(
								_List_fromArray(
									[roadImpact, seaImpact, airImpact]));
						}),
					impacts)),
			road: road,
			sea: sea
		};
	});
var $author$project$Data$Transport$add = F2(
	function (a, b) {
		return _Utils_update(
			b,
			{
				air: A2($ianmackenzie$elm_units$Quantity$plus, a.air, b.air),
				road: A2($ianmackenzie$elm_units$Quantity$plus, a.road, b.road),
				sea: A2($ianmackenzie$elm_units$Quantity$plus, a.sea, b.sea)
			});
	});
var $author$project$Data$Transport$default = function (impacts) {
	return {air: $ianmackenzie$elm_units$Quantity$zero, impacts: impacts, road: $ianmackenzie$elm_units$Quantity$zero, sea: $ianmackenzie$elm_units$Quantity$zero};
};
var $author$project$Data$Transport$defaultInland = function (impacts) {
	return {
		air: $ianmackenzie$elm_units$Length$kilometers(500),
		impacts: impacts,
		road: $ianmackenzie$elm_units$Length$kilometers(500),
		sea: $ianmackenzie$elm_units$Quantity$zero
	};
};
var $author$project$Data$Transport$roadSeaTransportRatio = function (_v0) {
	var road = _v0.road;
	var sea = _v0.sea;
	return (!$ianmackenzie$elm_units$Length$inKilometers(road)) ? 0 : ((!$ianmackenzie$elm_units$Length$inKilometers(sea)) ? 1 : (($ianmackenzie$elm_units$Length$inKilometers(road) <= 500) ? 1 : (($ianmackenzie$elm_units$Length$inKilometers(road) < 1000) ? 0.9 : (($ianmackenzie$elm_units$Length$inKilometers(road) < 2000) ? 0.5 : (($ianmackenzie$elm_units$Length$inKilometers(road) < 3000) ? 0.25 : 0)))));
};
var $author$project$Data$Textile$Formula$transportRatio = F2(
	function (airTransportRatio, transport) {
		var road = transport.road;
		var sea = transport.sea;
		var air = transport.air;
		var roadRatio = $author$project$Data$Transport$roadSeaTransportRatio(transport);
		var seaRatio = 1 - roadRatio;
		return _Utils_update(
			transport,
			{
				air: A2(
					$ianmackenzie$elm_units$Quantity$multiplyBy,
					$author$project$Data$Unit$ratioToFloat(airTransportRatio),
					air),
				road: A2(
					$ianmackenzie$elm_units$Quantity$multiplyBy,
					roadRatio * (1 - $author$project$Data$Unit$ratioToFloat(airTransportRatio)),
					road),
				sea: A2(
					$ianmackenzie$elm_units$Quantity$multiplyBy,
					seaRatio * (1 - $author$project$Data$Unit$ratioToFloat(airTransportRatio)),
					sea)
			});
	});
var $author$project$Data$Textile$Step$computeTransportSummary = F2(
	function (step, transport) {
		var _v0 = _Utils_Tuple2(
			$author$project$Data$Transport$default(step.transport.impacts),
			$author$project$Data$Transport$defaultInland(step.transport.impacts));
		var noTransports = _v0.a;
		var defaultInland = _v0.b;
		var _v1 = step.label;
		switch (_v1.$) {
			case 'Dyeing':
				return A2(
					$author$project$Data$Transport$add,
					_Utils_update(
						defaultInland,
						{air: $ianmackenzie$elm_units$Quantity$zero}),
					A2(
						$author$project$Data$Textile$Formula$transportRatio,
						$author$project$Data$Unit$ratio(0),
						transport));
			case 'Making':
				return A2($author$project$Data$Textile$Formula$transportRatio, step.airTransportRatio, transport);
			case 'Use':
				return noTransports;
			case 'EndOfLife':
				return noTransports;
			default:
				return A2(
					$author$project$Data$Textile$Formula$transportRatio,
					$author$project$Data$Unit$ratio(0),
					transport);
		}
	});
var $author$project$Data$Textile$Step$getRoadTransportProcess = F2(
	function (wellKnown, _v0) {
		var label = _v0.label;
		switch (label.$) {
			case 'Making':
				return wellKnown.roadTransportPostMaking;
			case 'Distribution':
				return wellKnown.distribution;
			default:
				return wellKnown.roadTransportPreMaking;
		}
	});
var $author$project$Data$Transport$getTransportBetween = F4(
	function (impacts, cA, cB, distances) {
		return _Utils_eq(cA, cB) ? $author$project$Data$Transport$defaultInland(impacts) : A2(
			$elm$core$Maybe$withDefault,
			$author$project$Data$Transport$default(impacts),
			A2(
				$elm$core$Maybe$andThen,
				function (countries) {
					var _v0 = A2($turboMaCk$any_dict$Dict$Any$get, cB, countries);
					if (_v0.$ === 'Just') {
						var transport = _v0.a;
						return $elm$core$Maybe$Just(
							_Utils_update(
								transport,
								{impacts: impacts}));
					} else {
						return $elm$core$Maybe$Just(
							A4($author$project$Data$Transport$getTransportBetween, impacts, cB, cA, distances));
					}
				},
				A2($turboMaCk$any_dict$Dict$Any$get, cA, distances)));
	});
var $author$project$Data$Textile$Step$computeTransports = F3(
	function (db, next, current) {
		var processInfo = current.processInfo;
		return A2(
			$elm$core$Result$map,
			function (wellKnown) {
				var transport = A4($author$project$Data$Transport$getTransportBetween, current.transport.impacts, current.country.code, next.country.code, db.transports);
				var stepSummary = A2($author$project$Data$Textile$Step$computeTransportSummary, current, transport);
				var roadTransportProcess = A2($author$project$Data$Textile$Step$getRoadTransportProcess, wellKnown, current);
				return _Utils_update(
					current,
					{
						processInfo: _Utils_update(
							processInfo,
							{
								airTransport: $elm$core$Maybe$Just(wellKnown.airTransport.name),
								roadTransport: $elm$core$Maybe$Just(roadTransportProcess.name),
								seaTransport: $elm$core$Maybe$Just(wellKnown.seaTransport.name)
							}),
						transport: A6($author$project$Data$Textile$Step$computeTransportImpacts, db, current.transport.impacts, wellKnown, roadTransportProcess, next.inputMass, stepSummary)
					});
			},
			$author$project$Data$Textile$Process$loadWellKnown(db.processes));
	});
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$findIndexHelp = F3(
	function (index, predicate, list) {
		findIndexHelp:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$index = index + 1,
						$temp$predicate = predicate,
						$temp$list = xs;
					index = $temp$index;
					predicate = $temp$predicate;
					list = $temp$list;
					continue findIndexHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$findIndex = $elm_community$list_extra$List$Extra$findIndexHelp(0);
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $elm_community$list_extra$List$Extra$splitAt = F2(
	function (n, xs) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, n, xs),
			A2($elm$core$List$drop, n, xs));
	});
var $elm_community$list_extra$List$Extra$splitWhen = F2(
	function (predicate, list) {
		return A2(
			$elm$core$Maybe$map,
			function (i) {
				return A2($elm_community$list_extra$List$Extra$splitAt, i, list);
			},
			A2($elm_community$list_extra$List$Extra$findIndex, predicate, list));
	});
var $author$project$Data$Textile$LifeCycle$getNextEnabledStep = function (label) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$Array$toList,
		A2(
			$elm$core$Basics$composeR,
			$elm_community$list_extra$List$Extra$splitWhen(
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.label;
					},
					$elm$core$Basics$eq(label))),
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Maybe$map($elm$core$Tuple$second),
				$elm$core$Maybe$andThen(
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$filter(
							function ($) {
								return $.enabled;
							}),
						A2(
							$elm$core$Basics$composeR,
							$elm$core$List$drop(1),
							$elm$core$List$head))))));
};
var $author$project$Data$Textile$LifeCycle$computeStepsTransport = F2(
	function (db, lifeCycle) {
		return A2(
			$elm$core$Result$map,
			$elm$core$Array$fromList,
			$elm_community$result_extra$Result$Extra$combine(
				$elm$core$Array$toList(
					A2(
						$elm$core$Array$map,
						function (step) {
							return step.enabled ? A3(
								$author$project$Data$Textile$Step$computeTransports,
								db,
								A2(
									$elm$core$Maybe$withDefault,
									step,
									A2($author$project$Data$Textile$LifeCycle$getNextEnabledStep, step.label, lifeCycle)),
								step) : $elm$core$Result$Ok(step);
						},
						lifeCycle))));
	});
var $author$project$Data$Textile$Simulator$computeStepsTransport = F2(
	function (db, simulator) {
		return A2(
			$elm$core$Result$map,
			function (lifeCycle) {
				return _Utils_update(
					simulator,
					{lifeCycle: lifeCycle});
			},
			A2($author$project$Data$Textile$LifeCycle$computeStepsTransport, db, simulator.lifeCycle));
	});
var $author$project$Data$Textile$LifeCycle$computeTotalTransportImpacts = function (db) {
	return A2(
		$elm$core$Array$foldl,
		F2(
			function (_v0, acc) {
				var transport = _v0.transport;
				return _Utils_update(
					acc,
					{
						air: A2($ianmackenzie$elm_units$Quantity$plus, transport.air, acc.air),
						impacts: A2(
							$author$project$Data$Impact$mapImpacts,
							F2(
								function (trigram, impact) {
									return $ianmackenzie$elm_units$Quantity$sum(
										_List_fromArray(
											[
												impact,
												A2($author$project$Data$Impact$getImpact, trigram, transport.impacts)
											]));
								}),
							acc.impacts),
						road: A2($ianmackenzie$elm_units$Quantity$plus, transport.road, acc.road),
						sea: A2($ianmackenzie$elm_units$Quantity$plus, transport.sea, acc.sea)
					});
			}),
		$author$project$Data$Transport$default(
			$author$project$Data$Impact$impactsFromDefinitons(db.impacts)));
};
var $author$project$Data$Textile$Simulator$computeTotalTransportImpacts = F2(
	function (db, simulator) {
		return _Utils_update(
			simulator,
			{
				transport: A2($author$project$Data$Textile$LifeCycle$computeTotalTransportImpacts, db, simulator.lifeCycle)
			});
	});
var $author$project$Data$Textile$Formula$useImpacts = F3(
	function (impacts, _v0, baseMass) {
		var useNbCycles = _v0.useNbCycles;
		var ironingProcess = _v0.ironingProcess;
		var nonIroningProcess = _v0.nonIroningProcess;
		var countryElecProcess = _v0.countryElecProcess;
		var totalEnergy = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			useNbCycles,
			$ianmackenzie$elm_units$Quantity$sum(
				_List_fromArray(
					[
						ironingProcess.elec,
						A2(
						$ianmackenzie$elm_units$Quantity$multiplyBy,
						$ianmackenzie$elm_units$Mass$inKilograms(baseMass),
						nonIroningProcess.elec)
					])));
		return {
			impacts: A2(
				$author$project$Data$Impact$mapImpacts,
				F2(
					function (trigram, _v1) {
						return $ianmackenzie$elm_units$Quantity$sum(
							_List_fromArray(
								[
									A2(
									$author$project$Data$Unit$forKWh,
									A2($author$project$Data$Textile$Process$getImpact, trigram, countryElecProcess),
									totalEnergy),
									A2(
									$ianmackenzie$elm_units$Quantity$multiplyBy,
									useNbCycles,
									A2($author$project$Data$Textile$Process$getImpact, trigram, ironingProcess)),
									A2(
									$ianmackenzie$elm_units$Quantity$multiplyBy,
									useNbCycles,
									A2(
										$author$project$Data$Unit$forKg,
										A2($author$project$Data$Textile$Process$getImpact, trigram, nonIroningProcess),
										baseMass))
								]));
					}),
				impacts),
			kwh: totalEnergy
		};
	});
var $author$project$Data$Textile$Simulator$computeUseImpacts = function (simulator) {
	var inputs = simulator.inputs;
	var useNbCycles = simulator.useNbCycles;
	return A3(
		$author$project$Data$Textile$Simulator$updateLifeCycleStep,
		$author$project$Data$Textile$Step$Label$Use,
		function (step) {
			var country = step.country;
			var _v0 = A3(
				$author$project$Data$Textile$Formula$useImpacts,
				step.impacts,
				{countryElecProcess: country.electricityProcess, ironingProcess: inputs.product.use.ironingProcess, nonIroningProcess: inputs.product.use.nonIroningProcess, useNbCycles: useNbCycles},
				step.outputMass);
			var kwh = _v0.kwh;
			var impacts = _v0.impacts;
			return _Utils_update(
				step,
				{impacts: impacts, kwh: kwh});
		},
		simulator);
};
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $ianmackenzie$elm_units$Duration$inSeconds = function (_v0) {
	var numSeconds = _v0.a;
	return numSeconds;
};
var $ianmackenzie$elm_units$Duration$inDays = function (duration) {
	return $ianmackenzie$elm_units$Duration$inSeconds(duration) / $ianmackenzie$elm_units$Constants$day;
};
var $author$project$Data$Unit$standardQuality = $author$project$Data$Unit$Quality(1);
var $author$project$Data$Unit$standardReparability = $author$project$Data$Unit$minReparability;
var $author$project$Data$Textile$Product$customDaysOfWear = F3(
	function (maybeQuality, maybeReparability, _v0) {
		var daysOfWear = _v0.daysOfWear;
		var wearsPerCycle = _v0.wearsPerCycle;
		var _v1 = _Utils_Tuple2(
			A2($elm$core$Maybe$withDefault, $author$project$Data$Unit$standardQuality, maybeQuality),
			A2($elm$core$Maybe$withDefault, $author$project$Data$Unit$standardReparability, maybeReparability));
		var quality = _v1.a;
		var reparability = _v1.b;
		var newDaysOfWear = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			$author$project$Data$Unit$reparabilityToFloat(reparability),
			A2(
				$ianmackenzie$elm_units$Quantity$multiplyBy,
				$author$project$Data$Unit$qualityToFloat(quality),
				daysOfWear));
		return {
			daysOfWear: newDaysOfWear,
			useNbCycles: $elm$core$Basics$round(
				$ianmackenzie$elm_units$Duration$inDays(newDaysOfWear) / A3($elm$core$Basics$clamp, 1, wearsPerCycle, wearsPerCycle))
		};
	});
var $author$project$Data$Textile$Inputs$Inputs = function (mass) {
	return function (materials) {
		return function (product) {
			return function (countryMaterial) {
				return function (countrySpinning) {
					return function (countryFabric) {
						return function (countryDyeing) {
							return function (countryMaking) {
								return function (countryDistribution) {
									return function (countryUse) {
										return function (countryEndOfLife) {
											return function (dyeingWeighting) {
												return function (airTransportRatio) {
													return function (quality) {
														return function (reparability) {
															return function (makingWaste) {
																return function (picking) {
																	return function (surfaceMass) {
																		return function (disabledSteps) {
																			return function (disabledFading) {
																				return {airTransportRatio: airTransportRatio, countryDistribution: countryDistribution, countryDyeing: countryDyeing, countryEndOfLife: countryEndOfLife, countryFabric: countryFabric, countryMaking: countryMaking, countryMaterial: countryMaterial, countrySpinning: countrySpinning, countryUse: countryUse, disabledFading: disabledFading, disabledSteps: disabledSteps, dyeingWeighting: dyeingWeighting, makingWaste: makingWaste, mass: mass, materials: materials, picking: picking, product: product, quality: quality, reparability: reparability, surfaceMass: surfaceMass};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Data$Country$findByCode = function (code) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$List$filter(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.code;
				},
				$elm$core$Basics$eq(code))),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$head,
			$elm$core$Result$fromMaybe(
				'Code pays invalide: ' + ($author$project$Data$Country$codeToString(code) + '.'))));
};
var $author$project$Data$Textile$Product$findById = function (id) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$List$filter(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.id;
				},
				$elm$core$Basics$eq(id))),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$head,
			$elm$core$Result$fromMaybe(
				'Produit non trouvé id=' + ($author$project$Data$Textile$Product$idToString(id) + '.'))));
};
var $elm$core$List$sortBy = _List_sortBy;
var $author$project$Data$Textile$Inputs$getMainMaterial = A2(
	$elm$core$Basics$composeR,
	$elm$core$List$sortBy(
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.share;
			},
			$author$project$Data$Unit$ratioToFloat)),
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$reverse,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$head,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Maybe$map(
					function ($) {
						return $.material;
					}),
				$elm$core$Result$fromMaybe('La liste de matières est vide.')))));
var $author$project$Data$Textile$Inputs$getMainMaterialCountry = function (countries) {
	return A2(
		$elm$core$Basics$composeR,
		$author$project$Data$Textile$Inputs$getMainMaterial,
		$elm$core$Result$andThen(
			function (_v0) {
				var defaultCountry = _v0.defaultCountry;
				return A2($author$project$Data$Country$findByCode, defaultCountry, countries);
			}));
};
var $author$project$Data$Textile$Inputs$toMaterialInputs = function (materials) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$List$map(
			function (_v0) {
				var id = _v0.id;
				var share = _v0.share;
				return A2(
					$elm$core$Result$map,
					function (material_) {
						return {material: material_, share: share};
					},
					A2($author$project$Data$Textile$Material$findById, id, materials));
			}),
		$elm_community$result_extra$Result$Extra$combine);
};
var $author$project$Data$Textile$Inputs$fromQuery = F2(
	function (db, query) {
		var materials = A2($author$project$Data$Textile$Inputs$toMaterialInputs, db.materials, query.materials);
		var mainMaterialCountry = A2(
			$elm$core$Result$andThen,
			$author$project$Data$Textile$Inputs$getMainMaterialCountry(db.countries),
			materials);
		var franceResult = A2(
			$author$project$Data$Country$findByCode,
			$author$project$Data$Country$Code('FR'),
			db.countries);
		return A2(
			$elm_community$result_extra$Result$Extra$andMap,
			$elm$core$Result$Ok(query.disabledFading),
			A2(
				$elm_community$result_extra$Result$Extra$andMap,
				$elm$core$Result$Ok(query.disabledSteps),
				A2(
					$elm_community$result_extra$Result$Extra$andMap,
					$elm$core$Result$Ok(query.surfaceMass),
					A2(
						$elm_community$result_extra$Result$Extra$andMap,
						$elm$core$Result$Ok(query.picking),
						A2(
							$elm_community$result_extra$Result$Extra$andMap,
							$elm$core$Result$Ok(query.makingWaste),
							A2(
								$elm_community$result_extra$Result$Extra$andMap,
								$elm$core$Result$Ok(query.reparability),
								A2(
									$elm_community$result_extra$Result$Extra$andMap,
									$elm$core$Result$Ok(query.quality),
									A2(
										$elm_community$result_extra$Result$Extra$andMap,
										$elm$core$Result$Ok(query.airTransportRatio),
										A2(
											$elm_community$result_extra$Result$Extra$andMap,
											$elm$core$Result$Ok(query.dyeingWeighting),
											A2(
												$elm_community$result_extra$Result$Extra$andMap,
												franceResult,
												A2(
													$elm_community$result_extra$Result$Extra$andMap,
													franceResult,
													A2(
														$elm_community$result_extra$Result$Extra$andMap,
														franceResult,
														A2(
															$elm_community$result_extra$Result$Extra$andMap,
															A2($author$project$Data$Country$findByCode, query.countryMaking, db.countries),
															A2(
																$elm_community$result_extra$Result$Extra$andMap,
																A2($author$project$Data$Country$findByCode, query.countryDyeing, db.countries),
																A2(
																	$elm_community$result_extra$Result$Extra$andMap,
																	A2($author$project$Data$Country$findByCode, query.countryFabric, db.countries),
																	A2(
																		$elm_community$result_extra$Result$Extra$andMap,
																		function () {
																			var _v0 = query.countrySpinning;
																			if (_v0.$ === 'Just') {
																				var spinningCountryCode = _v0.a;
																				return A2($author$project$Data$Country$findByCode, spinningCountryCode, db.countries);
																			} else {
																				return mainMaterialCountry;
																			}
																		}(),
																		A2(
																			$elm_community$result_extra$Result$Extra$andMap,
																			mainMaterialCountry,
																			A2(
																				$elm_community$result_extra$Result$Extra$andMap,
																				A2($author$project$Data$Textile$Product$findById, query.product, db.products),
																				A2(
																					$elm_community$result_extra$Result$Extra$andMap,
																					materials,
																					A2(
																						$elm_community$result_extra$Result$Extra$andMap,
																						$elm$core$Result$Ok(query.mass),
																						$elm$core$Result$Ok($author$project$Data$Textile$Inputs$Inputs)))))))))))))))))))));
	});
var $author$project$Data$Textile$Inputs$countryList = function (inputs) {
	return _List_fromArray(
		[inputs.countryMaterial, inputs.countrySpinning, inputs.countryFabric, inputs.countryDyeing, inputs.countryMaking, inputs.countryDistribution, inputs.countryUse, inputs.countryEndOfLife]);
};
var $author$project$Data$Textile$Step$defaultProcessInfo = {airTransport: $elm$core$Maybe$Nothing, airTransportRatio: $elm$core$Maybe$Nothing, countryElec: $elm$core$Maybe$Nothing, countryHeat: $elm$core$Maybe$Nothing, distribution: $elm$core$Maybe$Nothing, dyeingWeighting: $elm$core$Maybe$Nothing, endOfLife: $elm$core$Maybe$Nothing, fabric: $elm$core$Maybe$Nothing, fading: $elm$core$Maybe$Nothing, making: $elm$core$Maybe$Nothing, passengerCar: $elm$core$Maybe$Nothing, roadTransport: $elm$core$Maybe$Nothing, seaTransport: $elm$core$Maybe$Nothing, useIroning: $elm$core$Maybe$Nothing, useNonIroning: $elm$core$Maybe$Nothing};
var $author$project$Data$Textile$Step$create = function (_v0) {
	var db = _v0.db;
	var label = _v0.label;
	var editable = _v0.editable;
	var country = _v0.country;
	var enabled = _v0.enabled;
	var defaultImpacts = $author$project$Data$Impact$impactsFromDefinitons(db.impacts);
	return {
		airTransportRatio: $author$project$Data$Unit$ratio(0),
		country: country,
		dyeingWeighting: country.dyeingWeighting,
		editable: editable,
		enabled: enabled,
		heat: $ianmackenzie$elm_units$Quantity$zero,
		impacts: defaultImpacts,
		inputMass: $ianmackenzie$elm_units$Quantity$zero,
		kwh: $ianmackenzie$elm_units$Quantity$zero,
		label: label,
		makingWaste: $elm$core$Maybe$Nothing,
		outputMass: $ianmackenzie$elm_units$Quantity$zero,
		picking: $elm$core$Maybe$Nothing,
		processInfo: $author$project$Data$Textile$Step$defaultProcessInfo,
		quality: $author$project$Data$Unit$standardQuality,
		reparability: $author$project$Data$Unit$standardReparability,
		surfaceMass: $elm$core$Maybe$Nothing,
		transport: $author$project$Data$Transport$default(defaultImpacts),
		waste: $ianmackenzie$elm_units$Quantity$zero
	};
};
var $author$project$Data$Textile$Step$airTransportRatioToString = function (_v0) {
	var airTransportRatio = _v0.a;
	var _v1 = $elm$core$Basics$round(airTransportRatio * 100);
	if (!_v1) {
		return 'Aucun transport aérien';
	} else {
		var p = _v1;
		return $elm$core$String$fromInt(p) + '% de transport aérien';
	}
};
var $author$project$Data$Textile$Step$dyeingWeightingToString = function (_v0) {
	var dyeingWeighting = _v0.a;
	var _v1 = $elm$core$Basics$round(dyeingWeighting * 100);
	if (!_v1) {
		return 'Procédé représentatif';
	} else {
		var p = _v1;
		return 'Procédé ' + ($elm$core$String$fromInt(p) + '% majorant');
	}
};
var $author$project$Data$Textile$Step$updateFromInputs = F3(
	function (_v0, inputs, step) {
		var processes = _v0.processes;
		var label = step.label;
		var country = step.country;
		var _v1 = inputs;
		var dyeingWeighting = _v1.dyeingWeighting;
		var airTransportRatio = _v1.airTransportRatio;
		var quality = _v1.quality;
		var reparability = _v1.reparability;
		var makingWaste = _v1.makingWaste;
		var picking = _v1.picking;
		var surfaceMass = _v1.surfaceMass;
		switch (label.$) {
			case 'Spinning':
				return _Utils_update(
					step,
					{
						processInfo: _Utils_update(
							$author$project$Data$Textile$Step$defaultProcessInfo,
							{
								countryElec: $elm$core$Maybe$Just(country.electricityProcess.name)
							})
					});
			case 'Fabric':
				return _Utils_update(
					step,
					{
						picking: picking,
						processInfo: _Utils_update(
							$author$project$Data$Textile$Step$defaultProcessInfo,
							{
								countryElec: $elm$core$Maybe$Just(country.electricityProcess.name),
								fabric: $elm$core$Maybe$Just(
									$author$project$Data$Textile$Product$getFabricProcess(inputs.product).name)
							}),
						surfaceMass: surfaceMass
					});
			case 'Dyeing':
				return _Utils_update(
					step,
					{
						dyeingWeighting: A2($elm$core$Maybe$withDefault, country.dyeingWeighting, dyeingWeighting),
						processInfo: _Utils_update(
							$author$project$Data$Textile$Step$defaultProcessInfo,
							{
								countryElec: $elm$core$Maybe$Just(country.electricityProcess.name),
								countryHeat: $elm$core$Maybe$Just(country.heatProcess.name),
								dyeingWeighting: $elm$core$Maybe$Just(
									$author$project$Data$Textile$Step$dyeingWeightingToString(country.dyeingWeighting))
							})
					});
			case 'Making':
				return _Utils_update(
					step,
					{
						airTransportRatio: A2($elm$core$Maybe$withDefault, country.airTransportRatio, airTransportRatio),
						makingWaste: makingWaste,
						processInfo: _Utils_update(
							$author$project$Data$Textile$Step$defaultProcessInfo,
							{
								airTransportRatio: $elm$core$Maybe$Just(
									$author$project$Data$Textile$Step$airTransportRatioToString(country.airTransportRatio)),
								countryElec: $elm$core$Maybe$Just(country.electricityProcess.name),
								fading: inputs.product.making.fadable ? $elm$core$Result$toMaybe(
									A2(
										$elm$core$Result$map,
										A2(
											$elm$core$Basics$composeR,
											function ($) {
												return $.fading;
											},
											function ($) {
												return $.name;
											}),
										$author$project$Data$Textile$Process$loadWellKnown(processes))) : $elm$core$Maybe$Nothing,
								making: $elm$core$Maybe$Just(inputs.product.making.process.name)
							})
					});
			case 'Distribution':
				return A2(
					$elm$core$Result$withDefault,
					step,
					A2(
						$elm$core$Result$map,
						function (_v3) {
							var distribution = _v3.distribution;
							return _Utils_update(
								step,
								{
									processInfo: _Utils_update(
										$author$project$Data$Textile$Step$defaultProcessInfo,
										{
											distribution: $elm$core$Maybe$Just(distribution.name)
										})
								});
						},
						$author$project$Data$Textile$Process$loadWellKnown(processes)));
			case 'Use':
				return _Utils_update(
					step,
					{
						processInfo: _Utils_update(
							$author$project$Data$Textile$Step$defaultProcessInfo,
							{
								countryElec: $elm$core$Maybe$Just(country.electricityProcess.name),
								useIroning: $elm$core$Maybe$Just(inputs.product.use.ironingProcess.name),
								useNonIroning: $elm$core$Maybe$Just(inputs.product.use.nonIroningProcess.name)
							}),
						quality: A2($elm$core$Maybe$withDefault, $author$project$Data$Unit$standardQuality, quality),
						reparability: A2($elm$core$Maybe$withDefault, $author$project$Data$Unit$standardReparability, reparability)
					});
			case 'EndOfLife':
				var newProcessInfo = _Utils_update(
					$author$project$Data$Textile$Step$defaultProcessInfo,
					{
						countryElec: $elm$core$Maybe$Just(country.electricityProcess.name),
						countryHeat: $elm$core$Maybe$Just(country.heatProcess.name)
					});
				return A2(
					$elm$core$Result$withDefault,
					_Utils_update(
						step,
						{processInfo: newProcessInfo}),
					A2(
						$elm$core$Result$map,
						function (_v4) {
							var endOfLife = _v4.endOfLife;
							return _Utils_update(
								step,
								{
									processInfo: _Utils_update(
										newProcessInfo,
										{
											endOfLife: $elm$core$Maybe$Just(endOfLife.name),
											passengerCar: $elm$core$Maybe$Just('Transport en voiture vers point de collecte (1km)')
										})
								});
						},
						$author$project$Data$Textile$Process$loadWellKnown(processes)));
			default:
				return step;
		}
	});
var $author$project$Data$Textile$LifeCycle$init = F2(
	function (db, inputs) {
		return $elm$core$Array$fromList(
			A2(
				$elm$core$List$map,
				A2($author$project$Data$Textile$Step$updateFromInputs, db, inputs),
				A3(
					$elm$core$List$map2,
					F2(
						function (_v0, country) {
							var label = _v0.a;
							var editable = _v0.b;
							return $author$project$Data$Textile$Step$create(
								{
									country: country,
									db: db,
									editable: editable,
									enabled: !A2($elm$core$List$member, label, inputs.disabledSteps),
									label: label
								});
						}),
					_List_fromArray(
						[
							_Utils_Tuple2($author$project$Data$Textile$Step$Label$Material, false),
							_Utils_Tuple2($author$project$Data$Textile$Step$Label$Spinning, true),
							_Utils_Tuple2($author$project$Data$Textile$Step$Label$Fabric, true),
							_Utils_Tuple2($author$project$Data$Textile$Step$Label$Dyeing, true),
							_Utils_Tuple2($author$project$Data$Textile$Step$Label$Making, true),
							_Utils_Tuple2($author$project$Data$Textile$Step$Label$Distribution, false),
							_Utils_Tuple2($author$project$Data$Textile$Step$Label$Use, false),
							_Utils_Tuple2($author$project$Data$Textile$Step$Label$EndOfLife, false)
						]),
					$author$project$Data$Textile$Inputs$countryList(inputs))));
	});
var $author$project$Data$Textile$Simulator$init = function (db) {
	var defaultImpacts = $author$project$Data$Impact$impactsFromDefinitons(db.impacts);
	return A2(
		$elm$core$Basics$composeR,
		$author$project$Data$Textile$Inputs$fromQuery(db),
		$elm$core$Result$map(
			function (inputs) {
				var product = inputs.product;
				var quality = inputs.quality;
				var reparability = inputs.reparability;
				return function (lifeCycle) {
					var _v0 = A3($author$project$Data$Textile$Product$customDaysOfWear, quality, reparability, product.use);
					var daysOfWear = _v0.daysOfWear;
					var useNbCycles = _v0.useNbCycles;
					return {
						daysOfWear: daysOfWear,
						impacts: defaultImpacts,
						inputs: inputs,
						lifeCycle: lifeCycle,
						transport: $author$project$Data$Transport$default(defaultImpacts),
						useNbCycles: useNbCycles
					};
				}(
					A2($author$project$Data$Textile$LifeCycle$init, db, inputs));
			}));
};
var $author$project$Data$Textile$Step$Label$all = _List_fromArray(
	[$author$project$Data$Textile$Step$Label$Material, $author$project$Data$Textile$Step$Label$Spinning, $author$project$Data$Textile$Step$Label$Fabric, $author$project$Data$Textile$Step$Label$Dyeing, $author$project$Data$Textile$Step$Label$Making, $author$project$Data$Textile$Step$Label$Distribution, $author$project$Data$Textile$Step$Label$Use, $author$project$Data$Textile$Step$Label$EndOfLife]);
var $author$project$Data$Textile$Simulator$initializeFinalMass = function (simulator) {
	var inputs = simulator.inputs;
	return A3(
		$author$project$Data$Textile$Simulator$updateLifeCycleSteps,
		$author$project$Data$Textile$Step$Label$all,
		$author$project$Data$Textile$Step$initMass(inputs.mass),
		simulator);
};
var $author$project$Data$Textile$Simulator$compute = F2(
	function (db, query) {
		var nextWithDb = function (fn) {
			return $elm$core$Result$andThen(
				fn(db));
		};
		var nextWithDbIf = F2(
			function (label, fn) {
				return (!A2($elm$core$List$member, label, query.disabledSteps)) ? nextWithDb(fn) : $elm$core$Basics$identity;
			});
		var next = function (fn) {
			return $elm$core$Result$map(fn);
		};
		var nextIf = F2(
			function (label, fn) {
				return (!A2($elm$core$List$member, label, query.disabledSteps)) ? next(fn) : $elm$core$Basics$identity;
			});
		return A2(
			next,
			$author$project$Data$Textile$Simulator$computeFinalImpacts(db),
			A2(
				next,
				$author$project$Data$Textile$Simulator$computePefScores(db),
				A2(
					next,
					$author$project$Data$Textile$Simulator$computeTotalTransportImpacts(db),
					A2(
						nextWithDb,
						$author$project$Data$Textile$Simulator$computeStepsTransport,
						A3(
							nextWithDbIf,
							$author$project$Data$Textile$Step$Label$EndOfLife,
							$author$project$Data$Textile$Simulator$computeEndOfLifeImpacts,
							A3(
								nextIf,
								$author$project$Data$Textile$Step$Label$Use,
								$author$project$Data$Textile$Simulator$computeUseImpacts,
								A3(
									nextWithDbIf,
									$author$project$Data$Textile$Step$Label$Making,
									$author$project$Data$Textile$Simulator$computeMakingImpacts,
									A3(
										nextWithDbIf,
										$author$project$Data$Textile$Step$Label$Dyeing,
										$author$project$Data$Textile$Simulator$computeDyeingImpacts,
										A3(
											nextIf,
											$author$project$Data$Textile$Step$Label$Fabric,
											$author$project$Data$Textile$Simulator$computeFabricImpacts,
											A3(
												nextIf,
												$author$project$Data$Textile$Step$Label$Spinning,
												$author$project$Data$Textile$Simulator$computeSpinningImpacts(db),
												A3(
													nextIf,
													$author$project$Data$Textile$Step$Label$Material,
													$author$project$Data$Textile$Simulator$computeMaterialImpacts(db),
													A3(
														nextIf,
														$author$project$Data$Textile$Step$Label$Material,
														$author$project$Data$Textile$Simulator$computeMaterialStepWaste,
														A3(
															nextIf,
															$author$project$Data$Textile$Step$Label$Spinning,
															$author$project$Data$Textile$Simulator$computeSpinningStepWaste,
															A3(
																nextIf,
																$author$project$Data$Textile$Step$Label$Fabric,
																$author$project$Data$Textile$Simulator$computeFabricStepWaste,
																A3(
																	nextIf,
																	$author$project$Data$Textile$Step$Label$Making,
																	$author$project$Data$Textile$Simulator$computeMakingStepWaste,
																	A2(
																		next,
																		$author$project$Data$Textile$Simulator$initializeFinalMass,
																		A2($author$project$Data$Textile$Simulator$init, db, query)))))))))))))))));
	});
var $author$project$Data$Textile$Inputs$toMaterialQuery = $elm$core$List$map(
	function (_v0) {
		var material = _v0.material;
		var share = _v0.share;
		return {id: material.id, share: share};
	});
var $author$project$Data$Textile$Inputs$toQuery = function (inputs) {
	return {
		airTransportRatio: inputs.airTransportRatio,
		countryDyeing: inputs.countryDyeing.code,
		countryFabric: inputs.countryFabric.code,
		countryMaking: inputs.countryMaking.code,
		countrySpinning: _Utils_eq(
			A2(
				$elm$core$Result$map,
				function ($) {
					return $.defaultCountry;
				},
				$author$project$Data$Textile$Inputs$getMainMaterial(inputs.materials)),
			$elm$core$Result$Ok(inputs.countrySpinning.code)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(inputs.countrySpinning.code),
		disabledFading: inputs.disabledFading,
		disabledSteps: inputs.disabledSteps,
		dyeingWeighting: inputs.dyeingWeighting,
		makingWaste: inputs.makingWaste,
		mass: inputs.mass,
		materials: $author$project$Data$Textile$Inputs$toMaterialQuery(inputs.materials),
		picking: inputs.picking,
		product: inputs.product.id,
		quality: inputs.quality,
		reparability: inputs.reparability,
		surfaceMass: inputs.surfaceMass
	};
};
var $author$project$Views$Format$ratioToPercentString = function (value) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(
			100 * $author$project$Data$Unit$ratioToFloat(value))) + '\u202F%';
};
var $author$project$Data$Textile$Inputs$dyeingOptionsToString = function (maybeRatio) {
	if (maybeRatio.$ === 'Nothing') {
		return ' (procédé représentatif)';
	} else {
		var ratio = maybeRatio.a;
		return (!$author$project$Data$Unit$ratioToFloat(ratio)) ? ' (procédé représentatif)' : function (percent) {
			return ' (procédé ' + (percent + ' majorant)');
		}(
			$author$project$Views$Format$ratioToPercentString(ratio));
	}
};
var $cuducos$elm_format_number$FormatNumber$Locales$Exact = function (a) {
	return {$: 'Exact', a: a};
};
var $chain_partners$elm_bignum$Decimal$Sci = {$: 'Sci'};
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $cuducos$elm_format_number$FormatNumber$Parser$FormattedNumber = F5(
	function (original, integers, decimals, prefix, suffix) {
		return {decimals: decimals, integers: integers, original: original, prefix: prefix, suffix: suffix};
	});
var $cuducos$elm_format_number$FormatNumber$Parser$Negative = {$: 'Negative'};
var $cuducos$elm_format_number$FormatNumber$Parser$Positive = {$: 'Positive'};
var $cuducos$elm_format_number$FormatNumber$Parser$Zero = {$: 'Zero'};
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $cuducos$elm_format_number$FormatNumber$Parser$classify = function (formatted) {
	var onlyZeros = A2(
		$elm$core$String$all,
		function (_char) {
			return _Utils_eq(
				_char,
				_Utils_chr('0'));
		},
		$elm$core$String$concat(
			A2(
				$elm$core$List$append,
				formatted.integers,
				$elm$core$List$singleton(formatted.decimals))));
	return onlyZeros ? $cuducos$elm_format_number$FormatNumber$Parser$Zero : ((formatted.original < 0) ? $cuducos$elm_format_number$FormatNumber$Parser$Negative : $cuducos$elm_format_number$FormatNumber$Parser$Positive);
};
var $elm$core$String$filter = _String_filter;
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $cuducos$elm_format_number$FormatNumber$Parser$addZerosToFit = F2(
	function (desiredLength, value) {
		var length = $elm$core$String$length(value);
		var missing = (_Utils_cmp(length, desiredLength) < 0) ? $elm$core$Basics$abs(desiredLength - length) : 0;
		return _Utils_ap(
			value,
			A2($elm$core$String$repeat, missing, '0'));
	});
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $cuducos$elm_format_number$FormatNumber$Parser$removeZeros = function (decimals) {
	return (A2($elm$core$String$right, 1, decimals) !== '0') ? decimals : $cuducos$elm_format_number$FormatNumber$Parser$removeZeros(
		A2($elm$core$String$dropRight, 1, decimals));
};
var $cuducos$elm_format_number$FormatNumber$Parser$getDecimals = F2(
	function (locale, digits) {
		var _v0 = locale.decimals;
		switch (_v0.$) {
			case 'Max':
				return $cuducos$elm_format_number$FormatNumber$Parser$removeZeros(digits);
			case 'Exact':
				return digits;
			default:
				var min = _v0.a;
				return A2($cuducos$elm_format_number$FormatNumber$Parser$addZerosToFit, min, digits);
		}
	});
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $myrho$elm_round$Round$addSign = F2(
	function (signed, str) {
		var isNotZero = A2(
			$elm$core$List$any,
			function (c) {
				return (!_Utils_eq(
					c,
					_Utils_chr('0'))) && (!_Utils_eq(
					c,
					_Utils_chr('.')));
			},
			$elm$core$String$toList(str));
		return _Utils_ap(
			(signed && isNotZero) ? '-' : '',
			str);
	});
var $myrho$elm_round$Round$increaseNum = function (_v0) {
	var head = _v0.a;
	var tail = _v0.b;
	if (_Utils_eq(
		head,
		_Utils_chr('9'))) {
		var _v1 = $elm$core$String$uncons(tail);
		if (_v1.$ === 'Nothing') {
			return '01';
		} else {
			var headtail = _v1.a;
			return A2(
				$elm$core$String$cons,
				_Utils_chr('0'),
				$myrho$elm_round$Round$increaseNum(headtail));
		}
	} else {
		var c = $elm$core$Char$toCode(head);
		return ((c >= 48) && (c < 57)) ? A2(
			$elm$core$String$cons,
			$elm$core$Char$fromCode(c + 1),
			tail) : '0';
	}
};
var $elm$core$Basics$isInfinite = _Basics_isInfinite;
var $elm$core$Basics$isNaN = _Basics_isNaN;
var $elm$core$String$padRight = F3(
	function (n, _char, string) {
		return _Utils_ap(
			string,
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)));
	});
var $elm$core$String$reverse = _String_reverse;
var $myrho$elm_round$Round$splitComma = function (str) {
	var _v0 = A2($elm$core$String$split, '.', str);
	if (_v0.b) {
		if (_v0.b.b) {
			var before = _v0.a;
			var _v1 = _v0.b;
			var after = _v1.a;
			return _Utils_Tuple2(before, after);
		} else {
			var before = _v0.a;
			return _Utils_Tuple2(before, '0');
		}
	} else {
		return _Utils_Tuple2('0', '0');
	}
};
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $myrho$elm_round$Round$toDecimal = function (fl) {
	var _v0 = A2(
		$elm$core$String$split,
		'e',
		$elm$core$String$fromFloat(
			$elm$core$Basics$abs(fl)));
	if (_v0.b) {
		if (_v0.b.b) {
			var num = _v0.a;
			var _v1 = _v0.b;
			var exp = _v1.a;
			var e = A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(
					A2($elm$core$String$startsWith, '+', exp) ? A2($elm$core$String$dropLeft, 1, exp) : exp));
			var _v2 = $myrho$elm_round$Round$splitComma(num);
			var before = _v2.a;
			var after = _v2.b;
			var total = _Utils_ap(before, after);
			var zeroed = (e < 0) ? A2(
				$elm$core$Maybe$withDefault,
				'0',
				A2(
					$elm$core$Maybe$map,
					function (_v3) {
						var a = _v3.a;
						var b = _v3.b;
						return a + ('.' + b);
					},
					A2(
						$elm$core$Maybe$map,
						$elm$core$Tuple$mapFirst($elm$core$String$fromChar),
						$elm$core$String$uncons(
							_Utils_ap(
								A2(
									$elm$core$String$repeat,
									$elm$core$Basics$abs(e),
									'0'),
								total))))) : A3(
				$elm$core$String$padRight,
				e + 1,
				_Utils_chr('0'),
				total);
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				zeroed);
		} else {
			var num = _v0.a;
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				num);
		}
	} else {
		return '';
	}
};
var $myrho$elm_round$Round$roundFun = F3(
	function (functor, s, fl) {
		if ($elm$core$Basics$isInfinite(fl) || $elm$core$Basics$isNaN(fl)) {
			return $elm$core$String$fromFloat(fl);
		} else {
			var signed = fl < 0;
			var _v0 = $myrho$elm_round$Round$splitComma(
				$myrho$elm_round$Round$toDecimal(
					$elm$core$Basics$abs(fl)));
			var before = _v0.a;
			var after = _v0.b;
			var r = $elm$core$String$length(before) + s;
			var normalized = _Utils_ap(
				A2($elm$core$String$repeat, (-r) + 1, '0'),
				A3(
					$elm$core$String$padRight,
					r,
					_Utils_chr('0'),
					_Utils_ap(before, after)));
			var totalLen = $elm$core$String$length(normalized);
			var roundDigitIndex = A2($elm$core$Basics$max, 1, r);
			var increase = A2(
				functor,
				signed,
				A3($elm$core$String$slice, roundDigitIndex, totalLen, normalized));
			var remains = A3($elm$core$String$slice, 0, roundDigitIndex, normalized);
			var num = increase ? $elm$core$String$reverse(
				A2(
					$elm$core$Maybe$withDefault,
					'1',
					A2(
						$elm$core$Maybe$map,
						$myrho$elm_round$Round$increaseNum,
						$elm$core$String$uncons(
							$elm$core$String$reverse(remains))))) : remains;
			var numLen = $elm$core$String$length(num);
			var numZeroed = (num === '0') ? num : ((s <= 0) ? _Utils_ap(
				num,
				A2(
					$elm$core$String$repeat,
					$elm$core$Basics$abs(s),
					'0')) : ((_Utils_cmp(
				s,
				$elm$core$String$length(after)) < 0) ? (A3($elm$core$String$slice, 0, numLen - s, num) + ('.' + A3($elm$core$String$slice, numLen - s, numLen, num))) : _Utils_ap(
				before + '.',
				A3(
					$elm$core$String$padRight,
					s,
					_Utils_chr('0'),
					after))));
			return A2($myrho$elm_round$Round$addSign, signed, numZeroed);
		}
	});
var $myrho$elm_round$Round$round = $myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _v0 = $elm$core$String$uncons(str);
			if (_v0.$ === 'Nothing') {
				return false;
			} else {
				if ('5' === _v0.a.a.valueOf()) {
					if (_v0.a.b === '') {
						var _v1 = _v0.a;
						return !signed;
					} else {
						var _v2 = _v0.a;
						return true;
					}
				} else {
					var _v3 = _v0.a;
					var _int = _v3.a;
					return function (i) {
						return ((i > 53) && signed) || ((i >= 53) && (!signed));
					}(
						$elm$core$Char$toCode(_int));
				}
			}
		}));
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $cuducos$elm_format_number$FormatNumber$Parser$splitInParts = F2(
	function (locale, value) {
		var toString = function () {
			var _v1 = locale.decimals;
			switch (_v1.$) {
				case 'Max':
					var max = _v1.a;
					return $myrho$elm_round$Round$round(max);
				case 'Min':
					return $elm$core$String$fromFloat;
				default:
					var exact = _v1.a;
					return $myrho$elm_round$Round$round(exact);
			}
		}();
		var asList = A2(
			$elm$core$String$split,
			'.',
			toString(value));
		var decimals = function () {
			var _v0 = $elm$core$List$tail(asList);
			if (_v0.$ === 'Just') {
				var values = _v0.a;
				return A2(
					$elm$core$Maybe$withDefault,
					'',
					$elm$core$List$head(values));
			} else {
				return '';
			}
		}();
		var integers = A2(
			$elm$core$Maybe$withDefault,
			'',
			$elm$core$List$head(asList));
		return _Utils_Tuple2(integers, decimals);
	});
var $cuducos$elm_format_number$FormatNumber$Parser$splitThousands = function (integers) {
	var reversedSplitThousands = function (value) {
		return ($elm$core$String$length(value) > 3) ? A2(
			$elm$core$List$cons,
			A2($elm$core$String$right, 3, value),
			reversedSplitThousands(
				A2($elm$core$String$dropRight, 3, value))) : _List_fromArray(
			[value]);
	};
	return $elm$core$List$reverse(
		reversedSplitThousands(integers));
};
var $cuducos$elm_format_number$FormatNumber$Parser$parse = F2(
	function (locale, original) {
		var parts = A2($cuducos$elm_format_number$FormatNumber$Parser$splitInParts, locale, original);
		var integers = $cuducos$elm_format_number$FormatNumber$Parser$splitThousands(
			A2($elm$core$String$filter, $elm$core$Char$isDigit, parts.a));
		var decimals = A2($cuducos$elm_format_number$FormatNumber$Parser$getDecimals, locale, parts.b);
		var partial = A5($cuducos$elm_format_number$FormatNumber$Parser$FormattedNumber, original, integers, decimals, '', '');
		var _v0 = $cuducos$elm_format_number$FormatNumber$Parser$classify(partial);
		switch (_v0.$) {
			case 'Negative':
				return _Utils_update(
					partial,
					{prefix: locale.negativePrefix, suffix: locale.negativeSuffix});
			case 'Positive':
				return _Utils_update(
					partial,
					{prefix: locale.positivePrefix, suffix: locale.positiveSuffix});
			default:
				return _Utils_update(
					partial,
					{prefix: locale.zeroPrefix, suffix: locale.zeroSuffix});
		}
	});
var $cuducos$elm_format_number$FormatNumber$Stringfy$formatDecimals = F2(
	function (locale, decimals) {
		return (decimals === '') ? '' : _Utils_ap(locale.decimalSeparator, decimals);
	});
var $cuducos$elm_format_number$FormatNumber$Stringfy$stringfy = F2(
	function (locale, formatted) {
		var stringfyDecimals = $cuducos$elm_format_number$FormatNumber$Stringfy$formatDecimals(locale);
		var integers = A2($elm$core$String$join, locale.thousandSeparator, formatted.integers);
		var decimals = stringfyDecimals(formatted.decimals);
		return $elm$core$String$concat(
			_List_fromArray(
				[formatted.prefix, integers, decimals, formatted.suffix]));
	});
var $cuducos$elm_format_number$FormatNumber$format = F2(
	function (locale, number_) {
		return A2(
			$cuducos$elm_format_number$FormatNumber$Stringfy$stringfy,
			locale,
			A2($cuducos$elm_format_number$FormatNumber$Parser$parse, locale, number_));
	});
var $cuducos$elm_format_number$FormatNumber$Locales$Min = function (a) {
	return {$: 'Min', a: a};
};
var $cuducos$elm_format_number$FormatNumber$Locales$base = {
	decimalSeparator: '.',
	decimals: $cuducos$elm_format_number$FormatNumber$Locales$Min(0),
	negativePrefix: '−',
	negativeSuffix: '',
	positivePrefix: '',
	positiveSuffix: '',
	thousandSeparator: '',
	zeroPrefix: '',
	zeroSuffix: ''
};
var $cuducos$elm_format_number$FormatNumber$Locales$frenchLocale = _Utils_update(
	$cuducos$elm_format_number$FormatNumber$Locales$base,
	{
		decimalSeparator: ',',
		decimals: $cuducos$elm_format_number$FormatNumber$Locales$Exact(3),
		thousandSeparator: '\u202F'
	});
var $chain_partners$elm_bignum$Decimal$Decimal = F2(
	function (a, b) {
		return {$: 'Decimal', a: a, b: b};
	});
var $chain_partners$elm_bignum$Decimal$Zero = {$: 'Zero'};
var $chain_partners$elm_bignum$Decimal$decimalNotationRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^-?(\\d+\\.?\\d+|\\d+)$'));
var $chain_partners$elm_bignum$Integer$Integer = F2(
	function (a, b) {
		return {$: 'Integer', a: a, b: b};
	});
var $chain_partners$elm_bignum$Integer$Negative = {$: 'Negative'};
var $chain_partners$elm_bignum$Integer$Positive = {$: 'Positive'};
var $chain_partners$elm_bignum$Integer$Zero = {$: 'Zero'};
var $chain_partners$elm_bignum$Integer$isValidString = $elm$regex$Regex$contains(
	A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString('^-?\\d+$')));
var $chain_partners$elm_bignum$Integer$combine = A2(
	$elm$core$List$foldl,
	F2(
		function (x, acc) {
			if (x.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var i = x.a;
				return A2(
					$elm$core$Maybe$map,
					$elm$core$List$cons(i),
					acc);
			}
		}),
	$elm$core$Maybe$Just(_List_Nil));
var $chain_partners$elm_bignum$Integer$splitFromEndBy = F3(
	function (n, acc, s) {
		splitFromEndBy:
		while (true) {
			if (s === '') {
				return acc;
			} else {
				var rest = A2($elm$core$String$dropRight, n, s);
				var chunk = A2($elm$core$String$right, n, s);
				var $temp$n = n,
					$temp$acc = A2($elm$core$List$cons, chunk, acc),
					$temp$s = rest;
				n = $temp$n;
				acc = $temp$acc;
				s = $temp$s;
				continue splitFromEndBy;
			}
		}
	});
var $chain_partners$elm_bignum$Integer$magnitudeFromString = function (s) {
	return $chain_partners$elm_bignum$Integer$combine(
		A2(
			$elm$core$List$map,
			$elm$core$String$toInt,
			A3($chain_partners$elm_bignum$Integer$splitFromEndBy, 7, _List_Nil, s)));
};
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $chain_partners$elm_bignum$Integer$trimLeadingZeroFromStr = A2(
	$elm$regex$Regex$replace,
	A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString('^0*')),
	function (_v0) {
		return '';
	});
var $chain_partners$elm_bignum$Integer$fromString = function (s) {
	if ($chain_partners$elm_bignum$Integer$isValidString(s)) {
		var _v0 = A2($elm$core$String$startsWith, '-', s) ? _Utils_Tuple2(
			$chain_partners$elm_bignum$Integer$Negative,
			$chain_partners$elm_bignum$Integer$trimLeadingZeroFromStr(
				A2($elm$core$String$dropLeft, 1, s))) : _Utils_Tuple2(
			$chain_partners$elm_bignum$Integer$Positive,
			$chain_partners$elm_bignum$Integer$trimLeadingZeroFromStr(s));
		var sign = _v0.a;
		var num = _v0.b;
		return $elm$core$String$isEmpty(num) ? $elm$core$Maybe$Just($chain_partners$elm_bignum$Integer$Zero) : A2(
			$elm$core$Maybe$map,
			$chain_partners$elm_bignum$Integer$Integer(sign),
			$chain_partners$elm_bignum$Integer$magnitudeFromString(num));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $chain_partners$elm_bignum$Decimal$trimTrailingZero = A2(
	$elm$regex$Regex$replace,
	A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString('0*$')),
	function (_v0) {
		return '';
	});
var $chain_partners$elm_bignum$Decimal$fromDecimalNotation = F2(
	function (minE, s) {
		var _v0 = A2($elm$core$String$split, '.', s);
		_v0$2:
		while (true) {
			if (_v0.b) {
				if (!_v0.b.b) {
					var i = _v0.a;
					var trimmedSig = $chain_partners$elm_bignum$Decimal$trimTrailingZero(i);
					var e = $elm$core$String$length(i) - $elm$core$String$length(trimmedSig);
					return A3(
						$elm$core$Maybe$map2,
						$chain_partners$elm_bignum$Decimal$Decimal,
						$chain_partners$elm_bignum$Integer$fromString(trimmedSig),
						$elm$core$Maybe$Just(e));
				} else {
					if (!_v0.b.b.b) {
						var i = _v0.a;
						var _v1 = _v0.b;
						var f = _v1.a;
						var trimmedF = $chain_partners$elm_bignum$Decimal$trimTrailingZero(f);
						var f_ = A2($elm$core$String$left, -minE, trimmedF);
						var mbSig = $chain_partners$elm_bignum$Integer$fromString(
							_Utils_ap(i, f_));
						var e = -$elm$core$String$length(f_);
						return A3(
							$elm$core$Maybe$map2,
							$chain_partners$elm_bignum$Decimal$Decimal,
							mbSig,
							$elm$core$Maybe$Just(e));
					} else {
						break _v0$2;
					}
				}
			} else {
				break _v0$2;
			}
		}
		return $elm$core$Maybe$Nothing;
	});
var $chain_partners$elm_bignum$Decimal$fromScientificNotation = F2(
	function (minE, s) {
		var _v0 = A2(
			$elm$core$String$split,
			'e',
			$elm$core$String$toLower(s));
		if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
			var co = _v0.a;
			var _v1 = _v0.b;
			var exp = _v1.a;
			var _v2 = A2($elm$core$String$split, '.', co);
			_v2$2:
			while (true) {
				if (_v2.b) {
					if (!_v2.b.b) {
						var i = _v2.a;
						if ($elm$core$String$length(i) > 1) {
							return $elm$core$Maybe$Nothing;
						} else {
							var mbE = A2(
								$elm$core$Maybe$andThen,
								function (e) {
									return (_Utils_cmp(e, minE) < 0) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(e);
								},
								$elm$core$String$toInt(exp));
							return (i === '0') ? $elm$core$Maybe$Just($chain_partners$elm_bignum$Decimal$Zero) : A3(
								$elm$core$Maybe$map2,
								$chain_partners$elm_bignum$Decimal$Decimal,
								$chain_partners$elm_bignum$Integer$fromString(i),
								mbE);
						}
					} else {
						if (!_v2.b.b.b) {
							var i = _v2.a;
							var _v3 = _v2.b;
							var f = _v3.a;
							var mbE = A2(
								$elm$core$Maybe$andThen,
								function (e) {
									return (_Utils_cmp(e, minE) < 0) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(e);
								},
								A2(
									$elm$core$Maybe$map,
									function (e) {
										return e - $elm$core$String$length(f);
									},
									$elm$core$String$toInt(exp)));
							return A3(
								$elm$core$Maybe$map2,
								$chain_partners$elm_bignum$Decimal$Decimal,
								$chain_partners$elm_bignum$Integer$fromString(
									_Utils_ap(i, f)),
								mbE);
						} else {
							break _v2$2;
						}
					}
				} else {
					break _v2$2;
				}
			}
			return $elm$core$Maybe$Nothing;
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$Basics$pow = _Basics_pow;
var $chain_partners$elm_bignum$Integer$defaultBase = A2($elm$core$Basics$pow, 10, 7);
var $chain_partners$elm_bignum$Integer$magnitudeFromInt_ = F2(
	function (acc, i) {
		magnitudeFromInt_:
		while (true) {
			var q = (i / $chain_partners$elm_bignum$Integer$defaultBase) | 0;
			if (!q) {
				return $elm$core$List$reverse(
					A2($elm$core$List$cons, i, acc));
			} else {
				var $temp$acc = A2($elm$core$List$cons, i % $chain_partners$elm_bignum$Integer$defaultBase, acc),
					$temp$i = q;
				acc = $temp$acc;
				i = $temp$i;
				continue magnitudeFromInt_;
			}
		}
	});
var $chain_partners$elm_bignum$Integer$magnitudeFromInt = $chain_partners$elm_bignum$Integer$magnitudeFromInt_(_List_Nil);
var $chain_partners$elm_bignum$Integer$fromInt = function (i) {
	var _v0 = A2($elm$core$Basics$compare, i, 0);
	switch (_v0.$) {
		case 'GT':
			return A2(
				$chain_partners$elm_bignum$Integer$Integer,
				$chain_partners$elm_bignum$Integer$Positive,
				$chain_partners$elm_bignum$Integer$magnitudeFromInt(i));
		case 'EQ':
			return $chain_partners$elm_bignum$Integer$Zero;
		default:
			return A2(
				$chain_partners$elm_bignum$Integer$Integer,
				$chain_partners$elm_bignum$Integer$Negative,
				$chain_partners$elm_bignum$Integer$magnitudeFromInt(
					$elm$core$Basics$abs(i)));
	}
};
var $elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)),
			string);
	});
var $chain_partners$elm_bignum$Integer$toString = function (i) {
	if (i.$ === 'Zero') {
		return '0';
	} else {
		var s = i.a;
		var m = i.b;
		var sign = _Utils_eq(s, $chain_partners$elm_bignum$Integer$Negative) ? '-' : '';
		var num = $chain_partners$elm_bignum$Integer$trimLeadingZeroFromStr(
			A3(
				$elm$core$List$foldl,
				$elm$core$Basics$append,
				'',
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$fromInt,
						A2(
							$elm$core$String$padLeft,
							7,
							_Utils_chr('0'))),
					m)));
		return _Utils_ap(sign, num);
	}
};
var $chain_partners$elm_bignum$Integer$zero = $chain_partners$elm_bignum$Integer$Zero;
var $chain_partners$elm_bignum$Decimal$sigExpFromInteger = function (i) {
	var s_ = $chain_partners$elm_bignum$Decimal$trimTrailingZero(
		$chain_partners$elm_bignum$Integer$toString(i));
	var s = $chain_partners$elm_bignum$Integer$toString(i);
	var i_ = A2(
		$elm$core$Maybe$withDefault,
		$chain_partners$elm_bignum$Integer$zero,
		$chain_partners$elm_bignum$Integer$fromString(s_));
	var e = $elm$core$String$length(s) - $elm$core$String$length(s_);
	return _Utils_Tuple2(i_, e);
};
var $chain_partners$elm_bignum$Decimal$moveZeroesToE = F2(
	function (minE, d) {
		moveZeroesToE:
		while (true) {
			if (d.$ === 'Zero') {
				return $chain_partners$elm_bignum$Decimal$Zero;
			} else {
				var s = d.a;
				var e = d.b;
				var _v1 = $chain_partners$elm_bignum$Decimal$sigExpFromInteger(s);
				var s_ = _v1.a;
				var e_ = _v1.b;
				var e__ = A2($elm$core$Basics$max, e + e_, minE);
				var s__ = (_Utils_cmp(e + e_, minE) < 0) ? A3(
					$elm$core$Basics$composeR,
					$chain_partners$elm_bignum$Integer$toString,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$dropRight(minE - (e + e_)),
						A2(
							$elm$core$Basics$composeR,
							$chain_partners$elm_bignum$Integer$fromString,
							$elm$core$Maybe$withDefault($chain_partners$elm_bignum$Integer$zero))),
					s_) : s_;
				if (_Utils_eq(
					s__,
					$chain_partners$elm_bignum$Integer$fromInt(0))) {
					return $chain_partners$elm_bignum$Decimal$Zero;
				} else {
					if (A3(
						$elm$core$Basics$composeR,
						$chain_partners$elm_bignum$Integer$toString,
						$elm$core$String$endsWith('0'),
						s__)) {
						var $temp$minE = minE,
							$temp$d = A2($chain_partners$elm_bignum$Decimal$Decimal, s__, e__);
						minE = $temp$minE;
						d = $temp$d;
						continue moveZeroesToE;
					} else {
						return A2($chain_partners$elm_bignum$Decimal$Decimal, s__, e__);
					}
				}
			}
		}
	});
var $chain_partners$elm_bignum$Decimal$scientificNotationRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^-?\\d{1}(\\.\\d*[1-9]|)e{1}-?\\d+$'));
var $chain_partners$elm_bignum$Decimal$fromStringWithMinE = F2(
	function (minE, s) {
		if (s === '0') {
			return $elm$core$Maybe$Just($chain_partners$elm_bignum$Decimal$Zero);
		} else {
			return A2($elm$regex$Regex$contains, $chain_partners$elm_bignum$Decimal$decimalNotationRegex, s) ? A2(
				$elm$core$Maybe$map,
				$chain_partners$elm_bignum$Decimal$moveZeroesToE(minE),
				A2($chain_partners$elm_bignum$Decimal$fromDecimalNotation, minE, s)) : (A2($elm$regex$Regex$contains, $chain_partners$elm_bignum$Decimal$scientificNotationRegex, s) ? A2(
				$elm$core$Maybe$map,
				$chain_partners$elm_bignum$Decimal$moveZeroesToE(minE),
				A2($chain_partners$elm_bignum$Decimal$fromScientificNotation, minE, s)) : $elm$core$Maybe$Nothing);
		}
	});
var $chain_partners$elm_bignum$Decimal$minExponent = -32;
var $chain_partners$elm_bignum$Decimal$fromString = $chain_partners$elm_bignum$Decimal$fromStringWithMinE($chain_partners$elm_bignum$Decimal$minExponent);
var $chain_partners$elm_bignum$Decimal$fromFloat = function (f) {
	return A2(
		$elm$core$Maybe$withDefault,
		A2($chain_partners$elm_bignum$Decimal$Decimal, $chain_partners$elm_bignum$Integer$zero, 0),
		$chain_partners$elm_bignum$Decimal$fromString(
			$elm$core$String$fromFloat(f)));
};
var $chain_partners$elm_bignum$Decimal$HalfToEven = {$: 'HalfToEven'};
var $chain_partners$elm_bignum$Integer$countDigits = function (i) {
	var s = $chain_partners$elm_bignum$Integer$toString(i);
	return A2($elm$core$String$startsWith, '-', s) ? $elm$core$String$length(
		A2($elm$core$String$dropLeft, 1, s)) : $elm$core$String$length(s);
};
var $chain_partners$elm_bignum$Integer$addMagnitudes_ = F3(
	function (m1, m2, acc) {
		addMagnitudes_:
		while (true) {
			var _v0 = _Utils_Tuple2(m1, m2);
			if (!_v0.a.b) {
				if (!_v0.b.b) {
					return $elm$core$List$reverse(acc);
				} else {
					return _Utils_ap(
						$elm$core$List$reverse(acc),
						m2);
				}
			} else {
				if (!_v0.b.b) {
					return _Utils_ap(
						$elm$core$List$reverse(acc),
						m1);
				} else {
					var _v1 = _v0.a;
					var d1 = _v1.a;
					var ds1 = _v1.b;
					var _v2 = _v0.b;
					var d2 = _v2.a;
					var ds2 = _v2.b;
					var $temp$m1 = ds1,
						$temp$m2 = ds2,
						$temp$acc = A2($elm$core$List$cons, d1 + d2, acc);
					m1 = $temp$m1;
					m2 = $temp$m2;
					acc = $temp$acc;
					continue addMagnitudes_;
				}
			}
		}
	});
var $chain_partners$elm_bignum$Integer$handleFinalCarry = function (_v0) {
	var c = _v0.a;
	var m = _v0.b;
	if (!c) {
		return m;
	} else {
		if (!m.b) {
			return _List_Nil;
		} else {
			var d = m.a;
			var ds = m.b;
			return (!(d + c)) ? ds : A2($elm$core$List$cons, c, m);
		}
	}
};
var $chain_partners$elm_bignum$Integer$normalizeDigit = F2(
	function (d, _v0) {
		var prevCarry = _v0.a;
		var acc = _v0.b;
		var sum = d + prevCarry;
		var d_ = A2($elm$core$Basics$modBy, $chain_partners$elm_bignum$Integer$defaultBase, sum);
		var carry = (sum < 0) ? (-1) : ((sum / $chain_partners$elm_bignum$Integer$defaultBase) | 0);
		return _Utils_Tuple2(
			carry,
			A2($elm$core$List$cons, d_, acc));
	});
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $chain_partners$elm_bignum$Integer$trimLeadingZeroFromMag = A2(
	$elm$core$List$foldr,
	F2(
		function (x, xs) {
			return ((!x) && $elm$core$List$isEmpty(xs)) ? _List_Nil : A2($elm$core$List$cons, x, xs);
		}),
	_List_Nil);
var $chain_partners$elm_bignum$Integer$normalizeMagnitude = function (m) {
	return $chain_partners$elm_bignum$Integer$trimLeadingZeroFromMag(
		$elm$core$List$reverse(
			$chain_partners$elm_bignum$Integer$handleFinalCarry(
				A3(
					$elm$core$List$foldl,
					$chain_partners$elm_bignum$Integer$normalizeDigit,
					_Utils_Tuple2(0, _List_Nil),
					m))));
};
var $chain_partners$elm_bignum$Integer$addMagnitudes = F2(
	function (m1, m2) {
		return $chain_partners$elm_bignum$Integer$normalizeMagnitude(
			A3($chain_partners$elm_bignum$Integer$addMagnitudes_, m1, m2, _List_Nil));
	});
var $chain_partners$elm_bignum$Integer$compareMag_ = F2(
	function (m1, m2) {
		compareMag_:
		while (true) {
			var _v0 = _Utils_Tuple2(m1, m2);
			if (!_v0.a.b) {
				if (!_v0.b.b) {
					return $elm$core$Basics$EQ;
				} else {
					var _v2 = _v0.b;
					var d = _v2.a;
					var ds = _v2.b;
					return $elm$core$Basics$LT;
				}
			} else {
				if (!_v0.b.b) {
					var _v1 = _v0.a;
					var d = _v1.a;
					var ds = _v1.b;
					return $elm$core$Basics$GT;
				} else {
					var _v3 = _v0.a;
					var d1 = _v3.a;
					var ds1 = _v3.b;
					var _v4 = _v0.b;
					var d2 = _v4.a;
					var ds2 = _v4.b;
					var _v5 = A2($elm$core$Basics$compare, d1, d2);
					switch (_v5.$) {
						case 'GT':
							return $elm$core$Basics$GT;
						case 'EQ':
							var $temp$m1 = ds1,
								$temp$m2 = ds2;
							m1 = $temp$m1;
							m2 = $temp$m2;
							continue compareMag_;
						default:
							return $elm$core$Basics$LT;
					}
				}
			}
		}
	});
var $chain_partners$elm_bignum$Integer$compareMag = F2(
	function (m1, m2) {
		var _v0 = A2(
			$elm$core$Basics$compare,
			$elm$core$List$length(m1),
			$elm$core$List$length(m2));
		switch (_v0.$) {
			case 'GT':
				return $elm$core$Basics$GT;
			case 'LT':
				return $elm$core$Basics$LT;
			default:
				return A2(
					$chain_partners$elm_bignum$Integer$compareMag_,
					$elm$core$List$reverse(m1),
					$elm$core$List$reverse(m2));
		}
	});
var $chain_partners$elm_bignum$Integer$add = F2(
	function (i1, i2) {
		var _v0 = _Utils_Tuple2(i1, i2);
		_v0$4:
		while (true) {
			if (_v0.a.$ === 'Zero') {
				var _v1 = _v0.a;
				return i2;
			} else {
				if (_v0.b.$ === 'Zero') {
					var _v2 = _v0.b;
					return i1;
				} else {
					if (_v0.a.a.$ === 'Positive') {
						if (_v0.b.a.$ === 'Negative') {
							var _v3 = _v0.a;
							var _v4 = _v3.a;
							var m1 = _v3.b;
							var _v5 = _v0.b;
							var _v6 = _v5.a;
							var m2 = _v5.b;
							var _v7 = A2($chain_partners$elm_bignum$Integer$compareMag, m1, m2);
							switch (_v7.$) {
								case 'GT':
									return A2(
										$chain_partners$elm_bignum$Integer$Integer,
										$chain_partners$elm_bignum$Integer$Positive,
										A2(
											$chain_partners$elm_bignum$Integer$addMagnitudes,
											m1,
											A2($elm$core$List$map, $elm$core$Basics$negate, m2)));
								case 'EQ':
									return $chain_partners$elm_bignum$Integer$Zero;
								default:
									return A2(
										$chain_partners$elm_bignum$Integer$Integer,
										$chain_partners$elm_bignum$Integer$Negative,
										A2(
											$chain_partners$elm_bignum$Integer$addMagnitudes,
											A2($elm$core$List$map, $elm$core$Basics$negate, m1),
											m2));
							}
						} else {
							break _v0$4;
						}
					} else {
						if (_v0.b.a.$ === 'Positive') {
							var _v8 = _v0.a;
							var _v9 = _v8.a;
							var m1 = _v8.b;
							var _v10 = _v0.b;
							var _v11 = _v10.a;
							var m2 = _v10.b;
							var _v12 = A2($chain_partners$elm_bignum$Integer$compareMag, m1, m2);
							switch (_v12.$) {
								case 'GT':
									return A2(
										$chain_partners$elm_bignum$Integer$Integer,
										$chain_partners$elm_bignum$Integer$Negative,
										A2(
											$chain_partners$elm_bignum$Integer$addMagnitudes,
											m1,
											A2($elm$core$List$map, $elm$core$Basics$negate, m2)));
								case 'EQ':
									return $chain_partners$elm_bignum$Integer$Zero;
								default:
									return A2(
										$chain_partners$elm_bignum$Integer$Integer,
										$chain_partners$elm_bignum$Integer$Positive,
										A2(
											$chain_partners$elm_bignum$Integer$addMagnitudes,
											A2($elm$core$List$map, $elm$core$Basics$negate, m1),
											m2));
							}
						} else {
							break _v0$4;
						}
					}
				}
			}
		}
		var _v13 = _v0.a;
		var s1 = _v13.a;
		var m1 = _v13.b;
		var _v14 = _v0.b;
		var s2 = _v14.a;
		var m2 = _v14.b;
		return A2(
			$chain_partners$elm_bignum$Integer$Integer,
			s1,
			A2($chain_partners$elm_bignum$Integer$addMagnitudes, m1, m2));
	});
var $chain_partners$elm_bignum$Integer$reverseOrder = function (o) {
	switch (o.$) {
		case 'GT':
			return $elm$core$Basics$LT;
		case 'EQ':
			return $elm$core$Basics$EQ;
		default:
			return $elm$core$Basics$GT;
	}
};
var $chain_partners$elm_bignum$Integer$compare = F2(
	function (i1, i2) {
		var _v0 = _Utils_Tuple2(i1, i2);
		_v0$7:
		while (true) {
			if (_v0.a.$ === 'Zero') {
				if (_v0.b.$ === 'Zero') {
					var _v1 = _v0.a;
					var _v2 = _v0.b;
					return $elm$core$Basics$EQ;
				} else {
					if (_v0.b.a.$ === 'Positive') {
						var _v3 = _v0.a;
						var _v4 = _v0.b;
						var _v5 = _v4.a;
						return $elm$core$Basics$LT;
					} else {
						var _v6 = _v0.a;
						var _v7 = _v0.b;
						var _v8 = _v7.a;
						return $elm$core$Basics$GT;
					}
				}
			} else {
				if (_v0.b.$ === 'Zero') {
					if (_v0.a.a.$ === 'Positive') {
						var _v9 = _v0.a;
						var _v10 = _v9.a;
						var _v11 = _v0.b;
						return $elm$core$Basics$GT;
					} else {
						var _v12 = _v0.a;
						var _v13 = _v12.a;
						var _v14 = _v0.b;
						return $elm$core$Basics$LT;
					}
				} else {
					if (_v0.a.a.$ === 'Positive') {
						if (_v0.b.a.$ === 'Negative') {
							var _v15 = _v0.a;
							var _v16 = _v15.a;
							var _v17 = _v0.b;
							var _v18 = _v17.a;
							return $elm$core$Basics$GT;
						} else {
							break _v0$7;
						}
					} else {
						if (_v0.b.a.$ === 'Positive') {
							var _v19 = _v0.a;
							var _v20 = _v19.a;
							var _v21 = _v0.b;
							var _v22 = _v21.a;
							return $elm$core$Basics$LT;
						} else {
							break _v0$7;
						}
					}
				}
			}
		}
		var _v23 = _v0.a;
		var s1 = _v23.a;
		var m1 = _v23.b;
		var _v24 = _v0.b;
		var s2 = _v24.a;
		var m2 = _v24.b;
		var ord = A2($chain_partners$elm_bignum$Integer$compareMag, m1, m2);
		return (_Utils_eq(s1, $chain_partners$elm_bignum$Integer$Negative) && _Utils_eq(s2, $chain_partners$elm_bignum$Integer$Negative)) ? $chain_partners$elm_bignum$Integer$reverseOrder(ord) : ord;
	});
var $chain_partners$elm_bignum$Integer$abs = function (i) {
	if (i.$ === 'Zero') {
		return $chain_partners$elm_bignum$Integer$Zero;
	} else {
		if (i.a.$ === 'Positive') {
			var _v1 = i.a;
			return i;
		} else {
			var _v2 = i.a;
			var m = i.b;
			return A2($chain_partners$elm_bignum$Integer$Integer, $chain_partners$elm_bignum$Integer$Positive, m);
		}
	}
};
var $chain_partners$elm_bignum$Integer$negate = function (i) {
	if (i.$ === 'Zero') {
		return $chain_partners$elm_bignum$Integer$Zero;
	} else {
		if (i.a.$ === 'Positive') {
			var _v1 = i.a;
			var m = i.b;
			return A2($chain_partners$elm_bignum$Integer$Integer, $chain_partners$elm_bignum$Integer$Negative, m);
		} else {
			var _v2 = i.a;
			var m = i.b;
			return A2($chain_partners$elm_bignum$Integer$Integer, $chain_partners$elm_bignum$Integer$Positive, m);
		}
	}
};
var $chain_partners$elm_bignum$Integer$adjustSign = F3(
	function (dividend, divisor, _v0) {
		var q = _v0.a;
		var r = _v0.b;
		var _v1 = _Utils_Tuple2(dividend, divisor);
		_v1$3:
		while (true) {
			if (_v1.a.$ === 'Integer') {
				if (_v1.a.a.$ === 'Positive') {
					if ((_v1.b.$ === 'Integer') && (_v1.b.a.$ === 'Negative')) {
						var _v2 = _v1.a;
						var _v3 = _v2.a;
						var _v4 = _v1.b;
						var _v5 = _v4.a;
						return _Utils_Tuple2(
							$chain_partners$elm_bignum$Integer$negate(q),
							r);
					} else {
						break _v1$3;
					}
				} else {
					if (_v1.b.$ === 'Integer') {
						if (_v1.b.a.$ === 'Positive') {
							var _v6 = _v1.a;
							var _v7 = _v6.a;
							var _v8 = _v1.b;
							var _v9 = _v8.a;
							return _Utils_Tuple2(
								$chain_partners$elm_bignum$Integer$negate(q),
								$chain_partners$elm_bignum$Integer$negate(r));
						} else {
							var _v10 = _v1.a;
							var _v11 = _v10.a;
							var _v12 = _v1.b;
							var _v13 = _v12.a;
							return _Utils_Tuple2(
								q,
								$chain_partners$elm_bignum$Integer$negate(r));
						}
					} else {
						break _v1$3;
					}
				}
			} else {
				break _v1$3;
			}
		}
		return _Utils_Tuple2(q, r);
	});
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $chain_partners$elm_bignum$Integer$addScaleToPartialProducts = function (magList) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (m, _v0) {
				var digit = _v0.a;
				var acc = _v0.b;
				return _Utils_Tuple2(
					digit + 1,
					A2(
						$elm$core$List$cons,
						A2(
							$elm$core$List$append,
							A2($elm$core$List$repeat, digit, 0),
							m),
						acc));
			}),
		_Utils_Tuple2(0, _List_Nil),
		magList).b;
};
var $chain_partners$elm_bignum$Integer$calculatePartialProducts = F2(
	function (m1, m2) {
		return A2(
			$elm$core$List$map,
			function (d) {
				return A2(
					$elm$core$List$map,
					$elm$core$Basics$mul(d),
					m1);
			},
			m2);
	});
var $chain_partners$elm_bignum$Integer$sumPartialProducts = function (magList) {
	return A3($elm$core$List$foldl, $chain_partners$elm_bignum$Integer$addMagnitudes, _List_Nil, magList);
};
var $chain_partners$elm_bignum$Integer$multiplyMagnitudes = F2(
	function (m1, m2) {
		return $chain_partners$elm_bignum$Integer$normalizeMagnitude(
			$chain_partners$elm_bignum$Integer$sumPartialProducts(
				$chain_partners$elm_bignum$Integer$addScaleToPartialProducts(
					A2($chain_partners$elm_bignum$Integer$calculatePartialProducts, m1, m2))));
	});
var $chain_partners$elm_bignum$Integer$mul = F2(
	function (i1, i2) {
		var _v0 = _Utils_Tuple2(i1, i2);
		if (_v0.a.$ === 'Zero') {
			var _v1 = _v0.a;
			return $chain_partners$elm_bignum$Integer$Zero;
		} else {
			if (_v0.b.$ === 'Zero') {
				var _v2 = _v0.b;
				return $chain_partners$elm_bignum$Integer$Zero;
			} else {
				var _v3 = _v0.a;
				var s1 = _v3.a;
				var m1 = _v3.b;
				var _v4 = _v0.b;
				var s2 = _v4.a;
				var m2 = _v4.b;
				var sign = _Utils_eq(s1, s2) ? $chain_partners$elm_bignum$Integer$Positive : $chain_partners$elm_bignum$Integer$Negative;
				var magnitude = function () {
					var _v5 = A2(
						$elm$core$Basics$compare,
						$elm$core$List$length(m1),
						$elm$core$List$length(m2));
					if (_v5.$ === 'GT') {
						return A2($chain_partners$elm_bignum$Integer$multiplyMagnitudes, m1, m2);
					} else {
						return A2($chain_partners$elm_bignum$Integer$multiplyMagnitudes, m2, m1);
					}
				}();
				return A2($chain_partners$elm_bignum$Integer$Integer, sign, magnitude);
			}
		}
	});
var $chain_partners$elm_bignum$Integer$one = A2(
	$chain_partners$elm_bignum$Integer$Integer,
	$chain_partners$elm_bignum$Integer$Positive,
	_List_fromArray(
		[1]));
var $chain_partners$elm_bignum$Integer$sub = F2(
	function (i1, i2) {
		var _v0 = _Utils_Tuple2(i1, i2);
		if (_v0.a.$ === 'Zero') {
			var _v1 = _v0.a;
			return $chain_partners$elm_bignum$Integer$negate(i2);
		} else {
			if (_v0.b.$ === 'Zero') {
				var _v2 = _v0.b;
				return i1;
			} else {
				var _v3 = _v0.a;
				var s1 = _v3.a;
				var m1 = _v3.b;
				var _v4 = _v0.b;
				var s2 = _v4.a;
				var m2 = _v4.b;
				return A2(
					$chain_partners$elm_bignum$Integer$add,
					i1,
					$chain_partners$elm_bignum$Integer$negate(i2));
			}
		}
	});
var $chain_partners$elm_bignum$Integer$divmodPartialDividend = F4(
	function (dividend, divisor, divExpediter, acc) {
		divmodPartialDividend:
		while (true) {
			var _v0 = A2($chain_partners$elm_bignum$Integer$compare, dividend, divisor);
			switch (_v0.$) {
				case 'LT':
					return _Utils_Tuple2(acc, dividend);
				case 'EQ':
					return _Utils_Tuple2(
						A2($chain_partners$elm_bignum$Integer$add, acc, $chain_partners$elm_bignum$Integer$one),
						$chain_partners$elm_bignum$Integer$Zero);
				default:
					var divisorTimesDivExpediter = A2(
						$chain_partners$elm_bignum$Integer$mul,
						divisor,
						$chain_partners$elm_bignum$Integer$fromInt(divExpediter));
					var _v1 = A2($chain_partners$elm_bignum$Integer$compare, dividend, divisorTimesDivExpediter);
					switch (_v1.$) {
						case 'LT':
							var $temp$dividend = dividend,
								$temp$divisor = divisor,
								$temp$divExpediter = (divExpediter / 2) | 0,
								$temp$acc = acc;
							dividend = $temp$dividend;
							divisor = $temp$divisor;
							divExpediter = $temp$divExpediter;
							acc = $temp$acc;
							continue divmodPartialDividend;
						case 'EQ':
							return _Utils_Tuple2(
								A2(
									$chain_partners$elm_bignum$Integer$add,
									acc,
									$chain_partners$elm_bignum$Integer$fromInt(divExpediter)),
								$chain_partners$elm_bignum$Integer$Zero);
						default:
							var dividend_ = A2($chain_partners$elm_bignum$Integer$sub, dividend, divisorTimesDivExpediter);
							var $temp$dividend = dividend_,
								$temp$divisor = divisor,
								$temp$divExpediter = divExpediter,
								$temp$acc = A2(
								$chain_partners$elm_bignum$Integer$add,
								acc,
								$chain_partners$elm_bignum$Integer$fromInt(divExpediter));
							dividend = $temp$dividend;
							divisor = $temp$divisor;
							divExpediter = $temp$divExpediter;
							acc = $temp$acc;
							continue divmodPartialDividend;
					}
			}
		}
	});
var $chain_partners$elm_bignum$Integer$headAndTail = function (i) {
	if (i.$ === 'Zero') {
		return _Utils_Tuple2($chain_partners$elm_bignum$Integer$Zero, $chain_partners$elm_bignum$Integer$Zero);
	} else {
		var s = i.a;
		var m = i.b;
		var rM = $elm$core$List$reverse(m);
		if (!rM.b) {
			return _Utils_Tuple2($chain_partners$elm_bignum$Integer$Zero, $chain_partners$elm_bignum$Integer$Zero);
		} else {
			if (!rM.b.b) {
				var d = rM.a;
				return _Utils_Tuple2(
					$chain_partners$elm_bignum$Integer$fromInt(d),
					$chain_partners$elm_bignum$Integer$Zero);
			} else {
				var d = rM.a;
				var ds = rM.b;
				return _Utils_Tuple2(
					$chain_partners$elm_bignum$Integer$fromInt(d),
					A2(
						$chain_partners$elm_bignum$Integer$Integer,
						s,
						$elm$core$List$reverse(ds)));
			}
		}
	}
};
var $chain_partners$elm_bignum$Integer$shiftRightBy = F2(
	function (n, i) {
		shiftRightBy:
		while (true) {
			if (i.$ === 'Zero') {
				return $chain_partners$elm_bignum$Integer$Zero;
			} else {
				var s = i.a;
				var m = i.b;
				if (n <= 0) {
					return i;
				} else {
					var $temp$n = n - 1,
						$temp$i = A2(
						$chain_partners$elm_bignum$Integer$Integer,
						s,
						A2($elm$core$List$cons, 0, m));
					n = $temp$n;
					i = $temp$i;
					continue shiftRightBy;
				}
			}
		}
	});
var $chain_partners$elm_bignum$Integer$divmod_ = F4(
	function (dividend, divisor, qAcc, prevR) {
		divmod_:
		while (true) {
			var _v0 = _Utils_Tuple2(dividend, divisor);
			if (_v0.a.$ === 'Zero') {
				var _v1 = _v0.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(qAcc, prevR));
			} else {
				var _v2 = $chain_partners$elm_bignum$Integer$headAndTail(dividend);
				var firstDigit = _v2.a;
				var remainingDigits = _v2.b;
				var currentDividend = A2(
					$chain_partners$elm_bignum$Integer$add,
					firstDigit,
					A2($chain_partners$elm_bignum$Integer$shiftRightBy, 1, prevR));
				var _v3 = A4($chain_partners$elm_bignum$Integer$divmodPartialDividend, currentDividend, divisor, $chain_partners$elm_bignum$Integer$defaultBase, $chain_partners$elm_bignum$Integer$Zero);
				var q = _v3.a;
				var r = _v3.b;
				var qAcc_ = A2(
					$chain_partners$elm_bignum$Integer$add,
					q,
					A2($chain_partners$elm_bignum$Integer$shiftRightBy, 1, qAcc));
				var $temp$dividend = remainingDigits,
					$temp$divisor = divisor,
					$temp$qAcc = qAcc_,
					$temp$prevR = r;
				dividend = $temp$dividend;
				divisor = $temp$divisor;
				qAcc = $temp$qAcc;
				prevR = $temp$prevR;
				continue divmod_;
			}
		}
	});
var $chain_partners$elm_bignum$Integer$divmod = F2(
	function (dividend, divisor) {
		var _v0 = _Utils_Tuple2(dividend, divisor);
		_v0$0:
		while (true) {
			_v0$4:
			while (true) {
				if (_v0.b.$ === 'Zero') {
					if (_v0.a.$ === 'Zero') {
						break _v0$0;
					} else {
						var _v2 = _v0.b;
						return $elm$core$Maybe$Nothing;
					}
				} else {
					if (_v0.a.$ === 'Zero') {
						break _v0$0;
					} else {
						if (_v0.b.a.$ === 'Positive') {
							if ((_v0.b.b.b && (_v0.b.b.a === 1)) && (!_v0.b.b.b.b)) {
								var _v3 = _v0.b;
								var _v4 = _v3.a;
								var _v5 = _v3.b;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(dividend, $chain_partners$elm_bignum$Integer$Zero));
							} else {
								break _v0$4;
							}
						} else {
							if ((_v0.b.b.b && (_v0.b.b.a === 1)) && (!_v0.b.b.b.b)) {
								var _v6 = _v0.b;
								var _v7 = _v6.a;
								var _v8 = _v6.b;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(
										$chain_partners$elm_bignum$Integer$negate(dividend),
										$chain_partners$elm_bignum$Integer$Zero));
							} else {
								break _v0$4;
							}
						}
					}
				}
			}
			var _v9 = _v0.a;
			var s1 = _v9.a;
			var m1 = _v9.b;
			var _v10 = _v0.b;
			var s2 = _v10.a;
			var m2 = _v10.b;
			var _v11 = A2($chain_partners$elm_bignum$Integer$compareMag, m1, m2);
			switch (_v11.$) {
				case 'LT':
					return $elm$core$Maybe$Just(
						_Utils_Tuple2($chain_partners$elm_bignum$Integer$Zero, dividend));
				case 'EQ':
					var sign = _Utils_eq(s1, s2) ? $chain_partners$elm_bignum$Integer$Positive : $chain_partners$elm_bignum$Integer$Negative;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A2(
								$chain_partners$elm_bignum$Integer$Integer,
								sign,
								_List_fromArray(
									[1])),
							$chain_partners$elm_bignum$Integer$Zero));
				default:
					return A2(
						$elm$core$Maybe$map,
						A2($chain_partners$elm_bignum$Integer$adjustSign, dividend, divisor),
						A4(
							$chain_partners$elm_bignum$Integer$divmod_,
							$chain_partners$elm_bignum$Integer$abs(dividend),
							$chain_partners$elm_bignum$Integer$abs(divisor),
							$chain_partners$elm_bignum$Integer$Zero,
							$chain_partners$elm_bignum$Integer$Zero));
			}
		}
		var _v1 = _v0.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2($chain_partners$elm_bignum$Integer$Zero, $chain_partners$elm_bignum$Integer$Zero));
	});
var $chain_partners$elm_bignum$Integer$eq = F2(
	function (i1, i2) {
		var _v0 = A2($chain_partners$elm_bignum$Integer$compare, i1, i2);
		if (_v0.$ === 'EQ') {
			return true;
		} else {
			return false;
		}
	});
var $chain_partners$elm_bignum$Integer$lt = F2(
	function (i1, i2) {
		var _v0 = A2($chain_partners$elm_bignum$Integer$compare, i1, i2);
		if (_v0.$ === 'LT') {
			return true;
		} else {
			return false;
		}
	});
var $chain_partners$elm_bignum$Decimal$roundAwayFromZero = F2(
	function (i1, i2) {
		var z = $chain_partners$elm_bignum$Integer$zero;
		var isPositive = _Utils_eq(
			A2($chain_partners$elm_bignum$Integer$lt, i1, z),
			A2($chain_partners$elm_bignum$Integer$lt, i2, z));
		var _v0 = A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2($chain_partners$elm_bignum$Integer$zero, $chain_partners$elm_bignum$Integer$zero),
			A2($chain_partners$elm_bignum$Integer$divmod, i1, i2));
		var q = _v0.a;
		var r = _v0.b;
		if (A2($chain_partners$elm_bignum$Integer$eq, r, z)) {
			return q;
		} else {
			var _v1 = A2($chain_partners$elm_bignum$Integer$compare, q, z);
			switch (_v1.$) {
				case 'LT':
					return A2(
						$chain_partners$elm_bignum$Integer$add,
						q,
						$chain_partners$elm_bignum$Integer$fromInt(-1));
				case 'EQ':
					return isPositive ? A2($chain_partners$elm_bignum$Integer$add, q, $chain_partners$elm_bignum$Integer$one) : A2(
						$chain_partners$elm_bignum$Integer$add,
						q,
						$chain_partners$elm_bignum$Integer$fromInt(-1));
				default:
					return A2($chain_partners$elm_bignum$Integer$add, q, $chain_partners$elm_bignum$Integer$one);
			}
		}
	});
var $chain_partners$elm_bignum$Decimal$roundDown = F2(
	function (i1, i2) {
		var z = $chain_partners$elm_bignum$Integer$zero;
		var isPositive = _Utils_eq(
			A2($chain_partners$elm_bignum$Integer$lt, i1, z),
			A2($chain_partners$elm_bignum$Integer$lt, i2, z));
		var _v0 = A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2($chain_partners$elm_bignum$Integer$zero, $chain_partners$elm_bignum$Integer$zero),
			A2($chain_partners$elm_bignum$Integer$divmod, i1, i2));
		var q = _v0.a;
		var r = _v0.b;
		if (A2($chain_partners$elm_bignum$Integer$eq, r, z)) {
			return q;
		} else {
			var _v1 = A2($chain_partners$elm_bignum$Integer$compare, q, z);
			switch (_v1.$) {
				case 'LT':
					return A2(
						$chain_partners$elm_bignum$Integer$add,
						q,
						$chain_partners$elm_bignum$Integer$fromInt(-1));
				case 'EQ':
					return isPositive ? q : A2(
						$chain_partners$elm_bignum$Integer$add,
						q,
						$chain_partners$elm_bignum$Integer$fromInt(-1));
				default:
					return q;
			}
		}
	});
var $chain_partners$elm_bignum$Integer$remainderBy = F2(
	function (dividend, divisor) {
		return A2(
			$elm$core$Maybe$map,
			$elm$core$Tuple$second,
			A2($chain_partners$elm_bignum$Integer$divmod, dividend, divisor));
	});
var $chain_partners$elm_bignum$Decimal$roundHalfToEven = F2(
	function (i1, i2) {
		var _v0 = A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2($chain_partners$elm_bignum$Integer$zero, $chain_partners$elm_bignum$Integer$zero),
			A2($chain_partners$elm_bignum$Integer$divmod, i1, i2));
		var q = _v0.a;
		var r = _v0.b;
		var mod = function () {
			var _v1 = A2(
				$chain_partners$elm_bignum$Integer$compare,
				$chain_partners$elm_bignum$Integer$abs(
					A2(
						$chain_partners$elm_bignum$Integer$mul,
						$chain_partners$elm_bignum$Integer$fromInt(2),
						r)),
				$chain_partners$elm_bignum$Integer$abs(i2));
			switch (_v1.$) {
				case 'LT':
					return $chain_partners$elm_bignum$Integer$zero;
				case 'EQ':
					if (!_Utils_eq(
						A2(
							$elm$core$Maybe$withDefault,
							$chain_partners$elm_bignum$Integer$zero,
							A2(
								$chain_partners$elm_bignum$Integer$remainderBy,
								q,
								$chain_partners$elm_bignum$Integer$fromInt(2))),
						$chain_partners$elm_bignum$Integer$zero)) {
						var _v2 = A2($chain_partners$elm_bignum$Integer$compare, i1, $chain_partners$elm_bignum$Integer$zero);
						switch (_v2.$) {
							case 'LT':
								return $chain_partners$elm_bignum$Integer$fromInt(-1);
							case 'EQ':
								return $chain_partners$elm_bignum$Integer$zero;
							default:
								return $chain_partners$elm_bignum$Integer$one;
						}
					} else {
						return $chain_partners$elm_bignum$Integer$zero;
					}
				default:
					var _v3 = A2($chain_partners$elm_bignum$Integer$compare, i1, $chain_partners$elm_bignum$Integer$zero);
					switch (_v3.$) {
						case 'LT':
							return $chain_partners$elm_bignum$Integer$fromInt(-1);
						case 'EQ':
							return $chain_partners$elm_bignum$Integer$zero;
						default:
							return $chain_partners$elm_bignum$Integer$one;
					}
			}
		}();
		return A2($chain_partners$elm_bignum$Integer$add, q, mod);
	});
var $chain_partners$elm_bignum$Decimal$roundTowardsZero = F2(
	function (i1, i2) {
		return A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2($chain_partners$elm_bignum$Integer$zero, $chain_partners$elm_bignum$Integer$zero),
			A2($chain_partners$elm_bignum$Integer$divmod, i1, i2)).a;
	});
var $chain_partners$elm_bignum$Decimal$roundUp = F2(
	function (i1, i2) {
		var z = $chain_partners$elm_bignum$Integer$zero;
		var isPositive = _Utils_eq(
			A2($chain_partners$elm_bignum$Integer$lt, i1, z),
			A2($chain_partners$elm_bignum$Integer$lt, i2, z));
		var _v0 = A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2($chain_partners$elm_bignum$Integer$zero, $chain_partners$elm_bignum$Integer$zero),
			A2($chain_partners$elm_bignum$Integer$divmod, i1, i2));
		var q = _v0.a;
		var r = _v0.b;
		if (A2($chain_partners$elm_bignum$Integer$eq, r, z)) {
			return q;
		} else {
			var _v1 = A2($chain_partners$elm_bignum$Integer$compare, q, z);
			switch (_v1.$) {
				case 'LT':
					return q;
				case 'EQ':
					return isPositive ? A2($chain_partners$elm_bignum$Integer$add, q, $chain_partners$elm_bignum$Integer$one) : q;
				default:
					return A2($chain_partners$elm_bignum$Integer$add, q, $chain_partners$elm_bignum$Integer$one);
			}
		}
	});
var $chain_partners$elm_bignum$Decimal$divRound = F3(
	function (mode, i1, i2) {
		switch (mode.$) {
			case 'Down':
				return A2($chain_partners$elm_bignum$Decimal$roundDown, i1, i2);
			case 'Up':
				return A2($chain_partners$elm_bignum$Decimal$roundUp, i1, i2);
			case 'TowardsZero':
				return A2($chain_partners$elm_bignum$Decimal$roundTowardsZero, i1, i2);
			case 'AwayFromZero':
				return A2($chain_partners$elm_bignum$Decimal$roundAwayFromZero, i1, i2);
			default:
				return A2($chain_partners$elm_bignum$Decimal$roundHalfToEven, i1, i2);
		}
	});
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $chain_partners$elm_bignum$Decimal$roundWithContext = F2(
	function (context, d) {
		if (d.$ === 'Zero') {
			return $chain_partners$elm_bignum$Decimal$Zero;
		} else {
			var s = d.a;
			var e = d.b;
			if (_Utils_cmp(context.e, e) < 1) {
				return d;
			} else {
				if (_Utils_cmp(
					context.e,
					$chain_partners$elm_bignum$Integer$countDigits(s) + e) > 0) {
					return $chain_partners$elm_bignum$Decimal$Zero;
				} else {
					var eDiff = context.e - e;
					var divisor = (eDiff < 11) ? $chain_partners$elm_bignum$Integer$fromInt(
						A2($elm$core$Basics$pow, 10, eDiff)) : A2(
						$elm$core$Maybe$withDefault,
						$chain_partners$elm_bignum$Integer$zero,
						$chain_partners$elm_bignum$Integer$fromString(
							'1' + A2($elm$core$String$repeat, eDiff, '0')));
					var s_ = A3($chain_partners$elm_bignum$Decimal$divRound, context.mode, s, divisor);
					return A2($chain_partners$elm_bignum$Integer$eq, s_, $chain_partners$elm_bignum$Integer$zero) ? $chain_partners$elm_bignum$Decimal$Zero : A2(
						$chain_partners$elm_bignum$Decimal$moveZeroesToE,
						A2($elm$core$Basics$min, context.e, $chain_partners$elm_bignum$Decimal$minExponent),
						A2($chain_partners$elm_bignum$Decimal$Decimal, s_, context.e));
				}
			}
		}
	});
var $chain_partners$elm_bignum$Decimal$roundTo = function (e_) {
	return $chain_partners$elm_bignum$Decimal$roundWithContext(
		{e: e_, mode: $chain_partners$elm_bignum$Decimal$HalfToEven});
};
var $chain_partners$elm_bignum$Decimal$Dec = {$: 'Dec'};
var $chain_partners$elm_bignum$Integer$gte = F2(
	function (i1, i2) {
		var _v0 = A2($chain_partners$elm_bignum$Integer$compare, i1, i2);
		switch (_v0.$) {
			case 'GT':
				return true;
			case 'EQ':
				return true;
			default:
				return false;
		}
	});
var $chain_partners$elm_bignum$Decimal$normalize = function (d) {
	if (d.$ === 'Zero') {
		return _Utils_Tuple2($chain_partners$elm_bignum$Decimal$Zero, 0);
	} else {
		var s = d.a;
		var e = d.b;
		var coefficientE = -($chain_partners$elm_bignum$Integer$countDigits(s) - 1);
		return _Utils_Tuple2(
			A2($chain_partners$elm_bignum$Decimal$Decimal, s, coefficientE),
			e - coefficientE);
	}
};
var $chain_partners$elm_bignum$Decimal$toStringIn = F2(
	function (notation, d) {
		if (d.$ === 'Zero') {
			return '0';
		} else {
			var s = d.a;
			var e = d.b;
			if (notation.$ === 'Sci') {
				var _v2 = $chain_partners$elm_bignum$Decimal$normalize(d);
				var co = _v2.a;
				var exp = _v2.b;
				var coString = $chain_partners$elm_bignum$Decimal$cyclic$toString()(co);
				var expString = 'e' + $elm$core$String$fromInt(exp);
				return _Utils_ap(coString, expString);
			} else {
				var sign = A2($chain_partners$elm_bignum$Integer$gte, s, $chain_partners$elm_bignum$Integer$zero) ? '' : '-';
				var sigString = $chain_partners$elm_bignum$Integer$toString(
					$chain_partners$elm_bignum$Integer$abs(s));
				var decString = function () {
					var _v3 = A2($elm$core$Basics$compare, e, 0);
					switch (_v3.$) {
						case 'GT':
							return _Utils_ap(
								sigString,
								A2($elm$core$String$repeat, e, '0'));
						case 'EQ':
							return sigString;
						default:
							var _v4 = A2(
								$elm$core$Basics$compare,
								$elm$core$String$length(sigString),
								-e);
							switch (_v4.$) {
								case 'GT':
									return A2(
										$elm$core$String$join,
										'.',
										_List_fromArray(
											[
												A2($elm$core$String$dropRight, -e, sigString),
												A2($elm$core$String$right, -e, sigString)
											]));
								case 'EQ':
									return '0.' + sigString;
								default:
									return '0.' + A3(
										$elm$core$String$padLeft,
										-e,
										_Utils_chr('0'),
										sigString);
							}
					}
				}();
				return _Utils_ap(sign, decString);
			}
		}
	});
function $chain_partners$elm_bignum$Decimal$cyclic$toString() {
	return $chain_partners$elm_bignum$Decimal$toStringIn($chain_partners$elm_bignum$Decimal$Dec);
}
try {
	var $chain_partners$elm_bignum$Decimal$toString = $chain_partners$elm_bignum$Decimal$cyclic$toString();
	$chain_partners$elm_bignum$Decimal$cyclic$toString = function () {
		return $chain_partners$elm_bignum$Decimal$toString;
	};
} catch ($) {
	throw 'Some top-level definitions from `Decimal` are causing infinite recursion:\n\n  ┌─────┐\n  │    toString\n  │     ↓\n  │    toStringIn\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$Views$Format$formatFloat = F2(
	function (decimals, _float) {
		var simpleFmt = A2(
			$elm$core$Basics$composeR,
			$cuducos$elm_format_number$FormatNumber$format(
				_Utils_update(
					$cuducos$elm_format_number$FormatNumber$Locales$frenchLocale,
					{
						decimals: $cuducos$elm_format_number$FormatNumber$Locales$Exact(decimals)
					})),
			A2($elm$core$String$replace, '−', '-'));
		if ($elm$core$Basics$abs(_float) < 0.01) {
			var sci = A2(
				$chain_partners$elm_bignum$Decimal$toStringIn,
				$chain_partners$elm_bignum$Decimal$Sci,
				A2(
					$chain_partners$elm_bignum$Decimal$roundTo,
					-12,
					$chain_partners$elm_bignum$Decimal$fromFloat(_float)));
			var formatFloatStr = A2(
				$elm$core$Basics$composeR,
				$elm$core$String$toFloat,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Maybe$withDefault(0),
					simpleFmt));
			var _v0 = A2($elm$core$String$split, 'e', sci);
			if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
				var floatStr = _v0.a;
				var _v1 = _v0.b;
				var exp = _v1.a;
				return formatFloatStr(floatStr) + ('e' + exp);
			} else {
				return simpleFmt(_float);
			}
		} else {
			return simpleFmt(_float);
		}
	});
var $author$project$Views$Format$kgToString = function (mass) {
	return A2(
		$author$project$Views$Format$formatFloat,
		3,
		$ianmackenzie$elm_units$Mass$inKilograms(mass)) + 'kg';
};
var $author$project$Data$Textile$Inputs$makingOptionsToString = function (_v0) {
	var product = _v0.product;
	var makingWaste = _v0.makingWaste;
	var airTransportRatio = _v0.airTransportRatio;
	var disabledFading = _v0.disabledFading;
	return function (s) {
		return (s !== '') ? (' (' + (s + ')')) : '';
	}(
		A2(
			$elm$core$String$join,
			', ',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						A2(
							$elm$core$Basics$composeR,
							$author$project$Views$Format$ratioToPercentString,
							function (s) {
								return s + ' de perte';
							}),
						makingWaste),
						A2(
						$elm$core$Maybe$andThen,
						function (ratio) {
							return (!$author$project$Data$Unit$ratioToFloat(ratio)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
								$author$project$Views$Format$ratioToPercentString(ratio) + ' de transport aérien');
						},
						airTransportRatio),
						(product.making.fadable && _Utils_eq(
						disabledFading,
						$elm$core$Maybe$Just(true))) ? $elm$core$Maybe$Just('non-délavé') : $elm$core$Maybe$Nothing
					]))));
};
var $author$project$Data$Textile$Inputs$materialsToString = function (materials) {
	return A2(
		$elm$core$String$join,
		', ',
		A2(
			$elm$core$List$map,
			function (_v1) {
				var material = _v1.material;
				var share = _v1.share;
				return A2(
					$author$project$Views$Format$formatFloat,
					0,
					$author$project$Data$Unit$ratioToFloat(share) * 100) + ('% ' + material.shortName);
			},
			A2(
				$elm$core$List$filter,
				function (_v0) {
					var share = _v0.share;
					return $author$project$Data$Unit$ratioToFloat(share) > 0;
				},
				materials)));
};
var $author$project$Data$Textile$Inputs$useOptionsToString = F2(
	function (maybeQuality, maybeReparability) {
		var _v0 = _Utils_Tuple2(
			A2(
				$elm$core$Maybe$withDefault,
				'standard',
				A2(
					$elm$core$Maybe$map,
					A2($elm$core$Basics$composeR, $author$project$Data$Unit$qualityToFloat, $elm$core$String$fromFloat),
					maybeQuality)),
			A2(
				$elm$core$Maybe$withDefault,
				'standard',
				A2(
					$elm$core$Maybe$map,
					A2($elm$core$Basics$composeR, $author$project$Data$Unit$reparabilityToFloat, $elm$core$String$fromFloat),
					maybeReparability)));
		var quality = _v0.a;
		var reparability = _v0.b;
		return ((quality !== 'standard') || (reparability !== 'standard')) ? (' (qualité ' + (quality + (', réparabilité ' + (reparability + ')')))) : '';
	});
var $author$project$Data$Textile$Inputs$weavingOptionsToString = F2(
	function (_v0, _v1) {
		return '';
	});
var $author$project$Data$Textile$Inputs$toString = function (inputs) {
	return A2(
		$elm$core$String$join,
		', ',
		A2(
			$elm$core$List$map,
			$elm$core$String$join('\u00A0: '),
			_List_fromArray(
				[
					_List_fromArray(
					[
						inputs.product.name + (' de ' + $author$project$Views$Format$kgToString(inputs.mass))
					]),
					_List_fromArray(
					[
						$author$project$Data$Textile$Inputs$materialsToString(inputs.materials)
					]),
					_List_fromArray(
					['matière', inputs.countryMaterial.name]),
					_List_fromArray(
					['filature', inputs.countrySpinning.name]),
					function () {
					var _v0 = inputs.product.fabric;
					if (_v0.$ === 'Knitted') {
						return _List_fromArray(
							['tricotage', inputs.countryFabric.name]);
					} else {
						return _List_fromArray(
							[
								'tissage',
								_Utils_ap(
								inputs.countryFabric.name,
								A2($author$project$Data$Textile$Inputs$weavingOptionsToString, inputs.picking, inputs.surfaceMass))
							]);
					}
				}(),
					_List_fromArray(
					[
						'teinture',
						_Utils_ap(
						inputs.countryDyeing.name,
						$author$project$Data$Textile$Inputs$dyeingOptionsToString(inputs.dyeingWeighting))
					]),
					_List_fromArray(
					[
						'confection',
						_Utils_ap(
						inputs.countryMaking.name,
						$author$project$Data$Textile$Inputs$makingOptionsToString(inputs))
					]),
					_List_fromArray(
					['distribution', inputs.countryDistribution.name]),
					_List_fromArray(
					[
						'utilisation',
						_Utils_ap(
						inputs.countryUse.name,
						A2($author$project$Data$Textile$Inputs$useOptionsToString, inputs.quality, inputs.reparability))
					]),
					_List_fromArray(
					['fin de vie', inputs.countryEndOfLife.name])
				])));
};
var $author$project$Page$Textile$Simulator$findSimulationName = F2(
	function (savedSimulations, simulator) {
		if (simulator.$ === 'Ok') {
			var inputs = simulator.a.inputs;
			return A2(
				$elm$core$Maybe$withDefault,
				$author$project$Data$Textile$Inputs$toString(inputs),
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.name;
					},
					$elm$core$List$head(
						A2(
							$elm$core$List$filter,
							function (_v1) {
								var query = _v1.query;
								return _Utils_eq(
									$author$project$Data$Textile$Inputs$toQuery(inputs),
									query);
							},
							savedSimulations))));
		} else {
			return '';
		}
	});
var $author$project$Data$Impact$invalid = {
	description: 'Not applicable',
	label: 'Not applicable',
	pefData: $elm$core$Maybe$Nothing,
	primary: false,
	quality: $author$project$Data$Impact$GoodQuality,
	scopes: _List_Nil,
	source: {label: 'N/A', url: 'https://example.com/'},
	trigram: $author$project$Data$Impact$defaultTrigram,
	unit: 'N/A'
};
var $author$project$Data$Session$GenericError = F2(
	function (a, b) {
		return {$: 'GenericError', a: a, b: b};
	});
var $author$project$Data$Session$notifyError = F3(
	function (title, error, session) {
		var notifications = session.notifications;
		return _Utils_update(
			session,
			{
				notifications: _Utils_ap(
					notifications,
					_List_fromArray(
						[
							A2($author$project$Data$Session$GenericError, title, error)
						]))
			});
	});
var $author$project$Page$Textile$Simulator$init = F5(
	function (trigram, funit, viewMode, maybeUrlQuery, session) {
		var db = session.db;
		var store = session.store;
		var initialQuery = A2($elm$core$Maybe$withDefault, session.query, maybeUrlQuery);
		var simulator = A2($author$project$Data$Textile$Simulator$compute, db, initialQuery);
		return _Utils_Tuple3(
			{
				funit: funit,
				impact: A2(
					$elm$core$Result$withDefault,
					$author$project$Data$Impact$invalid,
					A2($author$project$Data$Impact$getDefinition, trigram, db.impacts)),
				initialQuery: initialQuery,
				linksTab: $author$project$Page$Textile$Simulator$SaveLink,
				massInput: $elm$core$String$fromFloat(
					$ianmackenzie$elm_units$Mass$inKilograms(initialQuery.mass)),
				modal: $author$project$Page$Textile$Simulator$NoModal,
				simulationName: A2($author$project$Page$Textile$Simulator$findSimulationName, store.savedSimulations, simulator),
				simulator: simulator,
				viewMode: viewMode
			},
			function () {
				if (simulator.$ === 'Err') {
					var error = simulator.a;
					return A3(
						$author$project$Data$Session$notifyError,
						'Erreur de récupération des paramètres d\'entrée',
						error,
						_Utils_update(
							session,
							{query: initialQuery}));
				} else {
					return _Utils_update(
						session,
						{query: initialQuery});
				}
			}(),
			function () {
				if (maybeUrlQuery.$ === 'Nothing') {
					return $author$project$Ports$scrollTo(
						{x: 0, y: 0});
				} else {
					return $elm$core$Platform$Cmd$none;
				}
			}());
	});
var $author$project$Main$setRoute = F2(
	function (maybeRoute, _v0) {
		var model = _v0.a;
		var session = model.session;
		var cmds = _v0.b;
		var toPage = F3(
			function (page, subMsg, _v9) {
				var subModel = _v9.a;
				var newSession = _v9.b;
				var subCmds = _v9.c;
				var storeCmd = (!_Utils_eq(model.session.store, newSession.store)) ? $author$project$Ports$saveStore(
					$author$project$Data$Session$serializeStore(newSession.store)) : $elm$core$Platform$Cmd$none;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							page: page(subModel),
							session: newSession
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								cmds,
								A2($elm$core$Platform$Cmd$map, subMsg, subCmds),
								storeCmd
							])));
			});
		if (maybeRoute.$ === 'Nothing') {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{page: $author$project$Main$NotFoundPage}),
				$elm$core$Platform$Cmd$none);
		} else {
			switch (maybeRoute.a.$) {
				case 'Home':
					var _v2 = maybeRoute.a;
					return A3(
						toPage,
						$author$project$Main$HomePage,
						$author$project$Main$HomeMsg,
						$author$project$Page$Home$init(session));
				case 'Api':
					var _v3 = maybeRoute.a;
					return A3(
						toPage,
						$author$project$Main$ApiPage,
						$author$project$Main$ApiMsg,
						$author$project$Page$Api$init(session));
				case 'Changelog':
					var _v4 = maybeRoute.a;
					return A3(
						toPage,
						$author$project$Main$ChangelogPage,
						$author$project$Main$ChangelogMsg,
						$author$project$Page$Changelog$init(session));
				case 'Editorial':
					var slug = maybeRoute.a.a;
					return A3(
						toPage,
						$author$project$Main$EditorialPage,
						$author$project$Main$EditorialMsg,
						A2($author$project$Page$Editorial$init, slug, session));
				case 'FoodSimulator':
					var _v5 = maybeRoute.a;
					return A3(
						toPage,
						$author$project$Main$FoodSimulatorPage,
						$author$project$Main$FoodSimulatorMsg,
						$author$project$Page$Food$Simulator$init(session));
				case 'Stats':
					var _v6 = maybeRoute.a;
					return A3(
						toPage,
						$author$project$Main$StatsPage,
						$author$project$Main$StatsMsg,
						$author$project$Page$Stats$init(session));
				case 'TextileExamples':
					var _v7 = maybeRoute.a;
					return A3(
						toPage,
						$author$project$Main$TextileExamplesPage,
						$author$project$Main$TextileExamplesMsg,
						$author$project$Page$Textile$Examples$init(session));
				case 'TextileExplore':
					var dataset = maybeRoute.a.a;
					return A3(
						toPage,
						$author$project$Main$TextileExplorePage,
						$author$project$Main$TextileExploreMsg,
						A2($author$project$Page$Textile$Explore$init, dataset, session));
				default:
					var _v8 = maybeRoute.a;
					var trigram = _v8.a;
					var funit = _v8.b;
					var detailed = _v8.c;
					var maybeQuery = _v8.d;
					return A3(
						toPage,
						$author$project$Main$TextileSimulatorPage,
						$author$project$Main$TextileSimulatorMsg,
						A5($author$project$Page$Textile$Simulator$init, trigram, funit, detailed, maybeQuery, session));
			}
		}
	});
var $elm$url$Url$addPort = F2(
	function (maybePort, starter) {
		if (maybePort.$ === 'Nothing') {
			return starter;
		} else {
			var port_ = maybePort.a;
			return starter + (':' + $elm$core$String$fromInt(port_));
		}
	});
var $elm$url$Url$addPrefixed = F3(
	function (prefix, maybeSegment, starter) {
		if (maybeSegment.$ === 'Nothing') {
			return starter;
		} else {
			var segment = maybeSegment.a;
			return _Utils_ap(
				starter,
				_Utils_ap(prefix, segment));
		}
	});
var $elm$url$Url$toString = function (url) {
	var http = function () {
		var _v0 = url.protocol;
		if (_v0.$ === 'Http') {
			return 'http://';
		} else {
			return 'https://';
		}
	}();
	return A3(
		$elm$url$Url$addPrefixed,
		'#',
		url.fragment,
		A3(
			$elm$url$Url$addPrefixed,
			'?',
			url.query,
			_Utils_ap(
				A2(
					$elm$url$Url$addPort,
					url.port_,
					_Utils_ap(http, url.host)),
				url.path)));
};
var $author$project$Page$Api$update = F3(
	function (session, _v0, model) {
		return _Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none);
	});
var $author$project$Page$Changelog$update = F3(
	function (session, msg, model) {
		if (msg.$ === 'ChangelogReceived') {
			var changelog = msg.a;
			return _Utils_Tuple3(
				_Utils_update(
					model,
					{changelog: changelog}),
				session,
				$elm$core$Platform$Cmd$none);
		} else {
			var posix = msg.a;
			return _Utils_Tuple3(
				_Utils_update(
					model,
					{time: posix}),
				session,
				$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Page$Editorial$update = F3(
	function (session, msg, model) {
		var content = msg.a;
		return _Utils_Tuple3(
			_Utils_update(
				model,
				{content: content}),
			session,
			$elm$core$Platform$Cmd$none);
	});
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $author$project$Data$Food$Product$getWeightAtPlant = function (step) {
	return $elm$core$List$sum(
		A2(
			$elm$core$List$map,
			function ($) {
				return $.amount;
			},
			step.material));
};
var $author$project$Data$Food$Product$updateAffectationAmounts = F2(
	function (amountRatio, items) {
		return A2(
			$elm$core$List$map,
			function (item) {
				return _Utils_update(
					item,
					{amount: item.amount * amountRatio});
			},
			items);
	});
var $author$project$Data$Food$Product$updatePlantAmounts = F2(
	function (amountRatio, step) {
		var transport = step.transport;
		var wasteTreatment = step.wasteTreatment;
		var energy = step.energy;
		var processing = step.processing;
		return _Utils_update(
			step,
			{
				energy: A2($author$project$Data$Food$Product$updateAffectationAmounts, amountRatio, energy),
				processing: A2($author$project$Data$Food$Product$updateAffectationAmounts, amountRatio, processing),
				transport: A2($author$project$Data$Food$Product$updateAffectationAmounts, amountRatio, transport),
				wasteTreatment: A2($author$project$Data$Food$Product$updateAffectationAmounts, amountRatio, wasteTreatment)
			});
	});
var $author$project$Data$Food$Product$updateStepAmounts = F2(
	function (amountRatio, step) {
		var material = step.material;
		var transport = step.transport;
		var wasteTreatment = step.wasteTreatment;
		var energy = step.energy;
		var processing = step.processing;
		return _Utils_update(
			step,
			{
				energy: A2($author$project$Data$Food$Product$updateAffectationAmounts, amountRatio, energy),
				material: A2($author$project$Data$Food$Product$updateAffectationAmounts, amountRatio, material),
				processing: A2($author$project$Data$Food$Product$updateAffectationAmounts, amountRatio, processing),
				transport: A2($author$project$Data$Food$Product$updateAffectationAmounts, amountRatio, transport),
				wasteTreatment: A2($author$project$Data$Food$Product$updateAffectationAmounts, amountRatio, wasteTreatment)
			});
	});
var $author$project$Data$Food$Product$updateProductAmounts = F2(
	function (originalWeight, product) {
		var consumer = product.consumer;
		var supermarket = product.supermarket;
		var distribution = product.distribution;
		var packaging = product.packaging;
		var plant = product.plant;
		var updatedWeight = $author$project$Data$Food$Product$getWeightAtPlant(plant);
		var amountRatio = updatedWeight / originalWeight;
		return _Utils_update(
			product,
			{
				consumer: A2($author$project$Data$Food$Product$updateStepAmounts, amountRatio, consumer),
				distribution: A2($author$project$Data$Food$Product$updateStepAmounts, amountRatio, distribution),
				packaging: A2($author$project$Data$Food$Product$updateStepAmounts, amountRatio, packaging),
				plant: A2($author$project$Data$Food$Product$updatePlantAmounts, amountRatio, plant),
				supermarket: A2($author$project$Data$Food$Product$updateStepAmounts, amountRatio, supermarket)
			});
	});
var $author$project$Data$Food$Product$addMaterial = F3(
	function (processes, processName, product) {
		var plant = product.plant;
		return A2(
			$elm$core$Result$map,
			function (process) {
				var originalWeight = $author$project$Data$Food$Product$getWeightAtPlant(plant);
				var amount = 1.0;
				var newItem = {amount: amount, comment: '', mainItem: false, process: process};
				var withAddedItem = _Utils_update(
					plant,
					{
						material: A2($elm$core$List$cons, newItem, plant.material)
					});
				return A2(
					$author$project$Data$Food$Product$updateProductAmounts,
					originalWeight,
					_Utils_update(
						product,
						{plant: withAddedItem}));
			},
			A2($author$project$Data$Food$Product$findProcessByName, processName, processes));
	});
var $author$project$Data$Food$Product$computeItemPefImpact = F2(
	function (definitions, item) {
		var process = item.process;
		return _Utils_update(
			item,
			{
				process: _Utils_update(
					process,
					{
						impacts: A2($author$project$Data$Impact$updatePefImpact, definitions, process.impacts)
					})
			});
	});
var $author$project$Data$Food$Product$computeItemsPefImpact = F2(
	function (definitions, items) {
		return A2(
			$elm$core$List$map,
			$author$project$Data$Food$Product$computeItemPefImpact(definitions),
			items);
	});
var $author$project$Data$Food$Product$computeStepPefImpact = F2(
	function (definitions, step) {
		return _Utils_update(
			step,
			{
				energy: A2($author$project$Data$Food$Product$computeItemsPefImpact, definitions, step.energy),
				material: A2($author$project$Data$Food$Product$computeItemsPefImpact, definitions, step.material),
				processing: A2($author$project$Data$Food$Product$computeItemsPefImpact, definitions, step.processing),
				transport: A2($author$project$Data$Food$Product$computeItemsPefImpact, definitions, step.transport),
				wasteTreatment: A2($author$project$Data$Food$Product$computeItemsPefImpact, definitions, step.wasteTreatment)
			});
	});
var $author$project$Data$Food$Product$computePefImpact = F2(
	function (definitions, product) {
		return _Utils_update(
			product,
			{
				consumer: A2($author$project$Data$Food$Product$computeStepPefImpact, definitions, product.consumer),
				distribution: A2($author$project$Data$Food$Product$computeStepPefImpact, definitions, product.distribution),
				packaging: A2($author$project$Data$Food$Product$computeStepPefImpact, definitions, product.packaging),
				plant: A2($author$project$Data$Food$Product$computeStepPefImpact, definitions, product.plant),
				supermarket: A2($author$project$Data$Food$Product$computeStepPefImpact, definitions, product.supermarket)
			});
	});
var $author$project$Data$Food$Product$findProductByName = function (productName) {
	var name = productName.a;
	return A2(
		$elm$core$Basics$composeR,
		$turboMaCk$any_dict$Dict$Any$get(productName),
		$elm$core$Result$fromMaybe('Produit introuvable par nom : ' + name));
};
var $author$project$Data$Food$Product$removeMaterial = F2(
	function (itemToRemove, product) {
		var plant = product.plant;
		var originalWeight = $author$project$Data$Food$Product$getWeightAtPlant(plant);
		return A2(
			$author$project$Data$Food$Product$updateProductAmounts,
			originalWeight,
			_Utils_update(
				product,
				{
					plant: _Utils_update(
						plant,
						{
							material: A2(
								$elm$core$List$filter,
								function (item) {
									return !_Utils_eq(item, itemToRemove);
								},
								plant.material)
						})
				}));
	});
var $author$project$Data$Food$Product$updateMaterialAmount = F3(
	function (itemToUpdate, amount, product) {
		var plant = product.plant;
		var originalWeight = $author$project$Data$Food$Product$getWeightAtPlant(plant);
		return A2(
			$author$project$Data$Food$Product$updateProductAmounts,
			originalWeight,
			_Utils_update(
				product,
				{
					plant: _Utils_update(
						plant,
						{
							material: A2(
								$elm$core$List$map,
								function (item) {
									return _Utils_eq(item, itemToUpdate) ? _Utils_update(
										item,
										{amount: amount}) : item;
								},
								plant.material)
						})
				}));
	});
var $author$project$Data$Food$Product$boatTransportName = $author$project$Data$Food$Product$ProcessName('Transport, freight, sea, transoceanic ship {GLO}| processing | Cut-off, S - Copied from Ecoinvent');
var $author$project$Data$Food$Product$emptyProcess = {
	categoryTags: _List_Nil,
	ciqualCode: $elm$core$Maybe$Nothing,
	code: '',
	dqr: $elm$core$Maybe$Nothing,
	emptyProcess: true,
	impacts: $author$project$Data$Impact$noImpacts,
	name: $author$project$Data$Food$Product$stringToProcessName('empty process'),
	simaproCategory: '',
	step: $elm$core$Maybe$Nothing,
	systemDescription: '',
	unit: ''
};
var $author$project$Data$Food$Product$lorryTransportName = $author$project$Data$Food$Product$ProcessName('Transport, freight, lorry 16-32 metric ton, EURO5 {RER}| transport, freight, lorry 16-32 metric ton, EURO5 | Cut-off, S - Copied from Ecoinvent');
var $author$project$Data$Food$Product$planeTransportName = $author$project$Data$Food$Product$ProcessName('Transport, freight, aircraft {RER}| intercontinental | Cut-off, S - Copied from Ecoinvent');
var $author$project$Data$Food$Product$updatePlantTransport = F6(
	function (originalProduct, processes, impactDefinitions, countryCode, distances, product) {
		var plant = product.plant;
		var plantWeight = $author$project$Data$Food$Product$getWeightAtPlant(product.plant);
		var toTonKm = function (km) {
			return ($ianmackenzie$elm_units$Length$inKilometers(km) * plantWeight) / 1000;
		};
		var originalPlantWeight = $author$project$Data$Food$Product$getWeightAtPlant(originalProduct.plant);
		var impacts = $author$project$Data$Impact$impactsFromDefinitons(impactDefinitions);
		var transport = A4($author$project$Data$Transport$getTransportBetween, impacts, countryCode, $author$project$Data$Food$Product$defaultCountry, distances);
		var transportWithRatio = A2(
			$author$project$Data$Textile$Formula$transportRatio,
			$author$project$Data$Unit$Ratio(0),
			transport);
		var findProcess = function (processName) {
			return A2(
				$elm$core$Maybe$withDefault,
				$author$project$Data$Food$Product$emptyProcess,
				A2($turboMaCk$any_dict$Dict$Any$get, processName, processes));
		};
		var transports = A2(
			$elm$core$List$map,
			function (_v0) {
				var name = _v0.a;
				var prop = _v0.b;
				return function (process) {
					return {
						amount: toTonKm(
							prop(transportWithRatio)),
						comment: '',
						mainItem: false,
						process: process
					};
				}(
					findProcess(name));
			},
			_List_fromArray(
				[
					_Utils_Tuple2(
					$author$project$Data$Food$Product$lorryTransportName,
					function ($) {
						return $.road;
					}),
					_Utils_Tuple2(
					$author$project$Data$Food$Product$boatTransportName,
					function ($) {
						return $.sea;
					}),
					_Utils_Tuple2(
					$author$project$Data$Food$Product$planeTransportName,
					function ($) {
						return $.air;
					})
				]));
		var defaultTransport = originalProduct.plant.transport;
		var amountRatio = plantWeight / originalPlantWeight;
		var defaultTransportWithAjustedWeight = A2($author$project$Data$Food$Product$updateAffectationAmounts, amountRatio, defaultTransport);
		return _Utils_update(
			product,
			{
				plant: _Utils_update(
					plant,
					{
						transport: _Utils_eq(countryCode, $author$project$Data$Food$Product$defaultCountry) ? defaultTransportWithAjustedWeight : transports
					})
			});
	});
var $author$project$Page$Food$Simulator$update = F3(
	function (session, msg, model) {
		var foodDb = session.foodDb;
		var db = session.db;
		var currentProductInfo = model.currentProductInfo;
		var _v0 = _Utils_Tuple2(msg, currentProductInfo);
		_v0$10:
		while (true) {
			switch (_v0.a.$) {
				case 'AddItem':
					if (_v0.b.$ === 'Just') {
						var _v1 = _v0.a;
						var selected = _v0.b.a;
						var _v2 = model.selectedItem;
						if (_v2.$ === 'Just') {
							var selectedItem = _v2.a;
							var productWithAddedItem = A3($author$project$Data$Food$Product$addMaterial, foodDb.processes, selectedItem, selected.product);
							var productWithPefScore = A2(
								$elm$core$Result$map,
								$author$project$Data$Food$Product$computePefImpact(session.db.impacts),
								productWithAddedItem);
							if (productWithPefScore.$ === 'Ok') {
								var updatedProduct = productWithPefScore.a;
								return _Utils_Tuple3(
									_Utils_update(
										model,
										{
											currentProductInfo: $elm$core$Maybe$Just(
												_Utils_update(
													selected,
													{product: updatedProduct})),
											selectedItem: $elm$core$Maybe$Nothing
										}),
									session,
									$elm$core$Platform$Cmd$none);
							} else {
								var message = productWithPefScore.a;
								return _Utils_Tuple3(
									_Utils_update(
										model,
										{selectedItem: $elm$core$Maybe$Nothing}),
									A3($author$project$Data$Session$notifyError, 'Erreur lors de l\'ajout de l\'ingrédient', message, session),
									$elm$core$Platform$Cmd$none);
							}
						} else {
							return _Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none);
						}
					} else {
						break _v0$10;
					}
				case 'CountrySelected':
					if (_v0.b.$ === 'Just') {
						var countryCode = _v0.a.a;
						var selected = _v0.b.a;
						var productWithUpdatedTransport = A6($author$project$Data$Food$Product$updatePlantTransport, selected.original, foodDb.processes, db.impacts, countryCode, db.transports, selected.product);
						var productWithPefScore = A2($author$project$Data$Food$Product$computePefImpact, session.db.impacts, productWithUpdatedTransport);
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{
									currentProductInfo: $elm$core$Maybe$Just(
										_Utils_update(
											selected,
											{product: productWithPefScore})),
									selectedCountry: countryCode
								}),
							session,
							$elm$core$Platform$Cmd$none);
					} else {
						break _v0$10;
					}
				case 'DeleteItem':
					if (_v0.b.$ === 'Just') {
						var processName = _v0.a.a;
						var selected = _v0.b.a;
						var productWithoutItem = A2($author$project$Data$Food$Product$removeMaterial, processName, selected.product);
						var productWithPefScore = A2($author$project$Data$Food$Product$computePefImpact, session.db.impacts, productWithoutItem);
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{
									currentProductInfo: $elm$core$Maybe$Just(
										_Utils_update(
											selected,
											{product: productWithPefScore}))
								}),
							session,
							$elm$core$Platform$Cmd$none);
					} else {
						break _v0$10;
					}
				case 'DbLoaded':
					switch (_v0.a.a.$) {
						case 'Success':
							var loadedDb = _v0.a.a.a;
							var _v4 = A2($author$project$Data$Food$Product$findProductByName, $author$project$Page$Food$Simulator$tunaPizza, loadedDb.products);
							if (_v4.$ === 'Ok') {
								var product = _v4.a;
								var productWithPefScore = A2($author$project$Data$Food$Product$computePefImpact, session.db.impacts, product);
								return _Utils_Tuple3(
									_Utils_update(
										model,
										{
											currentProductInfo: $elm$core$Maybe$Just(
												{original: productWithPefScore, product: productWithPefScore})
										}),
									_Utils_update(
										session,
										{foodDb: loadedDb}),
									$elm$core$Platform$Cmd$none);
							} else {
								var error = _v4.a;
								return _Utils_Tuple3(
									model,
									A3($author$project$Data$Session$notifyError, 'Erreur lors du chargement du produit', error, session),
									$elm$core$Platform$Cmd$none);
							}
						case 'Failure':
							var httpError = _v0.a.a.a;
							return _Utils_Tuple3(
								model,
								A2($author$project$Data$Session$notifyHttpError, httpError, session),
								$elm$core$Platform$Cmd$none);
						default:
							break _v0$10;
					}
				case 'ItemSelected':
					var itemName = _v0.a.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{selectedItem: itemName}),
						session,
						$elm$core$Platform$Cmd$none);
				case 'ItemAmountChanged':
					if ((_v0.a.b.$ === 'Just') && (_v0.b.$ === 'Just')) {
						var _v5 = _v0.a;
						var item = _v5.a;
						var newAmount = _v5.b.a;
						var selected = _v0.b.a;
						var product = selected.product;
						var updatedProduct = A3($author$project$Data$Food$Product$updateMaterialAmount, item, newAmount, product);
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{
									currentProductInfo: $elm$core$Maybe$Just(
										_Utils_update(
											selected,
											{product: updatedProduct}))
								}),
							session,
							$elm$core$Platform$Cmd$none);
					} else {
						break _v0$10;
					}
				case 'ProductSelected':
					var selectedProduct = _v0.a.a;
					var _v6 = A2($author$project$Data$Food$Product$findProductByName, selectedProduct, foodDb.products);
					if (_v6.$ === 'Ok') {
						var product = _v6.a;
						var productWithPefScore = A2($author$project$Data$Food$Product$computePefImpact, session.db.impacts, product);
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{
									currentProductInfo: $elm$core$Maybe$Just(
										{original: productWithPefScore, product: productWithPefScore}),
									selectedCountry: $author$project$Data$Food$Product$defaultCountry,
									selectedProduct: selectedProduct
								}),
							session,
							$elm$core$Platform$Cmd$none);
					} else {
						var error = _v6.a;
						return _Utils_Tuple3(
							model,
							A3($author$project$Data$Session$notifyError, 'Erreur lors du chargement du produit', error, session),
							$elm$core$Platform$Cmd$none);
					}
				case 'Reset':
					if (_v0.b.$ === 'Just') {
						var _v7 = _v0.a;
						var selected = _v0.b.a;
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{
									currentProductInfo: $elm$core$Maybe$Just(
										_Utils_update(
											selected,
											{product: selected.original})),
									selectedCountry: $author$project$Data$Food$Product$defaultCountry,
									selectedItem: $elm$core$Maybe$Nothing
								}),
							session,
							$elm$core$Platform$Cmd$none);
					} else {
						break _v0$10;
					}
				case 'SwitchImpact':
					var impact = _v0.a.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{impact: impact}),
						session,
						$elm$core$Platform$Cmd$none);
				default:
					break _v0$10;
			}
		}
		return _Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none);
	});
var $author$project$Page$Home$update = F3(
	function (session, msg, model) {
		if (msg.$ === 'GitbookContentReceived') {
			var gitbookData = msg.a;
			return _Utils_Tuple3(
				_Utils_update(
					model,
					{content: gitbookData}),
				session,
				$elm$core$Platform$Cmd$none);
		} else {
			var index = msg.a;
			return _Utils_Tuple3(
				_Utils_update(
					model,
					{
						isIsntSectionIndex: _Utils_eq(
							model.isIsntSectionIndex,
							$elm$core$Maybe$Just(index)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(index)
					}),
				session,
				$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Page$Stats$update = F3(
	function (session, msg, model) {
		switch (msg.$) {
			case 'ApiStats':
				var apiStats = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{apiStats: apiStats}),
					session,
					$elm$core$Platform$Cmd$none);
			case 'WebStats':
				var webStats = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{webStats: webStats}),
					session,
					$elm$core$Platform$Cmd$none);
			default:
				var mode = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{mode: mode}),
					session,
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Page$Textile$Examples$update = F3(
	function (session, msg, model) {
		if (msg.$ === 'SwitchImpact') {
			var impact = msg.a;
			return _Utils_Tuple3(
				_Utils_update(
					model,
					{impact: impact}),
				session,
				$elm$core$Platform$Cmd$none);
		} else {
			var funit = msg.a;
			return _Utils_Tuple3(
				_Utils_update(
					model,
					{funit: funit}),
				session,
				$elm$core$Platform$Cmd$none);
		}
	});
var $truqu$elm_base64$Base64$Encode$intToBase64 = function (i) {
	switch (i) {
		case 0:
			return 'A';
		case 1:
			return 'B';
		case 2:
			return 'C';
		case 3:
			return 'D';
		case 4:
			return 'E';
		case 5:
			return 'F';
		case 6:
			return 'G';
		case 7:
			return 'H';
		case 8:
			return 'I';
		case 9:
			return 'J';
		case 10:
			return 'K';
		case 11:
			return 'L';
		case 12:
			return 'M';
		case 13:
			return 'N';
		case 14:
			return 'O';
		case 15:
			return 'P';
		case 16:
			return 'Q';
		case 17:
			return 'R';
		case 18:
			return 'S';
		case 19:
			return 'T';
		case 20:
			return 'U';
		case 21:
			return 'V';
		case 22:
			return 'W';
		case 23:
			return 'X';
		case 24:
			return 'Y';
		case 25:
			return 'Z';
		case 26:
			return 'a';
		case 27:
			return 'b';
		case 28:
			return 'c';
		case 29:
			return 'd';
		case 30:
			return 'e';
		case 31:
			return 'f';
		case 32:
			return 'g';
		case 33:
			return 'h';
		case 34:
			return 'i';
		case 35:
			return 'j';
		case 36:
			return 'k';
		case 37:
			return 'l';
		case 38:
			return 'm';
		case 39:
			return 'n';
		case 40:
			return 'o';
		case 41:
			return 'p';
		case 42:
			return 'q';
		case 43:
			return 'r';
		case 44:
			return 's';
		case 45:
			return 't';
		case 46:
			return 'u';
		case 47:
			return 'v';
		case 48:
			return 'w';
		case 49:
			return 'x';
		case 50:
			return 'y';
		case 51:
			return 'z';
		case 52:
			return '0';
		case 53:
			return '1';
		case 54:
			return '2';
		case 55:
			return '3';
		case 56:
			return '4';
		case 57:
			return '5';
		case 58:
			return '6';
		case 59:
			return '7';
		case 60:
			return '8';
		case 61:
			return '9';
		case 62:
			return '+';
		default:
			return '/';
	}
};
var $truqu$elm_base64$Base64$Encode$toBase64 = function (_int) {
	return _Utils_ap(
		$truqu$elm_base64$Base64$Encode$intToBase64(63 & (_int >>> 18)),
		_Utils_ap(
			$truqu$elm_base64$Base64$Encode$intToBase64(63 & (_int >>> 12)),
			_Utils_ap(
				$truqu$elm_base64$Base64$Encode$intToBase64(63 & (_int >>> 6)),
				$truqu$elm_base64$Base64$Encode$intToBase64(63 & (_int >>> 0)))));
};
var $truqu$elm_base64$Base64$Encode$add = F2(
	function (_char, _v0) {
		var res = _v0.a;
		var count = _v0.b;
		var acc = _v0.c;
		var current = (acc << 8) | _char;
		if (count === 2) {
			return _Utils_Tuple3(
				_Utils_ap(
					res,
					$truqu$elm_base64$Base64$Encode$toBase64(current)),
				0,
				0);
		} else {
			return _Utils_Tuple3(res, count + 1, current);
		}
	});
var $truqu$elm_base64$Base64$Encode$chomp = F2(
	function (char_, acc) {
		var _char = $elm$core$Char$toCode(char_);
		return (_char < 128) ? A2($truqu$elm_base64$Base64$Encode$add, _char, acc) : ((_char < 2048) ? A2(
			$truqu$elm_base64$Base64$Encode$add,
			128 | (63 & _char),
			A2($truqu$elm_base64$Base64$Encode$add, 192 | (_char >>> 6), acc)) : (((_char < 55296) || ((_char >= 57344) && (_char <= 65535))) ? A2(
			$truqu$elm_base64$Base64$Encode$add,
			128 | (63 & _char),
			A2(
				$truqu$elm_base64$Base64$Encode$add,
				128 | (63 & (_char >>> 6)),
				A2($truqu$elm_base64$Base64$Encode$add, 224 | (_char >>> 12), acc))) : A2(
			$truqu$elm_base64$Base64$Encode$add,
			128 | (63 & _char),
			A2(
				$truqu$elm_base64$Base64$Encode$add,
				128 | (63 & (_char >>> 6)),
				A2(
					$truqu$elm_base64$Base64$Encode$add,
					128 | (63 & (_char >>> 12)),
					A2($truqu$elm_base64$Base64$Encode$add, 240 | (_char >>> 18), acc))))));
	});
var $truqu$elm_base64$Base64$Encode$initial = _Utils_Tuple3('', 0, 0);
var $truqu$elm_base64$Base64$Encode$wrapUp = function (_v0) {
	var res = _v0.a;
	var cnt = _v0.b;
	var acc = _v0.c;
	switch (cnt) {
		case 1:
			return res + ($truqu$elm_base64$Base64$Encode$intToBase64(63 & (acc >>> 2)) + ($truqu$elm_base64$Base64$Encode$intToBase64(63 & (acc << 4)) + '=='));
		case 2:
			return res + ($truqu$elm_base64$Base64$Encode$intToBase64(63 & (acc >>> 10)) + ($truqu$elm_base64$Base64$Encode$intToBase64(63 & (acc >>> 4)) + ($truqu$elm_base64$Base64$Encode$intToBase64(63 & (acc << 2)) + '=')));
		default:
			return res;
	}
};
var $truqu$elm_base64$Base64$Encode$encode = function (input) {
	return $truqu$elm_base64$Base64$Encode$wrapUp(
		A3($elm$core$String$foldl, $truqu$elm_base64$Base64$Encode$chomp, $truqu$elm_base64$Base64$Encode$initial, input));
};
var $truqu$elm_base64$Base64$encode = $truqu$elm_base64$Base64$Encode$encode;
var $author$project$Data$Textile$Inputs$b64encode = A2(
	$elm$core$Basics$composeR,
	$author$project$Data$Textile$Inputs$encodeQuery,
	A2(
		$elm$core$Basics$composeR,
		$elm$json$Json$Encode$encode(0),
		$truqu$elm_base64$Base64$encode));
var $author$project$Data$Unit$functionalToSlug = function (funit) {
	if (funit.$ === 'PerDayOfWear') {
		return 'per-day';
	} else {
		return 'per-item';
	}
};
var $author$project$Data$Textile$Db$datasetStrings = function (dataset) {
	switch (dataset.$) {
		case 'Countries':
			return {label: 'Pays', slug: 'countries'};
		case 'Impacts':
			return {label: 'Impacts', slug: 'impacts'};
		case 'Products':
			return {label: 'Produits', slug: 'products'};
		default:
			return {label: 'Matières', slug: 'materials'};
	}
};
var $author$project$Data$Textile$Db$datasetSlug = A2(
	$elm$core$Basics$composeR,
	$author$project$Data$Textile$Db$datasetStrings,
	function ($) {
		return $.slug;
	});
var $author$project$Data$Textile$Db$toDatasetRoutePath = function (dataset) {
	switch (dataset.$) {
		case 'Countries':
			if (dataset.a.$ === 'Nothing') {
				var _v1 = dataset.a;
				return _List_Nil;
			} else {
				var code = dataset.a.a;
				return _List_fromArray(
					[
						$author$project$Data$Textile$Db$datasetSlug(dataset),
						$author$project$Data$Country$codeToString(code)
					]);
			}
		case 'Impacts':
			if (dataset.a.$ === 'Nothing') {
				var _v2 = dataset.a;
				return _List_fromArray(
					[
						$author$project$Data$Textile$Db$datasetSlug(dataset)
					]);
			} else {
				var trigram = dataset.a.a;
				return _List_fromArray(
					[
						$author$project$Data$Textile$Db$datasetSlug(dataset),
						$author$project$Data$Impact$toString(trigram)
					]);
			}
		case 'Products':
			if (dataset.a.$ === 'Nothing') {
				var _v3 = dataset.a;
				return _List_fromArray(
					[
						$author$project$Data$Textile$Db$datasetSlug(dataset)
					]);
			} else {
				var id = dataset.a.a;
				return _List_fromArray(
					[
						$author$project$Data$Textile$Db$datasetSlug(dataset),
						$author$project$Data$Textile$Product$idToString(id)
					]);
			}
		default:
			if (dataset.a.$ === 'Nothing') {
				var _v4 = dataset.a;
				return _List_fromArray(
					[
						$author$project$Data$Textile$Db$datasetSlug(dataset)
					]);
			} else {
				var id = dataset.a.a;
				return _List_fromArray(
					[
						$author$project$Data$Textile$Db$datasetSlug(dataset),
						$author$project$Data$Textile$Material$idToString(id)
					]);
			}
	}
};
var $author$project$Page$Textile$Simulator$ViewMode$toUrlSegment = function (viewMode) {
	switch (viewMode.$) {
		case 'Dataviz':
			return 'dataviz';
		case 'Simple':
			return 'simple';
		default:
			return 'detailed';
	}
};
var $author$project$Route$toString = function (route) {
	var pieces = function () {
		switch (route.$) {
			case 'Home':
				return _List_Nil;
			case 'Api':
				return _List_fromArray(
					['api']);
			case 'Changelog':
				return _List_fromArray(
					['changelog']);
			case 'Editorial':
				var slug = route.a;
				return _List_fromArray(
					['pages', slug]);
			case 'FoodSimulator':
				return _List_fromArray(
					['food']);
			case 'TextileExamples':
				return _List_fromArray(
					['textile', 'examples']);
			case 'TextileExplore':
				if ((route.a.$ === 'Countries') && (route.a.a.$ === 'Nothing')) {
					var _v1 = route.a.a;
					return _List_fromArray(
						['textile', 'explore']);
				} else {
					var dataset = route.a;
					return A2(
						$elm$core$List$cons,
						'textile',
						A2(
							$elm$core$List$cons,
							'explore',
							$author$project$Data$Textile$Db$toDatasetRoutePath(dataset)));
				}
			case 'TextileSimulator':
				if (route.d.$ === 'Just') {
					var trigram = route.a;
					var funit = route.b;
					var viewMode = route.c;
					var query = route.d.a;
					return _List_fromArray(
						[
							'textile',
							'simulator',
							$author$project$Data$Impact$toString(trigram),
							$author$project$Data$Unit$functionalToSlug(funit),
							$author$project$Page$Textile$Simulator$ViewMode$toUrlSegment(viewMode),
							$author$project$Data$Textile$Inputs$b64encode(query)
						]);
				} else {
					if ((route.a.a === 'pef') && (route.b.$ === 'PerItem')) {
						var _v2 = route.b;
						var _v3 = route.d;
						return _List_fromArray(
							['textile', 'simulator']);
					} else {
						var trigram = route.a;
						var funit = route.b;
						var viewMode = route.c;
						var _v4 = route.d;
						return _List_fromArray(
							[
								'textile',
								'simulator',
								$author$project$Data$Impact$toString(trigram),
								$author$project$Data$Unit$functionalToSlug(funit),
								$author$project$Page$Textile$Simulator$ViewMode$toUrlSegment(viewMode)
							]);
					}
				}
			default:
				return _List_fromArray(
					['stats']);
		}
	}();
	return '#/' + A2($elm$core$String$join, '/', pieces);
};
var $author$project$Page$Textile$Explore$update = F3(
	function (session, msg, model) {
		if (msg.$ === 'NoOp') {
			return _Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none);
		} else {
			return _Utils_Tuple3(
				model,
				session,
				A2(
					$elm$browser$Browser$Navigation$pushUrl,
					session.navKey,
					function () {
						var _v1 = model.dataset;
						switch (_v1.$) {
							case 'Countries':
								return $author$project$Route$toString(
									$author$project$Route$TextileExplore(
										$author$project$Data$Textile$Db$Countries($elm$core$Maybe$Nothing)));
							case 'Impacts':
								return $author$project$Route$toString(
									$author$project$Route$TextileExplore(
										$author$project$Data$Textile$Db$Impacts($elm$core$Maybe$Nothing)));
							case 'Products':
								return $author$project$Route$toString(
									$author$project$Route$TextileExplore(
										$author$project$Data$Textile$Db$Products($elm$core$Maybe$Nothing)));
							default:
								return $author$project$Route$toString(
									$author$project$Route$TextileExplore(
										$author$project$Data$Textile$Db$Materials($elm$core$Maybe$Nothing)));
						}
					}()));
		}
	});
var $author$project$Page$Textile$Simulator$SavedSimulationsModal = {$: 'SavedSimulationsModal'};
var $elm_community$list_extra$List$Extra$last = function (items) {
	last:
	while (true) {
		if (!items.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!items.b.b) {
				var x = items.a;
				return $elm$core$Maybe$Just(x);
			} else {
				var rest = items.b;
				var $temp$items = rest;
				items = $temp$items;
				continue last;
			}
		}
	}
};
var $author$project$Data$Textile$Inputs$addMaterial = F2(
	function (db, query) {
		var notUsed = function (id) {
			return !A2(
				$elm$core$List$member,
				id,
				A2(
					$elm$core$List$map,
					function ($) {
						return $.id;
					},
					query.materials));
		};
		var _v0 = _Utils_Tuple3(
			$elm$core$List$length(query.materials),
			$author$project$Data$Textile$Material$Id('pet'),
			$author$project$Data$Textile$Material$Id('pu'));
		var length = _v0.a;
		var polyester = _v0.b;
		var elasthanne = _v0.c;
		var newMaterialId = ((length === 1) && notUsed(polyester)) ? $elm$core$Maybe$Just(polyester) : (((length === 2) && notUsed(elasthanne)) ? $elm$core$Maybe$Just(elasthanne) : $elm_community$list_extra$List$Extra$last(
			A2(
				$elm$core$List$map,
				function ($) {
					return $.id;
				},
				A2(
					$elm$core$List$sortBy,
					function ($) {
						return $.priority;
					},
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.id;
							},
							notUsed),
						db.materials)))));
		if (newMaterialId.$ === 'Just') {
			var id = newMaterialId.a;
			return _Utils_update(
				query,
				{
					materials: _Utils_ap(
						query.materials,
						_List_fromArray(
							[
								{
								id: id,
								share: $author$project$Data$Unit$ratio(0)
							}
							]))
				});
		} else {
			return query;
		}
	});
var $author$project$Data$Session$maxComparedSimulations = 12;
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $elm$core$Set$size = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$size(dict);
};
var $author$project$Data$Session$updateStore = F2(
	function (update, session) {
		return _Utils_update(
			session,
			{
				store: update(session.store)
			});
	});
var $author$project$Data$Session$checkComparedSimulations = function (session) {
	return (!$elm$core$Set$size(session.store.comparedSimulations)) ? A2(
		$author$project$Data$Session$updateStore,
		function (store) {
			return _Utils_update(
				store,
				{
					comparedSimulations: $elm$core$Set$fromList(
						A2(
							$elm$core$List$map,
							function ($) {
								return $.name;
							},
							A2($elm$core$List$take, $author$project$Data$Session$maxComparedSimulations, store.savedSimulations)))
				});
		},
		session) : session;
};
var $author$project$Ports$copyToClipboard = _Platform_outgoingPort('copyToClipboard', $elm$json$Json$Encode$string);
var $elm$core$Dict$filter = F2(
	function (isGood, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, d) {
					return A2(isGood, k, v) ? A3($elm$core$Dict$insert, k, v, d) : d;
				}),
			$elm$core$Dict$empty,
			dict);
	});
var $elm$core$Set$filter = F2(
	function (isGood, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A2(
				$elm$core$Dict$filter,
				F2(
					function (key, _v1) {
						return isGood(key);
					}),
				dict));
	});
var $author$project$Data$Session$deleteSimulation = function (simulation) {
	return $author$project$Data$Session$updateStore(
		function (store) {
			return _Utils_update(
				store,
				{
					comparedSimulations: A2(
						$elm$core$Set$filter,
						$elm$core$Basics$neq(simulation.name),
						store.comparedSimulations),
					savedSimulations: A2(
						$elm$core$List$filter,
						$elm$core$Basics$neq(simulation),
						store.savedSimulations)
				});
		});
};
var $elm_community$list_extra$List$Extra$removeAt = F2(
	function (index, l) {
		if (index < 0) {
			return l;
		} else {
			var _v0 = A2($elm$core$List$drop, index, l);
			if (!_v0.b) {
				return l;
			} else {
				var rest = _v0.b;
				return _Utils_ap(
					A2($elm$core$List$take, index, l),
					rest);
			}
		}
	});
var $elm_community$list_extra$List$Extra$updateAt = F3(
	function (index, fn, list) {
		if (index < 0) {
			return list;
		} else {
			var tail = A2($elm$core$List$drop, index, list);
			var head = A2($elm$core$List$take, index, list);
			if (tail.b) {
				var x = tail.a;
				var xs = tail.b;
				return _Utils_ap(
					head,
					A2(
						$elm$core$List$cons,
						fn(x),
						xs));
			} else {
				return list;
			}
		}
	});
var $author$project$Data$Textile$Inputs$updateMaterialAt = F3(
	function (index, update, query) {
		return _Utils_update(
			query,
			{
				materials: A3($elm_community$list_extra$List$Extra$updateAt, index, update, query.materials)
			});
	});
var $author$project$Data$Textile$Inputs$updateMaterialShare = F2(
	function (index, share) {
		return A2(
			$author$project$Data$Textile$Inputs$updateMaterialAt,
			index,
			function (m) {
				return _Utils_update(
					m,
					{share: share});
			});
	});
var $author$project$Data$Textile$Inputs$removeMaterial = F2(
	function (index, query) {
		return function (q) {
			var materials = q.materials;
			return ($elm$core$List$length(materials) === 1) ? A3(
				$author$project$Data$Textile$Inputs$updateMaterialShare,
				0,
				$author$project$Data$Unit$ratio(1),
				q) : q;
		}(
			_Utils_update(
				query,
				{
					materials: A2($elm_community$list_extra$List$Extra$removeAt, index, query.materials)
				}));
	});
var $author$project$Data$Session$saveSimulation = function (simulation) {
	return $author$project$Data$Session$updateStore(
		function (store) {
			return _Utils_update(
				store,
				{
					savedSimulations: A2($elm$core$List$cons, simulation, store.savedSimulations)
				});
		});
};
var $author$project$Ports$selectInputText = _Platform_outgoingPort('selectInputText', $elm$json$Json$Encode$string);
var $author$project$Page$Textile$Simulator$ViewMode$DetailedStep = function (a) {
	return {$: 'DetailedStep', a: a};
};
var $author$project$Page$Textile$Simulator$ViewMode$toggle = F2(
	function (index, viewMode) {
		switch (viewMode.$) {
			case 'Dataviz':
				return $author$project$Page$Textile$Simulator$ViewMode$Dataviz;
			case 'DetailedAll':
				return $author$project$Page$Textile$Simulator$ViewMode$Simple;
			case 'DetailedStep':
				var current = viewMode.a;
				return _Utils_eq(index, current) ? $author$project$Page$Textile$Simulator$ViewMode$Simple : $author$project$Page$Textile$Simulator$ViewMode$DetailedStep(index);
			default:
				return $author$project$Page$Textile$Simulator$ViewMode$DetailedStep(index);
		}
	});
var $elm$core$Set$remove = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$remove, key, dict));
	});
var $author$project$Data$Session$toggleComparedSimulation = F2(
	function (name, checked) {
		return $author$project$Data$Session$updateStore(
			function (store) {
				return _Utils_update(
					store,
					{
						comparedSimulations: checked ? A2($elm$core$Set$insert, name, store.comparedSimulations) : A2($elm$core$Set$remove, name, store.comparedSimulations)
					});
			});
	});
var $author$project$Data$Textile$Inputs$toggleStep = F2(
	function (label, query) {
		return _Utils_update(
			query,
			{
				disabledSteps: A2($elm$core$List$member, label, query.disabledSteps) ? A2(
					$elm$core$List$filter,
					$elm$core$Basics$neq(label),
					query.disabledSteps) : A2($elm$core$List$cons, label, query.disabledSteps)
			});
	});
var $author$project$Data$Textile$Inputs$updateMaterial = F2(
	function (index, _v0) {
		var id = _v0.id;
		return A2(
			$author$project$Data$Textile$Inputs$updateMaterialAt,
			index,
			function (m) {
				var share = m.share;
				return _Utils_update(
					m,
					{id: id, share: share});
			});
	});
var $author$project$Data$Textile$Inputs$updateProduct = F2(
	function (product, query) {
		return (!_Utils_eq(product.id, query.product)) ? _Utils_update(
			query,
			{disabledFading: $elm$core$Maybe$Nothing, makingWaste: $elm$core$Maybe$Nothing, mass: product.mass, picking: $elm$core$Maybe$Nothing, product: product.id, quality: $elm$core$Maybe$Nothing, reparability: $elm$core$Maybe$Nothing, surfaceMass: $elm$core$Maybe$Nothing}) : query;
	});
var $author$project$Page$Textile$Simulator$updateQuery = F2(
	function (query, _v0) {
		var model = _v0.a;
		var session = _v0.b;
		var msg = _v0.c;
		var updatedSimulator = A2($author$project$Data$Textile$Simulator$compute, session.db, query);
		return _Utils_Tuple3(
			_Utils_update(
				model,
				{
					simulationName: A2($author$project$Page$Textile$Simulator$findSimulationName, session.store.savedSimulations, updatedSimulator),
					simulator: updatedSimulator
				}),
			_Utils_update(
				session,
				{query: query}),
			msg);
	});
var $author$project$Data$Textile$Inputs$updateStepCountry = F3(
	function (label, code, query) {
		switch (label.$) {
			case 'Spinning':
				return _Utils_update(
					query,
					{
						countrySpinning: $elm$core$Maybe$Just(code)
					});
			case 'Fabric':
				return _Utils_update(
					query,
					{countryFabric: code});
			case 'Dyeing':
				return _Utils_update(
					query,
					{
						countryDyeing: code,
						dyeingWeighting: (!_Utils_eq(query.countryDyeing, code)) ? $elm$core$Maybe$Nothing : query.dyeingWeighting
					});
			case 'Making':
				return _Utils_update(
					query,
					{
						airTransportRatio: (!_Utils_eq(query.countryMaking, code)) ? $elm$core$Maybe$Nothing : query.airTransportRatio,
						countryMaking: code
					});
			default:
				return query;
		}
	});
var $author$project$Page$Textile$Simulator$update = F3(
	function (session, msg, model) {
		var db = session.db;
		var query = session.query;
		var navKey = session.navKey;
		switch (msg.$) {
			case 'AddMaterial':
				return A2(
					$author$project$Page$Textile$Simulator$updateQuery,
					A2($author$project$Data$Textile$Inputs$addMaterial, db, query),
					_Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none));
			case 'CopyToClipBoard':
				var shareableLink = msg.a;
				return _Utils_Tuple3(
					model,
					session,
					$author$project$Ports$copyToClipboard(shareableLink));
			case 'DeleteSavedSimulation':
				var savedSimulation = msg.a;
				return _Utils_Tuple3(
					model,
					A2($author$project$Data$Session$deleteSimulation, savedSimulation, session),
					$elm$core$Platform$Cmd$none);
			case 'RemoveMaterial':
				var index = msg.a;
				return A2(
					$author$project$Page$Textile$Simulator$updateQuery,
					A2($author$project$Data$Textile$Inputs$removeMaterial, index, query),
					_Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none));
			case 'NoOp':
				return _Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none);
			case 'OpenComparator':
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{modal: $author$project$Page$Textile$Simulator$SavedSimulationsModal}),
					$author$project$Data$Session$checkComparedSimulations(session),
					$elm$core$Platform$Cmd$none);
			case 'Reset':
				return A2(
					$author$project$Page$Textile$Simulator$updateQuery,
					$author$project$Data$Textile$Inputs$defaultQuery,
					_Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none));
			case 'SaveSimulation':
				return _Utils_Tuple3(
					model,
					A2(
						$author$project$Data$Session$saveSimulation,
						{
							name: $elm$core$String$trim(model.simulationName),
							query: query
						},
						session),
					$elm$core$Platform$Cmd$none);
			case 'SelectInputText':
				var index = msg.a;
				return _Utils_Tuple3(
					model,
					session,
					$author$project$Ports$selectInputText(index));
			case 'SetModal':
				var modal = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{modal: modal}),
					session,
					$elm$core$Platform$Cmd$none);
			case 'SwitchFunctionalUnit':
				var funit = msg.a;
				return _Utils_Tuple3(
					model,
					session,
					A2(
						$elm$browser$Browser$Navigation$pushUrl,
						navKey,
						$author$project$Route$toString(
							A4(
								$author$project$Route$TextileSimulator,
								model.impact.trigram,
								funit,
								model.viewMode,
								$elm$core$Maybe$Just(query)))));
			case 'SwitchImpact':
				var trigram = msg.a;
				return _Utils_Tuple3(
					model,
					session,
					A2(
						$elm$browser$Browser$Navigation$pushUrl,
						navKey,
						$author$project$Route$toString(
							A4(
								$author$project$Route$TextileSimulator,
								trigram,
								model.funit,
								model.viewMode,
								$elm$core$Maybe$Just(query)))));
			case 'SwitchLinksTab':
				var linksTab = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{linksTab: linksTab}),
					session,
					$elm$core$Platform$Cmd$none);
			case 'ToggleComparedSimulation':
				var name = msg.a;
				var checked = msg.b;
				return _Utils_Tuple3(
					model,
					A3($author$project$Data$Session$toggleComparedSimulation, name, checked, session),
					$elm$core$Platform$Cmd$none);
			case 'ToggleDisabledFading':
				var disabledFading = msg.a;
				return A2(
					$author$project$Page$Textile$Simulator$updateQuery,
					_Utils_update(
						query,
						{
							disabledFading: $elm$core$Maybe$Just(disabledFading)
						}),
					_Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none));
			case 'ToggleStep':
				var label = msg.a;
				return A2(
					$author$project$Page$Textile$Simulator$updateQuery,
					A2($author$project$Data$Textile$Inputs$toggleStep, label, query),
					_Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none));
			case 'ToggleStepViewMode':
				var index = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							viewMode: A2($author$project$Page$Textile$Simulator$ViewMode$toggle, index, model.viewMode)
						}),
					session,
					$elm$core$Platform$Cmd$none);
			case 'UpdateAirTransportRatio':
				var airTransportRatio = msg.a;
				return A2(
					$author$project$Page$Textile$Simulator$updateQuery,
					_Utils_update(
						query,
						{airTransportRatio: airTransportRatio}),
					_Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none));
			case 'UpdateDyeingWeighting':
				var dyeingWeighting = msg.a;
				return A2(
					$author$project$Page$Textile$Simulator$updateQuery,
					_Utils_update(
						query,
						{dyeingWeighting: dyeingWeighting}),
					_Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none));
			case 'UpdateMakingWaste':
				var makingWaste = msg.a;
				return A2(
					$author$project$Page$Textile$Simulator$updateQuery,
					_Utils_update(
						query,
						{makingWaste: makingWaste}),
					_Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none));
			case 'UpdateMassInput':
				var massInput = msg.a;
				var _v1 = A2(
					$elm$core$Maybe$map,
					$ianmackenzie$elm_units$Mass$kilograms,
					$elm$core$String$toFloat(massInput));
				if (_v1.$ === 'Just') {
					var mass = _v1.a;
					return A2(
						$author$project$Page$Textile$Simulator$updateQuery,
						_Utils_update(
							query,
							{mass: mass}),
						_Utils_Tuple3(
							_Utils_update(
								model,
								{massInput: massInput}),
							session,
							$elm$core$Platform$Cmd$none));
				} else {
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{massInput: massInput}),
						session,
						$elm$core$Platform$Cmd$none);
				}
			case 'UpdateMaterial':
				var index = msg.a;
				var materialId = msg.b;
				var _v2 = A2($author$project$Data$Textile$Material$findById, materialId, db.materials);
				if (_v2.$ === 'Ok') {
					var material = _v2.a;
					return A2(
						$author$project$Page$Textile$Simulator$updateQuery,
						A3($author$project$Data$Textile$Inputs$updateMaterial, index, material, query),
						_Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none));
				} else {
					var error = _v2.a;
					return _Utils_Tuple3(
						model,
						A3($author$project$Data$Session$notifyError, 'Erreur de matière première', error, session),
						$elm$core$Platform$Cmd$none);
				}
			case 'UpdateMaterialShare':
				var index = msg.a;
				var share = msg.b;
				return A2(
					$author$project$Page$Textile$Simulator$updateQuery,
					A3($author$project$Data$Textile$Inputs$updateMaterialShare, index, share, query),
					_Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none));
			case 'UpdatePicking':
				var picking = msg.a;
				return A2(
					$author$project$Page$Textile$Simulator$updateQuery,
					_Utils_update(
						query,
						{picking: picking}),
					_Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none));
			case 'UpdateProduct':
				var productId = msg.a;
				var _v3 = A2($author$project$Data$Textile$Product$findById, productId, db.products);
				if (_v3.$ === 'Ok') {
					var product = _v3.a;
					return A2(
						$author$project$Page$Textile$Simulator$updateQuery,
						A2($author$project$Data$Textile$Inputs$updateProduct, product, query),
						_Utils_Tuple3(
							_Utils_update(
								model,
								{
									massInput: $elm$core$String$fromFloat(
										$ianmackenzie$elm_units$Mass$inKilograms(product.mass))
								}),
							session,
							$elm$core$Platform$Cmd$none));
				} else {
					var error = _v3.a;
					return _Utils_Tuple3(
						model,
						A3($author$project$Data$Session$notifyError, 'Erreur de produit', error, session),
						$elm$core$Platform$Cmd$none);
				}
			case 'UpdateQuality':
				var quality = msg.a;
				return A2(
					$author$project$Page$Textile$Simulator$updateQuery,
					_Utils_update(
						query,
						{quality: quality}),
					_Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none));
			case 'UpdateReparability':
				var reparability = msg.a;
				return A2(
					$author$project$Page$Textile$Simulator$updateQuery,
					_Utils_update(
						query,
						{reparability: reparability}),
					_Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none));
			case 'UpdateSimulationName':
				var newName = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{simulationName: newName}),
					session,
					$elm$core$Platform$Cmd$none);
			case 'UpdateStepCountry':
				var label = msg.a;
				var code = msg.b;
				return A2(
					$author$project$Page$Textile$Simulator$updateQuery,
					A3($author$project$Data$Textile$Inputs$updateStepCountry, label, code, query),
					_Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none));
			default:
				var surfaceMass = msg.a;
				return A2(
					$author$project$Page$Textile$Simulator$updateQuery,
					_Utils_update(
						query,
						{surfaceMass: surfaceMass}),
					_Utils_Tuple3(model, session, $elm$core$Platform$Cmd$none));
		}
	});
var $author$project$Request$Version$NewerVersion = {$: 'NewerVersion'};
var $author$project$Request$Version$Version = function (a) {
	return {$: 'Version', a: a};
};
var $author$project$Request$Version$updateVersion = F2(
	function (currentVersion, webData) {
		if (webData.$ === 'Success') {
			var v = webData.a;
			switch (currentVersion.$) {
				case 'Version':
					var currentV = currentVersion.a;
					return (!_Utils_eq(currentV, v)) ? $author$project$Request$Version$NewerVersion : currentVersion;
				case 'NewerVersion':
					return currentVersion;
				default:
					return $author$project$Request$Version$Version(v);
			}
		} else {
			return currentVersion;
		}
	});
var $author$project$Main$update = F2(
	function (msg, model) {
		var page = model.page;
		var session = model.session;
		var toPage = F3(
			function (toModel, toMsg, _v8) {
				var newModel = _v8.a;
				var newSession = _v8.b;
				var newCmd = _v8.c;
				var storeCmd = (!_Utils_eq(session.store, newSession.store)) ? $author$project$Ports$saveStore(
					$author$project$Data$Session$serializeStore(newSession.store)) : $elm$core$Platform$Cmd$none;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							page: toModel(newModel),
							session: newSession
						}),
					A2(
						$elm$core$Platform$Cmd$map,
						toMsg,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[newCmd, storeCmd]))));
			});
		var _v0 = _Utils_Tuple2(msg, page);
		_v0$22:
		while (true) {
			_v0$23:
			while (true) {
				switch (_v0.a.$) {
					case 'HomeMsg':
						switch (_v0.b.$) {
							case 'HomePage':
								var homeMsg = _v0.a.a;
								var homeModel = _v0.b.a;
								return A3(
									toPage,
									$author$project$Main$HomePage,
									$author$project$Main$HomeMsg,
									A3($author$project$Page$Home$update, session, homeMsg, homeModel));
							case 'NotFoundPage':
								break _v0$22;
							default:
								break _v0$23;
						}
					case 'ApiMsg':
						switch (_v0.b.$) {
							case 'ApiPage':
								var changelogMsg = _v0.a.a;
								var changelogModel = _v0.b.a;
								return A3(
									toPage,
									$author$project$Main$ApiPage,
									$author$project$Main$ApiMsg,
									A3($author$project$Page$Api$update, session, changelogMsg, changelogModel));
							case 'NotFoundPage':
								break _v0$22;
							default:
								break _v0$23;
						}
					case 'ChangelogMsg':
						switch (_v0.b.$) {
							case 'ChangelogPage':
								var changelogMsg = _v0.a.a;
								var changelogModel = _v0.b.a;
								return A3(
									toPage,
									$author$project$Main$ChangelogPage,
									$author$project$Main$ChangelogMsg,
									A3($author$project$Page$Changelog$update, session, changelogMsg, changelogModel));
							case 'NotFoundPage':
								break _v0$22;
							default:
								break _v0$23;
						}
					case 'EditorialMsg':
						switch (_v0.b.$) {
							case 'EditorialPage':
								var editorialMsg = _v0.a.a;
								var editorialModel = _v0.b.a;
								return A3(
									toPage,
									$author$project$Main$EditorialPage,
									$author$project$Main$EditorialMsg,
									A3($author$project$Page$Editorial$update, session, editorialMsg, editorialModel));
							case 'NotFoundPage':
								break _v0$22;
							default:
								break _v0$23;
						}
					case 'FoodSimulatorMsg':
						switch (_v0.b.$) {
							case 'FoodSimulatorPage':
								var foodMsg = _v0.a.a;
								var foodModel = _v0.b.a;
								return A3(
									toPage,
									$author$project$Main$FoodSimulatorPage,
									$author$project$Main$FoodSimulatorMsg,
									A3($author$project$Page$Food$Simulator$update, session, foodMsg, foodModel));
							case 'NotFoundPage':
								break _v0$22;
							default:
								break _v0$23;
						}
					case 'TextileDbReceived':
						switch (_v0.a.b.$) {
							case 'Success':
								var _v1 = _v0.a;
								var url = _v1.a;
								var db = _v1.b.a;
								return A2(
									$author$project$Main$setRoute,
									$author$project$Route$fromUrl(url),
									_Utils_Tuple2(
										_Utils_update(
											model,
											{
												session: _Utils_update(
													session,
													{db: db})
											}),
										$elm$core$Platform$Cmd$none));
							case 'Failure':
								var _v2 = _v0.a;
								var url = _v2.a;
								var httpError = _v2.b.a;
								return A2(
									$author$project$Main$setRoute,
									$author$project$Route$fromUrl(url),
									_Utils_Tuple2(
										_Utils_update(
											model,
											{
												session: A2($author$project$Data$Session$notifyHttpError, httpError, session)
											}),
										$elm$core$Platform$Cmd$none));
							default:
								if (_v0.b.$ === 'NotFoundPage') {
									break _v0$22;
								} else {
									break _v0$23;
								}
						}
					case 'TextileExamplesMsg':
						switch (_v0.b.$) {
							case 'TextileExamplesPage':
								var examplesMsg = _v0.a.a;
								var examplesModel = _v0.b.a;
								return A3(
									toPage,
									$author$project$Main$TextileExamplesPage,
									$author$project$Main$TextileExamplesMsg,
									A3($author$project$Page$Textile$Examples$update, session, examplesMsg, examplesModel));
							case 'NotFoundPage':
								break _v0$22;
							default:
								break _v0$23;
						}
					case 'TextileExploreMsg':
						switch (_v0.b.$) {
							case 'TextileExplorePage':
								var examplesMsg = _v0.a.a;
								var examplesModel = _v0.b.a;
								return A3(
									toPage,
									$author$project$Main$TextileExplorePage,
									$author$project$Main$TextileExploreMsg,
									A3($author$project$Page$Textile$Explore$update, session, examplesMsg, examplesModel));
							case 'NotFoundPage':
								break _v0$22;
							default:
								break _v0$23;
						}
					case 'TextileSimulatorMsg':
						switch (_v0.b.$) {
							case 'TextileSimulatorPage':
								var counterMsg = _v0.a.a;
								var counterModel = _v0.b.a;
								return A3(
									toPage,
									$author$project$Main$TextileSimulatorPage,
									$author$project$Main$TextileSimulatorMsg,
									A3($author$project$Page$Textile$Simulator$update, session, counterMsg, counterModel));
							case 'NotFoundPage':
								break _v0$22;
							default:
								break _v0$23;
						}
					case 'StatsMsg':
						switch (_v0.b.$) {
							case 'StatsPage':
								var statsMsg = _v0.a.a;
								var statsModel = _v0.b.a;
								return A3(
									toPage,
									$author$project$Main$StatsPage,
									$author$project$Main$StatsMsg,
									A3($author$project$Page$Stats$update, session, statsMsg, statsModel));
							case 'NotFoundPage':
								break _v0$22;
							default:
								break _v0$23;
						}
					case 'CloseNotification':
						var notification = _v0.a.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									session: A2($author$project$Data$Session$closeNotification, notification, session)
								}),
							$elm$core$Platform$Cmd$none);
					case 'StoreChanged':
						var json = _v0.a.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									session: _Utils_update(
										session,
										{
											store: $author$project$Data$Session$deserializeStore(json)
										})
								}),
							$elm$core$Platform$Cmd$none);
					case 'CloseMobileNavigation':
						var _v3 = _v0.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{mobileNavigationOpened: false}),
							$elm$core$Platform$Cmd$none);
					case 'OpenMobileNavigation':
						var _v4 = _v0.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{mobileNavigationOpened: true}),
							$elm$core$Platform$Cmd$none);
					case 'LoadUrl':
						var url = _v0.a.a;
						return _Utils_Tuple2(
							model,
							$elm$browser$Browser$Navigation$load(url));
					case 'ReloadPage':
						var _v5 = _v0.a;
						return _Utils_Tuple2(model, $elm$browser$Browser$Navigation$reloadAndSkipCache);
					case 'UrlChanged':
						var url = _v0.a.a;
						return A2(
							$author$project$Main$setRoute,
							$author$project$Route$fromUrl(url),
							_Utils_Tuple2(
								_Utils_update(
									model,
									{mobileNavigationOpened: false}),
								$elm$core$Platform$Cmd$none));
					case 'UrlRequested':
						if (_v0.a.a.$ === 'Internal') {
							var url = _v0.a.a.a;
							return _Utils_Tuple2(
								model,
								A2(
									$elm$browser$Browser$Navigation$pushUrl,
									session.navKey,
									$elm$url$Url$toString(url)));
						} else {
							var href = _v0.a.a.a;
							return _Utils_Tuple2(
								model,
								$elm$browser$Browser$Navigation$load(href));
						}
					case 'VersionReceived':
						var webData = _v0.a.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									session: _Utils_update(
										session,
										{
											currentVersion: A2($author$project$Request$Version$updateVersion, session.currentVersion, webData)
										})
								}),
							$elm$core$Platform$Cmd$none);
					default:
						var _v6 = _v0.a;
						return _Utils_Tuple2(
							model,
							$author$project$Request$Version$loadVersion($author$project$Main$VersionReceived));
				}
			}
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
		var _v7 = _v0.b;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{page: $author$project$Main$NotFoundPage}),
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Views$Page$Api = {$: 'Api'};
var $author$project$Views$Page$Changelog = {$: 'Changelog'};
var $author$project$Main$CloseMobileNavigation = {$: 'CloseMobileNavigation'};
var $author$project$Main$CloseNotification = function (a) {
	return {$: 'CloseNotification', a: a};
};
var $author$project$Views$Page$Config = F8(
	function (session, mobileNavigationOpened, closeMobileNavigation, openMobileNavigation, loadUrl, reloadPage, closeNotification, activePage) {
		return {activePage: activePage, closeMobileNavigation: closeMobileNavigation, closeNotification: closeNotification, loadUrl: loadUrl, mobileNavigationOpened: mobileNavigationOpened, openMobileNavigation: openMobileNavigation, reloadPage: reloadPage, session: session};
	});
var $author$project$Views$Page$Editorial = function (a) {
	return {$: 'Editorial', a: a};
};
var $author$project$Views$Page$FoodSimulator = {$: 'FoodSimulator'};
var $author$project$Views$Page$Home = {$: 'Home'};
var $author$project$Main$LoadUrl = function (a) {
	return {$: 'LoadUrl', a: a};
};
var $author$project$Main$OpenMobileNavigation = {$: 'OpenMobileNavigation'};
var $author$project$Views$Page$Other = {$: 'Other'};
var $author$project$Main$ReloadPage = {$: 'ReloadPage'};
var $author$project$Views$Page$Stats = {$: 'Stats'};
var $author$project$Views$Page$TextileExamples = {$: 'TextileExamples'};
var $author$project$Views$Page$TextileExplore = {$: 'TextileExplore'};
var $author$project$Views$Page$TextileSimulator = {$: 'TextileSimulator'};
var $author$project$Data$Env$betagouvUrl = 'https://beta.gouv.fr/startups/ecobalyse.html';
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$html$Html$div = _VirtualDom_node('div');
var $author$project$Views$Container$centered = function (attrs) {
	return $elm$html$Html$div(
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Attributes$class('container'),
			attrs));
};
var $elm$html$Html$a = _VirtualDom_node('a');
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty('target');
var $author$project$Views$Link$external = function (attrs) {
	return $elm$html$Html$a(
		_Utils_ap(
			attrs,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$target('_blank'),
					$elm$html$Html$Attributes$class('link-external'),
					$elm$html$Html$Attributes$rel('noopener noreferrer')
				])));
};
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $elm$html$Html$i = _VirtualDom_node('i');
var $author$project$Views$Icon$icon = function (name) {
	return A2(
		$elm$html$Html$i,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$attribute, 'aria-hidden', 'true'),
				$elm$html$Html$Attributes$class('icon icon-' + name)
			]),
		_List_Nil);
};
var $author$project$Views$Icon$info = $author$project$Views$Icon$icon('info');
var $elm$html$Html$main_ = _VirtualDom_node('main');
var $elm$html$Html$button = _VirtualDom_node('button');
var $author$project$Views$Page$External = F2(
	function (a, b) {
		return {$: 'External', a: a, b: b};
	});
var $author$project$Views$Page$Internal = F3(
	function (a, b, c) {
		return {$: 'Internal', a: a, b: b, c: c};
	});
var $author$project$Views$Page$MailTo = F2(
	function (a, b) {
		return {$: 'MailTo', a: a, b: b};
	});
var $author$project$Data$Env$contactEmail = 'ecobalyse@beta.gouv.fr';
var $author$project$Data$Env$gitbookUrl = 'https://fabrique-numerique.gitbook.io/ecobalyse';
var $author$project$Data$Env$githubUrl = 'https://github.com/' + $author$project$Data$Env$githubRepository;
var $author$project$Views$Page$footerMenuLinks = _List_fromArray(
	[
		A3($author$project$Views$Page$Internal, 'Accueil', $author$project$Route$Home, $author$project$Views$Page$Home),
		A3(
		$author$project$Views$Page$Internal,
		'Simulateur',
		A4($author$project$Route$TextileSimulator, $author$project$Data$Impact$defaultTrigram, $author$project$Data$Unit$PerItem, $author$project$Page$Textile$Simulator$ViewMode$Simple, $elm$core$Maybe$Nothing),
		$author$project$Views$Page$TextileSimulator),
		A3($author$project$Views$Page$Internal, 'Exemples', $author$project$Route$TextileExamples, $author$project$Views$Page$TextileExamples),
		A3(
		$author$project$Views$Page$Internal,
		'Explorateur',
		$author$project$Route$TextileExplore(
			$author$project$Data$Textile$Db$Countries($elm$core$Maybe$Nothing)),
		$author$project$Views$Page$TextileExplore),
		A3($author$project$Views$Page$Internal, 'API', $author$project$Route$Api, $author$project$Views$Page$Api),
		A3($author$project$Views$Page$Internal, 'Nouveautés', $author$project$Route$Changelog, $author$project$Views$Page$Changelog),
		A3($author$project$Views$Page$Internal, 'Statistiques', $author$project$Route$Stats, $author$project$Views$Page$Stats),
		A3($author$project$Views$Page$Internal, 'Food', $author$project$Route$FoodSimulator, $author$project$Views$Page$FoodSimulator),
		A3(
		$author$project$Views$Page$Internal,
		'Accessibilité\u00A0: non conforme',
		$author$project$Route$Editorial('accessibilité'),
		$author$project$Views$Page$Editorial('accessibilité')),
		A3(
		$author$project$Views$Page$Internal,
		'Mentions légales',
		$author$project$Route$Editorial('mentions-légales'),
		$author$project$Views$Page$Editorial('mentions-légales')),
		A2($author$project$Views$Page$External, 'Code source', $author$project$Data$Env$githubUrl),
		A2($author$project$Views$Page$External, 'Documentation', $author$project$Data$Env$gitbookUrl),
		A2($author$project$Views$Page$MailTo, 'Contact', $author$project$Data$Env$contactEmail)
	]);
var $elm$html$Html$h5 = _VirtualDom_node('h5');
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$classList = function (classes) {
	return $elm$html$Html$Attributes$class(
		A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2($elm$core$List$filter, $elm$core$Tuple$second, classes))));
};
var $author$project$Route$href = function (route) {
	return $elm$html$Html$Attributes$href(
		$author$project$Route$toString(route));
};
var $author$project$Views$Link$internal = function (attrs) {
	return $elm$html$Html$a(attrs);
};
var $author$project$Views$Page$viewNavigationLink = F2(
	function (activePage, link) {
		switch (link.$) {
			case 'Internal':
				var label = link.a;
				var route = link.b;
				var page = link.c;
				return A2(
					$author$project$Views$Link$internal,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$Attributes$class('nav-link pe-3'),
						A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'active',
										_Utils_eq(page, activePage))
									])),
							A2(
								$elm$core$List$cons,
								$author$project$Route$href(route),
								_Utils_eq(page, activePage) ? _List_fromArray(
									[
										A2($elm$html$Html$Attributes$attribute, 'aria-current', 'page')
									]) : _List_Nil))),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						]));
			case 'External':
				var label = link.a;
				var url = link.b;
				return A2(
					$author$project$Views$Link$external,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('nav-link link-external-muted pe-2'),
							$elm$html$Html$Attributes$href(url)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						]));
			default:
				var label = link.a;
				var email = link.b;
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('nav-link'),
							$elm$html$Html$Attributes$href('mailto:' + email)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						]));
		}
	});
var $author$project$Views$Page$mobileNavigation = function (_v0) {
	var activePage = _v0.activePage;
	var closeMobileNavigation = _v0.closeMobileNavigation;
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('offcanvas offcanvas-start show'),
						A2($elm$html$Html$Attributes$style, 'visibility', 'visible'),
						$elm$html$Html$Attributes$id('navigation'),
						A2($elm$html$Html$Attributes$attribute, 'tabindex', '-1'),
						A2($elm$html$Html$Attributes$attribute, 'aria-labelledby', 'navigationLabel'),
						A2($elm$html$Html$Attributes$attribute, 'arial-modal', 'true'),
						A2($elm$html$Html$Attributes$attribute, 'role', 'dialog')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('offcanvas-header')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$h5,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('offcanvas-title'),
										$elm$html$Html$Attributes$id('navigationLabel')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Navigation')
									])),
								A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('button'),
										$elm$html$Html$Attributes$class('btn-close text-reset'),
										A2($elm$html$Html$Attributes$attribute, 'aria-label', 'Close'),
										$elm$html$Html$Events$onClick(closeMobileNavigation)
									]),
								_List_Nil)
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('offcanvas-body')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('nav nav-pills flex-column')
									]),
								A2(
									$elm$core$List$map,
									$author$project$Views$Page$viewNavigationLink(activePage),
									$author$project$Views$Page$footerMenuLinks))
							]))
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('offcanvas-backdrop fade show')
					]),
				_List_Nil)
			]));
};
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $author$project$Views$Page$headerMenuLinks = _List_fromArray(
	[
		A3($author$project$Views$Page$Internal, 'Accueil', $author$project$Route$Home, $author$project$Views$Page$Home),
		A3(
		$author$project$Views$Page$Internal,
		'Simulateur',
		A4($author$project$Route$TextileSimulator, $author$project$Data$Impact$defaultTrigram, $author$project$Data$Unit$PerItem, $author$project$Page$Textile$Simulator$ViewMode$Simple, $elm$core$Maybe$Nothing),
		$author$project$Views$Page$TextileSimulator),
		A3($author$project$Views$Page$Internal, 'Exemples', $author$project$Route$TextileExamples, $author$project$Views$Page$TextileExamples),
		A3(
		$author$project$Views$Page$Internal,
		'Explorateur',
		$author$project$Route$TextileExplore(
			$author$project$Data$Textile$Db$Countries($elm$core$Maybe$Nothing)),
		$author$project$Views$Page$TextileExplore),
		A3($author$project$Views$Page$Internal, 'API', $author$project$Route$Api, $author$project$Views$Page$Api),
		A2($author$project$Views$Page$External, 'Documentation', $author$project$Data$Env$gitbookUrl)
	]);
var $elm$html$Html$Attributes$height = function (n) {
	return A2(
		_VirtualDom_attribute,
		'height',
		$elm$core$String$fromInt(n));
};
var $elm$html$Html$img = _VirtualDom_node('img');
var $elm$html$Html$nav = _VirtualDom_node('nav');
var $elm$html$Html$span = _VirtualDom_node('span');
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $elm$html$Html$Attributes$title = $elm$html$Html$Attributes$stringProperty('title');
var $author$project$Views$Icon$verticalDots = $author$project$Views$Icon$icon('dots-vertical');
var $author$project$Views$Page$navbar = function (_v0) {
	var activePage = _v0.activePage;
	var openMobileNavigation = _v0.openMobileNavigation;
	return A2(
		$elm$html$Html$nav,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('Header navbar navbar-expand-lg navbar-dark bg-dark shadow')
			]),
		_List_fromArray(
			[
				A2(
				$author$project$Views$Container$centered,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$a,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('navbar-brand'),
								$author$project$Route$href($author$project$Route$Home)
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$img,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('d-inline-block align-text-bottom invert me-2'),
										$elm$html$Html$Attributes$alt(''),
										$elm$html$Html$Attributes$src('img/logo.svg'),
										$elm$html$Html$Attributes$height(26)
									]),
								_List_Nil),
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('fs-3')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Ecobalyse')
									]))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('d-none d-sm-flex MainMenu navbar-nav justify-content-between flex-row'),
								A2($elm$html$Html$Attributes$style, 'overflow', 'auto')
							]),
						A2(
							$elm$core$List$map,
							$author$project$Views$Page$viewNavigationLink(activePage),
							$author$project$Views$Page$headerMenuLinks)),
						A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$type_('button'),
								$elm$html$Html$Attributes$class('d-inline-block d-sm-none btn btn-dark m-0 p-0'),
								A2($elm$html$Html$Attributes$attribute, 'aria-label', 'Ouvrir la navigation'),
								$elm$html$Html$Attributes$title('Ouvrir la navigation'),
								$elm$html$Html$Events$onClick(openMobileNavigation)
							]),
						_List_fromArray(
							[$author$project$Views$Icon$verticalDots]))
					]))
			]));
};
var $author$project$Views$Page$newVersionAlert = function (_v0) {
	var session = _v0.session;
	var reloadPage = _v0.reloadPage;
	var _v1 = session.currentVersion;
	if (_v1.$ === 'NewerVersion') {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('NewVersionAlert d-block align-items-center')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Une nouvelle version de l\'application est disponible.'),
					A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('button'),
							$elm$html$Html$Attributes$class('btn btn-outline-primary'),
							$elm$html$Html$Events$onClick(reloadPage)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Mettre à jour')
						]))
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Views$Alert$Danger = {$: 'Danger'};
var $author$project$Views$Alert$Info = {$: 'Info'};
var $elm$html$Html$details = _VirtualDom_node('details');
var $author$project$Request$Common$errorToString = function (error) {
	switch (error.$) {
		case 'BadUrl':
			var url = error.a;
			return 'URL invalide: ' + url;
		case 'Timeout':
			return 'Délai dépassé.';
		case 'NetworkError':
			return 'Erreur de communication réseau. Êtes-vous connecté ?';
		case 'BadStatus':
			var status_code = error.a;
			return 'Erreur HTTP ' + $elm$core$String$fromInt(status_code);
		default:
			var body = error.a;
			return 'Échec de l\'interprétation de la réponse HTTP: ' + body;
	}
};
var $elm$core$String$lines = _String_lines;
var $elm$html$Html$p = _VirtualDom_node('p');
var $elm$html$Html$pre = _VirtualDom_node('pre');
var $author$project$Views$Icon$warning = $author$project$Views$Icon$icon('warning');
var $author$project$Views$Alert$icon = function (level) {
	if (level.$ === 'Danger') {
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('me-1')
				]),
			_List_fromArray(
				[$author$project$Views$Icon$warning]));
	} else {
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('me-1')
				]),
			_List_fromArray(
				[$author$project$Views$Icon$info]));
	}
};
var $author$project$Views$Alert$levelToClass = function (level) {
	if (level.$ === 'Danger') {
		return 'danger';
	} else {
		return 'info';
	}
};
var $author$project$Views$Alert$simple = function (_v0) {
	var level = _v0.level;
	var content = _v0.content;
	var title = _v0.title;
	var close = _v0.close;
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class(
				'alert alert-' + $author$project$Views$Alert$levelToClass(level)),
				$elm$html$Html$Attributes$classList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'alert-dismissible',
						!_Utils_eq(close, $elm$core$Maybe$Nothing))
					]))
			]),
		_List_fromArray(
			[
				function () {
				if (title.$ === 'Just') {
					var title_ = title.a;
					return A2(
						$elm$html$Html$h5,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('alert-heading d-flex align-items-center')
							]),
						_List_fromArray(
							[
								$author$project$Views$Alert$icon(level),
								$elm$html$Html$text(title_)
							]));
				} else {
					return $elm$html$Html$text('');
				}
			}(),
				A2($elm$html$Html$div, _List_Nil, content),
				function () {
				if (close.$ === 'Just') {
					var closeMsg = close.a;
					return A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$type_('button'),
								$elm$html$Html$Attributes$class('btn-close'),
								A2($elm$html$Html$Attributes$attribute, 'aria-label', 'Fermer'),
								A2($elm$html$Html$Attributes$attribute, 'data-bs-dismiss', 'alert'),
								$elm$html$Html$Events$onClick(closeMsg)
							]),
						_List_Nil);
				} else {
					return $elm$html$Html$text('');
				}
			}()
			]));
};
var $elm$html$Html$summary = _VirtualDom_node('summary');
var $author$project$Views$Alert$httpError = function (error) {
	return $author$project$Views$Alert$simple(
		{
			close: $elm$core$Maybe$Nothing,
			content: function () {
				var _v0 = $elm$core$String$lines(
					$author$project$Request$Common$errorToString(error));
				if (!_v0.b) {
					return _List_Nil;
				} else {
					if (!_v0.b.b) {
						var line = _v0.a;
						return _List_fromArray(
							[
								$elm$html$Html$text(line)
							]);
					} else {
						var firstLine = _v0.a;
						var rest = _v0.b;
						return _List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$elm$html$Html$p,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('mb-2')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('Une erreur serveur a été rencontrée\u00A0:')
											])),
										A2(
										$elm$html$Html$pre,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('mb-1')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(firstLine)
											])),
										A2(
										$elm$html$Html$details,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('mb-2')
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$summary,
												_List_Nil,
												_List_fromArray(
													[
														$elm$html$Html$text('Afficher les détails de l\'erreur')
													])),
												A2(
												$elm$html$Html$pre,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('mt-1')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text(
														$elm$core$String$trim(
															A2($elm$core$String$join, '\n', rest)))
													]))
											])),
										A2(
										$elm$html$Html$a,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('btn btn-primary'),
												$elm$html$Html$Attributes$href(
												'mailto:' + ($author$project$Data$Env$contactEmail + ('?Subject=[Ecobalyse]+Erreur+rencontrée&Body=' + $author$project$Request$Common$errorToString(error))))
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('Envoyer un rapport d\'incident')
											]))
									]))
							]);
					}
				}
			}(),
			level: $author$project$Views$Alert$Info,
			title: $elm$core$Maybe$Just('Erreur de chargement des données')
		});
};
var $author$project$Views$Page$notificationView = F2(
	function (_v0, notification) {
		var closeNotification = _v0.closeNotification;
		if (notification.$ === 'HttpError') {
			var error = notification.a;
			return $author$project$Views$Alert$httpError(error);
		} else {
			var title = notification.a;
			var message = notification.b;
			return $author$project$Views$Alert$simple(
				{
					close: $elm$core$Maybe$Just(
						closeNotification(notification)),
					content: _List_fromArray(
						[
							$elm$html$Html$text(message)
						]),
					level: $author$project$Views$Alert$Danger,
					title: $elm$core$Maybe$Just(title)
				});
		}
	});
var $author$project$Views$Page$notificationListView = function (config) {
	var session = config.session;
	var _v0 = session.notifications;
	if (!_v0.b) {
		return $elm$html$Html$text('');
	} else {
		var notifications = _v0;
		return A2(
			$author$project$Views$Container$centered,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('bg-white pt-3')
				]),
			A2(
				$elm$core$List$map,
				$author$project$Views$Page$notificationView(config),
				notifications));
	}
};
var $elm$html$Html$footer = _VirtualDom_node('footer');
var $elm$html$Html$li = _VirtualDom_node('li');
var $elm$html$Html$small = _VirtualDom_node('small');
var $author$project$Request$Version$toString = function (version) {
	if (version.$ === 'Version') {
		var string = version.a;
		return $elm$core$Maybe$Just(string);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$html$Html$ul = _VirtualDom_node('ul');
var $author$project$Views$Page$pageFooter = function (_v0) {
	var currentVersion = _v0.currentVersion;
	return A2(
		$elm$html$Html$footer,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('bg-dark text-light py-4 fs-7')
			]),
		_List_fromArray(
			[
				A2(
				$author$project$Views$Container$centered,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('d-flex justify-content-start flex-wrap gap-2 list-unstyled pt-1')
							]),
						A2(
							$elm$core$List$intersperse,
							A2(
								$elm$html$Html$li,
								_List_fromArray(
									[
										A2($elm$html$Html$Attributes$attribute, 'aria-hidden', 'true'),
										$elm$html$Html$Attributes$class('text-muted')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('|')
									])),
							A2(
								$elm$core$List$map,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$List$singleton,
									$elm$html$Html$li(_List_Nil)),
								A2(
									$elm$core$List$map,
									function (link) {
										switch (link.$) {
											case 'Internal':
												var label = link.a;
												var route = link.b;
												return A2(
													$author$project$Views$Link$internal,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$class('text-white text-decoration-none'),
															$author$project$Route$href(route)
														]),
													_List_fromArray(
														[
															$elm$html$Html$text(label)
														]));
											case 'External':
												var label = link.a;
												var url = link.b;
												return A2(
													$author$project$Views$Link$external,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$class('text-white text-decoration-none'),
															$elm$html$Html$Attributes$href(url)
														]),
													_List_fromArray(
														[
															$elm$html$Html$text(label)
														]));
											default:
												var label = link.a;
												var email = link.b;
												return A2(
													$elm$html$Html$a,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$class('text-white text-decoration-none link-email'),
															$elm$html$Html$Attributes$href('mailto:' + email)
														]),
													_List_fromArray(
														[
															$elm$html$Html$text(label)
														]));
										}
									},
									$author$project$Views$Page$footerMenuLinks)))),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('row d-flex align-items-center')
							]),
						_List_fromArray(
							[
								A2(
								$author$project$Views$Link$external,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$href('https://www.ecologique-solidaire.gouv.fr/'),
										$elm$html$Html$Attributes$class('col text-center bg-white px-3 m-3 link-external-muted'),
										A2($elm$html$Html$Attributes$style, 'min-height', '200px')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$img,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$src('img/logo_mte.svg'),
												$elm$html$Html$Attributes$alt('Ministère de la transition écologique et solidaire'),
												A2($elm$html$Html$Attributes$attribute, 'width', '200'),
												A2($elm$html$Html$Attributes$attribute, 'height', '200')
											]),
										_List_Nil)
									])),
								A2(
								$author$project$Views$Link$external,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$href('https://www.economie.gouv.fr/plan-de-relance'),
										$elm$html$Html$Attributes$class('d-flex flex-wrap justify-content-center align-items-center'),
										$elm$html$Html$Attributes$class('col text-center bg-white p-3 m-3 link-external-muted'),
										A2($elm$html$Html$Attributes$style, 'min-height', '200px')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$img,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$src('img/logo-france-relance.png'),
												$elm$html$Html$Attributes$alt('France Relance'),
												A2($elm$html$Html$Attributes$attribute, 'width', '100'),
												A2($elm$html$Html$Attributes$attribute, 'height', '100')
											]),
										_List_Nil),
										A2(
										$elm$html$Html$img,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$src('img/logo-next-generation-eu.png'),
												$elm$html$Html$Attributes$alt('Financé par la l\'Union européenne'),
												A2($elm$html$Html$Attributes$attribute, 'width', '250'),
												A2($elm$html$Html$Attributes$attribute, 'height', '56')
											]),
										_List_Nil)
									])),
								A2(
								$author$project$Views$Link$external,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$href('https://www.ecologique-solidaire.gouv.fr/fabrique-numerique'),
										$elm$html$Html$Attributes$class('col d-flex justify-content-center align-items-center text-center bg-white p-3 m-3 link-external-muted'),
										A2($elm$html$Html$Attributes$style, 'min-height', '200px')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$img,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$src('img/logo-fabriquenumerique.svg'),
												$elm$html$Html$Attributes$alt('La Fabrique Numérique'),
												A2($elm$html$Html$Attributes$attribute, 'width', '150'),
												A2($elm$html$Html$Attributes$attribute, 'height', '150')
											]),
										_List_Nil)
									]))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('text-center pt-2')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Un produit '),
								A2(
								$author$project$Views$Link$external,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$href($author$project$Data$Env$betagouvUrl),
										$elm$html$Html$Attributes$class('text-light')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$img,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$src('img/betagouv.svg'),
												$elm$html$Html$Attributes$alt('beta.gouv.fr'),
												A2($elm$html$Html$Attributes$style, 'width', '120px')
											]),
										_List_Nil)
									])),
								function () {
								var _v2 = $author$project$Request$Version$toString(currentVersion);
								if (_v2.$ === 'Just') {
									var hash = _v2.a;
									return A2(
										$elm$html$Html$small,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('d-block pt-1 fs-8 ms-2 text-muted')
											]),
										_List_fromArray(
											[
												A2(
												$author$project$Views$Link$external,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('text-white text-decoration-none'),
														$elm$html$Html$Attributes$href($author$project$Data$Env$githubUrl + ('/commit/' + hash))
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('Version ' + hash)
													]))
											]));
								} else {
									return $elm$html$Html$text('');
								}
							}()
							]))
					]))
			]));
};
var $author$project$Views$Page$stagingAlert = function (_v0) {
	var session = _v0.session;
	var loadUrl = _v0.loadUrl;
	return (A2($elm$core$String$contains, 'ecobalyse-pr', session.clientUrl) || A2($elm$core$String$contains, 'wikicarbone-pr', session.clientUrl)) ? A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('StagingAlert d-block d-sm-flex justify-content-center align-items-center mt-3')
			]),
		_List_fromArray(
			[
				$elm$html$Html$text('Vous êtes sur un environnement de recette. '),
				A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$type_('button'),
						$elm$html$Html$Attributes$class('btn btn-link'),
						$elm$html$Html$Events$onClick(
						loadUrl('https://ecobalyse.beta.gouv.fr/'))
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Retourner vers l\'environnement de production')
					]))
			])) : $elm$html$Html$text('');
};
var $author$project$Views$Page$frame = F2(
	function (config, _v0) {
		var title = _v0.a;
		var content = _v0.b;
		return {
			body: _List_fromArray(
				[
					$author$project$Views$Page$stagingAlert(config),
					$author$project$Views$Page$newVersionAlert(config),
					$author$project$Views$Page$navbar(config),
					config.mobileNavigationOpened ? $author$project$Views$Page$mobileNavigation(config) : $elm$html$Html$text(''),
					A2(
					$elm$html$Html$main_,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('bg-white')
						]),
					_List_fromArray(
						[
							$author$project$Views$Page$notificationListView(config),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('alert alert-info py-1 rounded-0')
								]),
							_List_fromArray(
								[
									A2(
									$author$project$Views$Container$centered,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('text-center')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$span,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('me-1')
												]),
											_List_fromArray(
												[$author$project$Views$Icon$info])),
											$elm$html$Html$text('Wikicarbone change de nom et devient '),
											A2(
											$author$project$Views$Link$external,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$href($author$project$Data$Env$betagouvUrl)
												]),
											_List_fromArray(
												[
													$elm$html$Html$text('Ecobalyse')
												]))
										]))
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('pt-2 pt-sm-5')
								]),
							content)
						])),
					$author$project$Views$Page$pageFooter(config.session)
				]),
			title: title + ' | Ecobalyse'
		};
	});
var $author$project$Views$Spinner$view = A2(
	$elm$html$Html$div,
	_List_fromArray(
		[
			$elm$html$Html$Attributes$class('d-flex flex-column gap-3 justify-content-center align-items-center'),
			A2($elm$html$Html$Attributes$style, 'min-height', '25vh')
		]),
	_List_fromArray(
		[
			A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('spinner-border text-primary'),
					A2($elm$html$Html$Attributes$attribute, 'role', 'status')
				]),
			_List_Nil),
			A2(
			$elm$html$Html$p,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('text-muted')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Chargement…')
				]))
		]));
var $author$project$Views$Page$loading = A2(
	$author$project$Views$Container$centered,
	_List_fromArray(
		[
			$elm$html$Html$Attributes$class('pb-5')
		]),
	_List_fromArray(
		[$author$project$Views$Spinner$view]));
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
var $elm$html$Html$h1 = _VirtualDom_node('h1');
var $author$project$Views$Page$notFound = A2(
	$author$project$Views$Container$centered,
	_List_fromArray(
		[
			$elm$html$Html$Attributes$class('pb-5')
		]),
	_List_fromArray(
		[
			A2(
			$elm$html$Html$h1,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mb-3')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Page non trouvée')
				])),
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('La page que vous avez demandé n\'existe pas.')
				])),
			A2(
			$elm$html$Html$a,
			_List_fromArray(
				[
					$author$project$Route$href($author$project$Route$Home)
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Retour à l\'accueil')
				]))
		]));
var $author$project$Page$Api$getApiServerUrl = function (_v0) {
	var clientUrl = _v0.clientUrl;
	return clientUrl + 'api';
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $author$project$Page$Api$apiBrowser = function (session) {
	return A3(
		$elm$html$Html$node,
		'rapi-doc',
		_List_fromArray(
			[
				A2(
				$elm$html$Html$Attributes$attribute,
				'spec-url',
				$author$project$Page$Api$getApiServerUrl(session)),
				A2(
				$elm$html$Html$Attributes$attribute,
				'server-url',
				$author$project$Page$Api$getApiServerUrl(session)),
				A2(
				$elm$html$Html$Attributes$attribute,
				'default-api-server',
				$author$project$Page$Api$getApiServerUrl(session)),
				A2($elm$html$Html$Attributes$attribute, 'theme', 'light'),
				A2($elm$html$Html$Attributes$attribute, 'font-size', 'largest'),
				A2($elm$html$Html$Attributes$attribute, 'load-fonts', 'false'),
				A2($elm$html$Html$Attributes$attribute, 'layout', 'column'),
				A2($elm$html$Html$Attributes$attribute, 'show-info', 'false'),
				A2($elm$html$Html$Attributes$attribute, 'update-route', 'false'),
				A2($elm$html$Html$Attributes$attribute, 'render-style', 'view'),
				A2($elm$html$Html$Attributes$attribute, 'show-header', 'false'),
				A2($elm$html$Html$Attributes$attribute, 'show-components', 'true'),
				A2($elm$html$Html$Attributes$attribute, 'schema-description-expanded', 'true'),
				A2($elm$html$Html$Attributes$attribute, 'allow-authentication', 'false'),
				A2($elm$html$Html$Attributes$attribute, 'allow-server-selection', 'false'),
				A2($elm$html$Html$Attributes$attribute, 'allow-api-list-style-selection', 'false')
			]),
		_List_Nil);
};
var $author$project$Page$Api$changelog = _List_fromArray(
	[
		{date: '5 juillet 2022', level: 'minor', md: 'Un nouveau paramètre optionnel `disabledSteps` a été ajouté aux endpoints de\n            simulation, permettant de définir la liste des étapes du cycle de vie à désactiver,\n            séparée par des virgules. Chaque étape est identifiée par un code\u00A0:\n- `material`: Matière\n- `spinning`: Filature\n- `fabric`: Tissage ou Tricotage\n- `making`: Teinture/Ennoblissement\n- `dyeing`: Confection\n- `distribution`: Distribution\n- `use`: Utilisation\n- `eol`: Fin de vie\n\n            Par exemple, pour désactiver les étapes de filature et de teinture, on peut passer\n            `disabledSteps=spinning,dyeing`.'},
		{date: '2 juin 2022', level: 'major', md: 'Le format de définition de la liste des matières a évolué\u00A0;\n            là où vous définissiez une liste de matières en y incluant le pourcentage de matière\n            recyclée, par ex. `materials[]=coton;0.3;0.5&…` pour *30% coton à 50% recyclé*,\n            vous devez désormais écrire `materials[]=coton;0.15&materials[]=coton-rdp;0.15&…`\n            (soit *15% coton, 15% coton recyclé*, ce qui revient au même).'}
	]);
var $elm$html$Html$code = _VirtualDom_node('code');
var $author$project$Views$Markdown$Simple = function (a) {
	return {$: 'Simple', a: a};
};
var $author$project$Views$Markdown$clean = A2(
	$elm$core$Basics$composeR,
	$elm$core$String$split('\n\n'),
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$map($elm$core$String$trim),
		$elm$core$String$join('\n\n')));
var $dillonkearns$elm_markdown$Markdown$Parser$problemToString = function (problem) {
	switch (problem.$) {
		case 'Expecting':
			var string = problem.a;
			return 'Expecting ' + string;
		case 'ExpectingInt':
			return 'Expecting int';
		case 'ExpectingHex':
			return 'Expecting hex';
		case 'ExpectingOctal':
			return 'Expecting octal';
		case 'ExpectingBinary':
			return 'Expecting binary';
		case 'ExpectingFloat':
			return 'Expecting float';
		case 'ExpectingNumber':
			return 'Expecting number';
		case 'ExpectingVariable':
			return 'Expecting variable';
		case 'ExpectingSymbol':
			var string = problem.a;
			return 'Expecting symbol ' + string;
		case 'ExpectingKeyword':
			var string = problem.a;
			return 'Expecting keyword ' + string;
		case 'ExpectingEnd':
			return 'Expecting keyword end';
		case 'UnexpectedChar':
			return 'Unexpected char';
		case 'Problem':
			var problemDescription = problem.a;
			return problemDescription;
		default:
			return 'Bad repeat';
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString = function (deadEnd) {
	return 'Problem at row ' + ($elm$core$String$fromInt(deadEnd.row) + ('\n' + $dillonkearns$elm_markdown$Markdown$Parser$problemToString(deadEnd.problem)));
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine = {$: 'BlankLine'};
var $dillonkearns$elm_markdown$Markdown$Block$BlockQuote = function (a) {
	return {$: 'BlockQuote', a: a};
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote = function (a) {
	return {$: 'BlockQuote', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Cdata = function (a) {
	return {$: 'Cdata', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$CodeBlock = function (a) {
	return {$: 'CodeBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock = function (a) {
	return {$: 'CodeBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$CodeSpan = function (a) {
	return {$: 'CodeSpan', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$CompletedTask = {$: 'CompletedTask'};
var $dillonkearns$elm_markdown$Markdown$Block$Emphasis = function (a) {
	return {$: 'Emphasis', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$Emphasis = F2(
	function (a, b) {
		return {$: 'Emphasis', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock = {$: 'EmptyBlock'};
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 'Expecting', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HardLineBreak = {$: 'HardLineBreak'};
var $dillonkearns$elm_markdown$Markdown$Block$Heading = F2(
	function (a, b) {
		return {$: 'Heading', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$Heading = F2(
	function (a, b) {
		return {$: 'Heading', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$Html = function (a) {
	return {$: 'Html', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock = function (a) {
	return {$: 'HtmlBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HtmlComment = function (a) {
	return {$: 'HtmlComment', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration = F2(
	function (a, b) {
		return {$: 'HtmlDeclaration', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Block$HtmlElement = F3(
	function (a, b, c) {
		return {$: 'HtmlElement', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Block$HtmlInline = function (a) {
	return {$: 'HtmlInline', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Image = F3(
	function (a, b, c) {
		return {$: 'Image', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Block$IncompleteTask = {$: 'IncompleteTask'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock = function (a) {
	return {$: 'IndentedCodeBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem = function (a) {
	return {$: 'InlineProblem', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Link = F3(
	function (a, b, c) {
		return {$: 'Link', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Block$ListItem = F2(
	function (a, b) {
		return {$: 'ListItem', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Block$NoTask = {$: 'NoTask'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph = function (a) {
	return {$: 'OpenBlockOrParagraph', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$OrderedList = F3(
	function (a, b, c) {
		return {$: 'OrderedList', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock = F6(
	function (a, b, c, d, e, f) {
		return {$: 'OrderedListBlock', a: a, b: b, c: c, d: d, e: e, f: f};
	});
var $dillonkearns$elm_markdown$Markdown$Block$Paragraph = function (a) {
	return {$: 'Paragraph', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock = function (a) {
	return {$: 'ParsedBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote = function (a) {
	return {$: 'ParsedBlockQuote', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction = function (a) {
	return {$: 'ProcessingInstruction', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Strikethrough = function (a) {
	return {$: 'Strikethrough', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Strong = function (a) {
	return {$: 'Strong', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Table = F2(
	function (a, b) {
		return {$: 'Table', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$Table = function (a) {
	return {$: 'Table', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Table$Table = F2(
	function (a, b) {
		return {$: 'Table', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow = F2(
	function (a, b) {
		return {$: 'TableDelimiterRow', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Block$Text = function (a) {
	return {$: 'Text', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$ThematicBreak = {$: 'ThematicBreak'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak = {$: 'ThematicBreak'};
var $dillonkearns$elm_markdown$Markdown$Block$UnorderedList = F2(
	function (a, b) {
		return {$: 'UnorderedList', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock = F4(
	function (a, b, c, d) {
		return {$: 'UnorderedListBlock', a: a, b: b, c: c, d: d};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines = function (a) {
	return {$: 'UnparsedInlines', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Parser$addReference = F2(
	function (state, linkRef) {
		return {
			linkReferenceDefinitions: A2($elm$core$List$cons, linkRef, state.linkReferenceDefinitions),
			rawBlocks: state.rawBlocks
		};
	});
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0.a;
	return $elm$parser$Parser$Advanced$Parser(
		function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 'Bad') {
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, false, x);
			} else {
				var a = _v1.b;
				var s1 = _v1.c;
				return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
			}
		});
};
var $dillonkearns$elm_markdown$Whitespace$isSpaceOrTab = function (_char) {
	switch (_char.valueOf()) {
		case ' ':
			return true;
		case '\t':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Parser$Token$carriageReturn = A2(
	$elm$parser$Parser$Advanced$Token,
	'\r',
	$elm$parser$Parser$Expecting('a carriage return'));
var $dillonkearns$elm_markdown$Parser$Token$newline = A2(
	$elm$parser$Parser$Advanced$Token,
	'\n',
	$elm$parser$Parser$Expecting('a newline'));
var $dillonkearns$elm_markdown$Whitespace$lineEnd = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$newline),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$carriageReturn),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$newline),
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
					])))
		]));
var $dillonkearns$elm_markdown$Markdown$Parser$blankLine = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		return $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine;
	},
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$backtrackable(
			$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
		$dillonkearns$elm_markdown$Whitespace$lineEnd));
var $dillonkearns$elm_markdown$Parser$Token$space = A2(
	$elm$parser$Parser$Advanced$Token,
	' ',
	$elm$parser$Parser$Expecting('a space'));
var $dillonkearns$elm_markdown$Markdown$Parser$blockQuoteStarts = _List_fromArray(
	[
		$elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			'>',
			$elm$parser$Parser$Expecting('>'))),
		A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$backtrackable(
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						'>',
						$elm$parser$Parser$Expecting(' >'))),
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						' >',
						$elm$parser$Parser$Expecting('  >'))),
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						'  >',
						$elm$parser$Parser$Expecting('   >')))
				])))
	]);
var $dillonkearns$elm_markdown$Whitespace$isLineEnd = function (_char) {
	switch (_char.valueOf()) {
		case '\n':
			return true;
		case '\r':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd = $elm$parser$Parser$Advanced$chompWhile(
	A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isLineEnd));
var $dillonkearns$elm_markdown$Helpers$endOfFile = $elm$parser$Parser$Advanced$end(
	$elm$parser$Parser$Expecting('the end of the input'));
var $dillonkearns$elm_markdown$Helpers$lineEndOrEnd = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[$dillonkearns$elm_markdown$Whitespace$lineEnd, $dillonkearns$elm_markdown$Helpers$endOfFile]));
var $dillonkearns$elm_markdown$Markdown$Parser$blockQuote = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote),
			$elm$parser$Parser$Advanced$oneOf($dillonkearns$elm_markdown$Markdown$Parser$blockQuoteStarts)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space),
					$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
				]))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString = function (deadEnds) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, deadEnds));
};
var $dillonkearns$elm_markdown$HtmlParser$Cdata = function (a) {
	return {$: 'Cdata', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$Element = F3(
	function (a, b, c) {
		return {$: 'Element', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$HtmlParser$Text = function (a) {
	return {$: 'Text', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$expectTagNameCharacter = $elm$parser$Parser$Expecting('at least 1 tag name character');
var $dillonkearns$elm_markdown$HtmlParser$tagNameCharacter = function (c) {
	switch (c.valueOf()) {
		case ' ':
			return false;
		case '\r':
			return false;
		case '\n':
			return false;
		case '\t':
			return false;
		case '/':
			return false;
		case '<':
			return false;
		case '>':
			return false;
		case '\"':
			return false;
		case '\'':
			return false;
		case '=':
			return false;
		default:
			return true;
	}
};
var $dillonkearns$elm_markdown$HtmlParser$tagName = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (name, _v0) {
			return $elm$core$String$toLower(name);
		}),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$chompIf, $dillonkearns$elm_markdown$HtmlParser$tagNameCharacter, $dillonkearns$elm_markdown$HtmlParser$expectTagNameCharacter),
		$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$tagNameCharacter)));
var $dillonkearns$elm_markdown$HtmlParser$attributeName = $dillonkearns$elm_markdown$HtmlParser$tagName;
var $dillonkearns$elm_markdown$HtmlParser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$token(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $dillonkearns$elm_markdown$HtmlParser$entities = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'amp',
			_Utils_chr('&')),
			_Utils_Tuple2(
			'lt',
			_Utils_chr('<')),
			_Utils_Tuple2(
			'gt',
			_Utils_chr('>')),
			_Utils_Tuple2(
			'apos',
			_Utils_chr('\'')),
			_Utils_Tuple2(
			'quot',
			_Utils_chr('\"'))
		]));
var $rtfeldman$elm_hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		fromStringHelp:
		while (true) {
			if (!chars.b) {
				return $elm$core$Result$Ok(accumulated);
			} else {
				var _char = chars.a;
				var rest = chars.b;
				switch (_char.valueOf()) {
					case '0':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated;
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '1':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + A2($elm$core$Basics$pow, 16, position);
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '2':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (2 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '3':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (3 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '4':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (4 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '5':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (5 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '6':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (6 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '7':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (7 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '8':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (8 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '9':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (9 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'a':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (10 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'b':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (11 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'c':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (12 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'd':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (13 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'e':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (14 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'f':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (15 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					default:
						var nonHex = _char;
						return $elm$core$Result$Err(
							$elm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');
				}
			}
		}
	});
var $rtfeldman$elm_hex$Hex$fromString = function (str) {
	if ($elm$core$String$isEmpty(str)) {
		return $elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var result = function () {
			if (A2($elm$core$String$startsWith, '-', str)) {
				var list = A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					$elm$core$List$tail(
						$elm$core$String$toList(str)));
				return A2(
					$elm$core$Result$map,
					$elm$core$Basics$negate,
					A3(
						$rtfeldman$elm_hex$Hex$fromStringHelp,
						$elm$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					$rtfeldman$elm_hex$Hex$fromStringHelp,
					$elm$core$String$length(str) - 1,
					$elm$core$String$toList(str),
					0);
			}
		}();
		var formatError = function (err) {
			return A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					['\"' + (str + '\"'), 'is not a valid hexadecimal string because', err]));
		};
		return A2($elm$core$Result$mapError, formatError, result);
	}
};
var $dillonkearns$elm_markdown$HtmlParser$decodeEscape = function (s) {
	return A2($elm$core$String$startsWith, '#x', s) ? A2(
		$elm$core$Result$mapError,
		$elm$parser$Parser$Problem,
		A2(
			$elm$core$Result$map,
			$elm$core$Char$fromCode,
			$rtfeldman$elm_hex$Hex$fromString(
				A2($elm$core$String$dropLeft, 2, s)))) : (A2($elm$core$String$startsWith, '#', s) ? A2(
		$elm$core$Result$fromMaybe,
		$elm$parser$Parser$Problem('Invalid escaped character: ' + s),
		A2(
			$elm$core$Maybe$map,
			$elm$core$Char$fromCode,
			$elm$core$String$toInt(
				A2($elm$core$String$dropLeft, 1, s)))) : A2(
		$elm$core$Result$fromMaybe,
		$elm$parser$Parser$Problem('No entity named \"&' + (s + ';\" found.')),
		A2($elm$core$Dict$get, s, $dillonkearns$elm_markdown$HtmlParser$entities)));
};
var $dillonkearns$elm_markdown$HtmlParser$escapedChar = function (end_) {
	var process = function (entityStr) {
		var _v0 = $dillonkearns$elm_markdown$HtmlParser$decodeEscape(entityStr);
		if (_v0.$ === 'Ok') {
			var c = _v0.a;
			return $elm$parser$Parser$Advanced$succeed(c);
		} else {
			var e = _v0.a;
			return $elm$parser$Parser$Advanced$problem(e);
		}
	};
	var isEntityChar = function (c) {
		return (!_Utils_eq(c, end_)) && (!_Utils_eq(
			c,
			_Utils_chr(';')));
	};
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$dillonkearns$elm_markdown$HtmlParser$symbol('&')),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$andThen,
				process,
				$elm$parser$Parser$Advanced$getChompedString(
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$chompIf,
							isEntityChar,
							$elm$parser$Parser$Expecting('an entity character')),
						$elm$parser$Parser$Advanced$chompWhile(isEntityChar)))),
			$dillonkearns$elm_markdown$HtmlParser$symbol(';')));
};
var $dillonkearns$elm_markdown$HtmlParser$textStringStep = F3(
	function (closingChar, predicate, accum) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (soFar) {
				return $elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$Advanced$map,
							function (escaped) {
								return $elm$parser$Parser$Advanced$Loop(
									_Utils_ap(
										accum,
										_Utils_ap(
											soFar,
											$elm$core$String$fromChar(escaped))));
							},
							$dillonkearns$elm_markdown$HtmlParser$escapedChar(closingChar)),
							$elm$parser$Parser$Advanced$succeed(
							$elm$parser$Parser$Advanced$Done(
								_Utils_ap(accum, soFar)))
						]));
			},
			$elm$parser$Parser$Advanced$getChompedString(
				$elm$parser$Parser$Advanced$chompWhile(predicate)));
	});
var $dillonkearns$elm_markdown$HtmlParser$textString = function (closingChar) {
	var predicate = function (c) {
		return (!_Utils_eq(c, closingChar)) && (!_Utils_eq(
			c,
			_Utils_chr('&')));
	};
	return A2(
		$elm$parser$Parser$Advanced$loop,
		'',
		A2($dillonkearns$elm_markdown$HtmlParser$textStringStep, closingChar, predicate));
};
var $dillonkearns$elm_markdown$HtmlParser$attributeValue = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\"')),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$dillonkearns$elm_markdown$HtmlParser$textString(
					_Utils_chr('\"')),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\"'))),
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\'')),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$dillonkearns$elm_markdown$HtmlParser$textString(
					_Utils_chr('\'')),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\'')))
		]));
var $dillonkearns$elm_markdown$HtmlParser$keepOldest = F2(
	function (_new, mValue) {
		if (mValue.$ === 'Just') {
			var v = mValue.a;
			return $elm$core$Maybe$Just(v);
		} else {
			return $elm$core$Maybe$Just(_new);
		}
	});
var $dillonkearns$elm_markdown$HtmlParser$isWhitespace = function (c) {
	switch (c.valueOf()) {
		case ' ':
			return true;
		case '\r':
			return true;
		case '\n':
			return true;
		case '\t':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$HtmlParser$whiteSpace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isWhitespace);
var $dillonkearns$elm_markdown$HtmlParser$attributesStep = function (attrs) {
	var process = F2(
		function (name, value) {
			return $elm$parser$Parser$Advanced$Loop(
				A3(
					$elm$core$Dict$update,
					$elm$core$String$toLower(name),
					$dillonkearns$elm_markdown$HtmlParser$keepOldest(value),
					attrs));
		});
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(process),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributeName, $dillonkearns$elm_markdown$HtmlParser$whiteSpace),
							$dillonkearns$elm_markdown$HtmlParser$symbol('=')),
						$dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
				A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributeValue, $dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
				$elm$parser$Parser$Advanced$succeed(
				$elm$parser$Parser$Advanced$Done(attrs))
			]));
};
var $dillonkearns$elm_markdown$HtmlParser$attributes = A2(
	$elm$parser$Parser$Advanced$map,
	A2(
		$elm$core$Dict$foldl,
		F3(
			function (key, value, accum) {
				return A2(
					$elm$core$List$cons,
					{name: key, value: value},
					accum);
			}),
		_List_Nil),
	A2($elm$parser$Parser$Advanced$loop, $elm$core$Dict$empty, $dillonkearns$elm_markdown$HtmlParser$attributesStep));
var $elm$parser$Parser$Advanced$chompUntilEndOr = function (str) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v0 = A5(_Parser_findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v0.a;
			var newRow = _v0.b;
			var newCol = _v0.c;
			var adjustedOffset = (newOffset < 0) ? $elm$core$String$length(s.src) : newOffset;
			return A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, adjustedOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: adjustedOffset, row: newRow, src: s.src});
		});
};
var $dillonkearns$elm_markdown$HtmlParser$cdata = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$dillonkearns$elm_markdown$HtmlParser$symbol('<![CDATA[')),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr(']]>')),
		$dillonkearns$elm_markdown$HtmlParser$symbol(']]>')));
var $dillonkearns$elm_markdown$HtmlParser$childrenStep = F2(
	function (options, accum) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (f) {
				return f(accum);
			},
			$elm$parser$Parser$Advanced$oneOf(options));
	});
var $dillonkearns$elm_markdown$HtmlParser$fail = function (str) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(str));
};
var $dillonkearns$elm_markdown$HtmlParser$closingTag = function (startTagName) {
	var closingTagName = A2(
		$elm$parser$Parser$Advanced$andThen,
		function (endTagName) {
			return _Utils_eq(startTagName, endTagName) ? $elm$parser$Parser$Advanced$succeed(_Utils_Tuple0) : $dillonkearns$elm_markdown$HtmlParser$fail('tag name mismatch: ' + (startTagName + (' and ' + endTagName)));
		},
		$dillonkearns$elm_markdown$HtmlParser$tagName);
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$dillonkearns$elm_markdown$HtmlParser$symbol('</'),
					$dillonkearns$elm_markdown$HtmlParser$whiteSpace),
				closingTagName),
			$dillonkearns$elm_markdown$HtmlParser$whiteSpace),
		$dillonkearns$elm_markdown$HtmlParser$symbol('>'));
};
var $dillonkearns$elm_markdown$HtmlParser$Comment = function (a) {
	return {$: 'Comment', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $dillonkearns$elm_markdown$HtmlParser$comment = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$Comment),
		$elm$parser$Parser$Advanced$token(
			$dillonkearns$elm_markdown$HtmlParser$toToken('<!--'))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('-->')),
		$elm$parser$Parser$Advanced$token(
			$dillonkearns$elm_markdown$HtmlParser$toToken('-->'))));
var $dillonkearns$elm_markdown$HtmlParser$Declaration = F2(
	function (a, b) {
		return {$: 'Declaration', a: a, b: b};
	});
var $dillonkearns$elm_markdown$HtmlParser$expectUppercaseCharacter = $elm$parser$Parser$Expecting('at least 1 uppercase character');
var $dillonkearns$elm_markdown$HtmlParser$allUppercase = $elm$parser$Parser$Advanced$getChompedString(
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$chompIf, $elm$core$Char$isUpper, $dillonkearns$elm_markdown$HtmlParser$expectUppercaseCharacter),
		$elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isUpper)));
var $dillonkearns$elm_markdown$HtmlParser$oneOrMoreWhiteSpace = A2(
	$elm$parser$Parser$Advanced$ignorer,
	A2(
		$elm$parser$Parser$Advanced$chompIf,
		$dillonkearns$elm_markdown$HtmlParser$isWhitespace,
		$elm$parser$Parser$Expecting('at least one whitespace')),
	$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isWhitespace));
var $dillonkearns$elm_markdown$HtmlParser$docType = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$Declaration),
			$dillonkearns$elm_markdown$HtmlParser$symbol('<!')),
		A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$allUppercase, $dillonkearns$elm_markdown$HtmlParser$oneOrMoreWhiteSpace)),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('>')),
		$dillonkearns$elm_markdown$HtmlParser$symbol('>')));
var $dillonkearns$elm_markdown$HtmlParser$ProcessingInstruction = function (a) {
	return {$: 'ProcessingInstruction', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$processingInstruction = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$ProcessingInstruction),
		$dillonkearns$elm_markdown$HtmlParser$symbol('<?')),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('?>')),
		$dillonkearns$elm_markdown$HtmlParser$symbol('?>')));
var $dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar = function (c) {
	switch (c.valueOf()) {
		case '<':
			return false;
		case '&':
			return false;
		default:
			return true;
	}
};
var $dillonkearns$elm_markdown$HtmlParser$textNodeStringStepOptions = _List_fromArray(
	[
		A2(
		$elm$parser$Parser$Advanced$map,
		function (_v0) {
			return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple0);
		},
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$chompIf,
				$dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar,
				$elm$parser$Parser$Expecting('is not & or <')),
			$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar))),
		A2(
		$elm$parser$Parser$Advanced$map,
		function (_v1) {
			return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple0);
		},
		$dillonkearns$elm_markdown$HtmlParser$escapedChar(
			_Utils_chr('<'))),
		$elm$parser$Parser$Advanced$succeed(
		$elm$parser$Parser$Advanced$Done(_Utils_Tuple0))
	]);
var $dillonkearns$elm_markdown$HtmlParser$textNodeStringStep = function (_v0) {
	return $elm$parser$Parser$Advanced$oneOf($dillonkearns$elm_markdown$HtmlParser$textNodeStringStepOptions);
};
var $dillonkearns$elm_markdown$HtmlParser$textNodeString = $elm$parser$Parser$Advanced$getChompedString(
	A2($elm$parser$Parser$Advanced$loop, _Utils_Tuple0, $dillonkearns$elm_markdown$HtmlParser$textNodeStringStep));
var $dillonkearns$elm_markdown$HtmlParser$children = function (startTagName) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_List_Nil,
		$dillonkearns$elm_markdown$HtmlParser$childrenStep(
			$dillonkearns$elm_markdown$HtmlParser$childrenStepOptions(startTagName)));
};
var $dillonkearns$elm_markdown$HtmlParser$childrenStepOptions = function (startTagName) {
	return _List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$map,
			F2(
				function (_v1, accum) {
					return $elm$parser$Parser$Advanced$Done(
						$elm$core$List$reverse(accum));
				}),
			$dillonkearns$elm_markdown$HtmlParser$closingTag(startTagName)),
			A2(
			$elm$parser$Parser$Advanced$andThen,
			function (text) {
				return $elm$core$String$isEmpty(text) ? A2(
					$elm$parser$Parser$Advanced$map,
					F2(
						function (_v2, accum) {
							return $elm$parser$Parser$Advanced$Done(
								$elm$core$List$reverse(accum));
						}),
					$dillonkearns$elm_markdown$HtmlParser$closingTag(startTagName)) : $elm$parser$Parser$Advanced$succeed(
					function (accum) {
						return $elm$parser$Parser$Advanced$Loop(
							A2(
								$elm$core$List$cons,
								$dillonkearns$elm_markdown$HtmlParser$Text(text),
								accum));
					});
			},
			$dillonkearns$elm_markdown$HtmlParser$textNodeString),
			A2(
			$elm$parser$Parser$Advanced$map,
			F2(
				function (_new, accum) {
					return $elm$parser$Parser$Advanced$Loop(
						A2($elm$core$List$cons, _new, accum));
				}),
			$dillonkearns$elm_markdown$HtmlParser$cyclic$html())
		]);
};
var $dillonkearns$elm_markdown$HtmlParser$elementContinuation = function (startTagName) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$dillonkearns$elm_markdown$HtmlParser$Element(startTagName)),
				$dillonkearns$elm_markdown$HtmlParser$whiteSpace),
			A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributes, $dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return _List_Nil;
					},
					$dillonkearns$elm_markdown$HtmlParser$symbol('/>')),
					A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$dillonkearns$elm_markdown$HtmlParser$symbol('>')),
					$dillonkearns$elm_markdown$HtmlParser$children(startTagName))
				])));
};
function $dillonkearns$elm_markdown$HtmlParser$cyclic$html() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2($elm$parser$Parser$Advanced$map, $dillonkearns$elm_markdown$HtmlParser$Cdata, $dillonkearns$elm_markdown$HtmlParser$cdata),
				$dillonkearns$elm_markdown$HtmlParser$processingInstruction,
				$dillonkearns$elm_markdown$HtmlParser$comment,
				$dillonkearns$elm_markdown$HtmlParser$docType,
				$dillonkearns$elm_markdown$HtmlParser$cyclic$element()
			]));
}
function $dillonkearns$elm_markdown$HtmlParser$cyclic$element() {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$dillonkearns$elm_markdown$HtmlParser$symbol('<')),
		A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$HtmlParser$elementContinuation, $dillonkearns$elm_markdown$HtmlParser$tagName));
}
try {
	var $dillonkearns$elm_markdown$HtmlParser$html = $dillonkearns$elm_markdown$HtmlParser$cyclic$html();
	$dillonkearns$elm_markdown$HtmlParser$cyclic$html = function () {
		return $dillonkearns$elm_markdown$HtmlParser$html;
	};
	var $dillonkearns$elm_markdown$HtmlParser$element = $dillonkearns$elm_markdown$HtmlParser$cyclic$element();
	$dillonkearns$elm_markdown$HtmlParser$cyclic$element = function () {
		return $dillonkearns$elm_markdown$HtmlParser$element;
	};
} catch ($) {
	throw 'Some top-level definitions from `HtmlParser` are causing infinite recursion:\n\n  ┌─────┐\n  │    children\n  │     ↓\n  │    childrenStepOptions\n  │     ↓\n  │    html\n  │     ↓\n  │    element\n  │     ↓\n  │    elementContinuation\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $dillonkearns$elm_markdown$Parser$Token$tab = A2(
	$elm$parser$Parser$Advanced$Token,
	'\t',
	$elm$parser$Parser$Expecting('a tab'));
var $dillonkearns$elm_markdown$Markdown$Parser$exactlyFourSpaces = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$tab),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$backtrackable(
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space)),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'   ',
							$elm$parser$Parser$ExpectingSymbol('Indentation'))),
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							' \t',
							$elm$parser$Parser$ExpectingSymbol('Indentation'))),
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'  \t',
							$elm$parser$Parser$ExpectingSymbol('Indentation')))
					])))
		]));
var $dillonkearns$elm_markdown$Markdown$Parser$indentedCodeBlock = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock),
		$dillonkearns$elm_markdown$Markdown$Parser$exactlyFourSpaces),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$Helpers$isEven = function (_int) {
	return !A2($elm$core$Basics$modBy, 2, _int);
};
var $dillonkearns$elm_markdown$Markdown$Block$Loose = {$: 'Loose'};
var $dillonkearns$elm_markdown$Markdown$Block$Tight = {$: 'Tight'};
var $dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay = function (isTight) {
	return isTight ? $dillonkearns$elm_markdown$Markdown$Block$Tight : $dillonkearns$elm_markdown$Markdown$Block$Loose;
};
var $dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith = F3(
	function (joinWith, string1, string2) {
		var _v0 = _Utils_Tuple2(string1, string2);
		if (_v0.a === '') {
			return string2;
		} else {
			if (_v0.b === '') {
				return string1;
			} else {
				return _Utils_ap(
					string1,
					_Utils_ap(joinWith, string2));
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll = F2(
	function (string1, string2) {
		return string1 + ('\n' + string2);
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$innerParagraphParser = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (rawLine, _v0) {
			return $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
				$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(rawLine));
		}),
	$dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd);
var $dillonkearns$elm_markdown$Markdown$Parser$openBlockOrParagraphParser = A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$Markdown$Parser$innerParagraphParser, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
var $dillonkearns$elm_markdown$Markdown$OrderedList$ListItem = F4(
	function (order, intended, marker, body) {
		return {body: body, intended: intended, marker: marker, order: order};
	});
var $elm$parser$Parser$Advanced$getCol = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.col, s);
	});
var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListEmptyItemParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$succeed(
		function (bodyStartPos) {
			return _Utils_Tuple2(bodyStartPos, '');
		}),
	A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getCol, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore = function (condition) {
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$chompIf,
			condition,
			$elm$parser$Parser$Problem('Expected one or more character')),
		$elm$parser$Parser$Advanced$chompWhile(condition));
};
var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (bodyStartPos, item) {
						return _Utils_Tuple2(bodyStartPos, item);
					})),
			$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
		$elm$parser$Parser$Advanced$getCol),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$OrderedList$Dot = {$: 'Dot'};
var $dillonkearns$elm_markdown$Markdown$OrderedList$Paren = {$: 'Paren'};
var $dillonkearns$elm_markdown$Parser$Token$closingParen = A2(
	$elm$parser$Parser$Advanced$Token,
	')',
	$elm$parser$Parser$Expecting('a `)`'));
var $dillonkearns$elm_markdown$Parser$Token$dot = A2(
	$elm$parser$Parser$Advanced$Token,
	'.',
	$elm$parser$Parser$Expecting('a `.`'));
var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListMarkerParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$OrderedList$Dot),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$dot)),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$OrderedList$Paren),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$closingParen))
		]));
var $dillonkearns$elm_markdown$Parser$Extra$positiveInteger = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (str, _v0) {
			return A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str));
		}),
	$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($elm$core$Char$isDigit));
var $dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (parsed) {
		return (parsed <= 999999999) ? $elm$parser$Parser$Advanced$succeed(parsed) : $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Starting numbers must be nine digits or less.'));
	},
	$dillonkearns$elm_markdown$Parser$Extra$positiveInteger);
var $dillonkearns$elm_markdown$Whitespace$space = $elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$space);
var $dillonkearns$elm_markdown$Parser$Extra$upTo = F2(
	function (n, parser) {
		var _v0 = A2($elm$core$List$repeat, n, parser);
		if (!_v0.b) {
			return $elm$parser$Parser$Advanced$succeed(_Utils_Tuple0);
		} else {
			var firstParser = _v0.a;
			var remainingParsers = _v0.b;
			return A3(
				$elm$core$List$foldl,
				F2(
					function (p, parsers) {
						return $elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									A2($elm$parser$Parser$Advanced$ignorer, p, parsers),
									$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
								]));
					}),
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							firstParser,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						])),
				remainingParsers);
		}
	});
var $dillonkearns$elm_markdown$Markdown$OrderedList$validateStartsWith1 = function (parsed) {
	if (parsed === 1) {
		return $elm$parser$Parser$Advanced$succeed(parsed);
	} else {
		return $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Lists inside a paragraph or after a paragraph without a blank line must start with 1'));
	}
};
var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListOrderParser = function (previousWasBody) {
	return previousWasBody ? A2(
		$elm$parser$Parser$Advanced$andThen,
		$dillonkearns$elm_markdown$Markdown$OrderedList$validateStartsWith1,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				A2($dillonkearns$elm_markdown$Parser$Extra$upTo, 3, $dillonkearns$elm_markdown$Whitespace$space)),
			$dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits)) : A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			A2($dillonkearns$elm_markdown$Parser$Extra$upTo, 3, $dillonkearns$elm_markdown$Whitespace$space)),
		$dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits);
};
var $dillonkearns$elm_markdown$Markdown$OrderedList$parser = function (previousWasBody) {
	var parseSubsequentItem = F5(
		function (start, order, marker, mid, _v0) {
			var end = _v0.a;
			var body = _v0.b;
			return ((end - mid) <= 4) ? A4($dillonkearns$elm_markdown$Markdown$OrderedList$ListItem, order, end - start, marker, body) : A4(
				$dillonkearns$elm_markdown$Markdown$OrderedList$ListItem,
				order,
				(mid - start) + 1,
				marker,
				_Utils_ap(
					A2($elm$core$String$repeat, (end - mid) - 1, ' '),
					body));
		});
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						$elm$parser$Parser$Advanced$succeed(parseSubsequentItem),
						$elm$parser$Parser$Advanced$getCol),
					$elm$parser$Parser$Advanced$backtrackable(
						$dillonkearns$elm_markdown$Markdown$OrderedList$orderedListOrderParser(previousWasBody))),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$OrderedList$orderedListMarkerParser)),
			$elm$parser$Parser$Advanced$getCol),
		previousWasBody ? $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser : $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[$dillonkearns$elm_markdown$Markdown$OrderedList$orderedListEmptyItemParser, $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser])));
};
var $dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock = function (previousWasBody) {
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (item) {
			return A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, true, item.intended, item.marker, item.order, _List_Nil, item.body);
		},
		$dillonkearns$elm_markdown$Markdown$OrderedList$parser(previousWasBody));
};
var $dillonkearns$elm_markdown$Markdown$Inline$CodeInline = function (a) {
	return {$: 'CodeInline', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$HardLineBreak = {$: 'HardLineBreak'};
var $dillonkearns$elm_markdown$Markdown$Inline$HtmlInline = function (a) {
	return {$: 'HtmlInline', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$Image = F3(
	function (a, b, c) {
		return {$: 'Image', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Inline$Link = F3(
	function (a, b, c) {
		return {$: 'Link', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Inline$Strikethrough = function (a) {
	return {$: 'Strikethrough', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$Text = function (a) {
	return {$: 'Text', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$matchToInline = function (_v0) {
	var match = _v0.a;
	var _v1 = match.type_;
	switch (_v1.$) {
		case 'NormalType':
			return $dillonkearns$elm_markdown$Markdown$Inline$Text(match.text);
		case 'HardLineBreakType':
			return $dillonkearns$elm_markdown$Markdown$Inline$HardLineBreak;
		case 'CodeType':
			return $dillonkearns$elm_markdown$Markdown$Inline$CodeInline(match.text);
		case 'AutolinkType':
			var _v2 = _v1.a;
			var text = _v2.a;
			var url = _v2.b;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Inline$Link,
				url,
				$elm$core$Maybe$Nothing,
				_List_fromArray(
					[
						$dillonkearns$elm_markdown$Markdown$Inline$Text(text)
					]));
		case 'LinkType':
			var _v3 = _v1.a;
			var url = _v3.a;
			var maybeTitle = _v3.b;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Inline$Link,
				url,
				maybeTitle,
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		case 'ImageType':
			var _v4 = _v1.a;
			var url = _v4.a;
			var maybeTitle = _v4.b;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Inline$Image,
				url,
				maybeTitle,
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		case 'HtmlType':
			var model = _v1.a;
			return $dillonkearns$elm_markdown$Markdown$Inline$HtmlInline(model);
		case 'EmphasisType':
			var length = _v1.a;
			return A2(
				$dillonkearns$elm_markdown$Markdown$Inline$Emphasis,
				length,
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		default:
			return $dillonkearns$elm_markdown$Markdown$Inline$Strikethrough(
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines = function (matches) {
	return A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$InlineParser$matchToInline, matches);
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$Match = function (a) {
	return {$: 'Match', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch = F2(
	function (parentMatch, childMatch) {
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{end: childMatch.end - parentMatch.textStart, matches: childMatch.matches, start: childMatch.start - parentMatch.textStart, text: childMatch.text, textEnd: childMatch.textEnd - parentMatch.textStart, textStart: childMatch.textStart - parentMatch.textStart, type_: childMatch.type_});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$addChild = F2(
	function (parentMatch, childMatch) {
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{
				end: parentMatch.end,
				matches: A2(
					$elm$core$List$cons,
					A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch, parentMatch, childMatch),
					parentMatch.matches),
				start: parentMatch.start,
				text: parentMatch.text,
				textEnd: parentMatch.textEnd,
				textStart: parentMatch.textStart,
				type_: parentMatch.type_
			});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren = function (_v4) {
	var match = _v4.a;
	return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
		{
			end: match.end,
			matches: $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches(match.matches),
			start: match.start,
			text: match.text,
			textEnd: match.textEnd,
			textStart: match.textStart,
			type_: match.type_
		});
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches = function (matches) {
	var _v2 = A2(
		$elm$core$List$sortBy,
		function (_v3) {
			var match = _v3.a;
			return match.start;
		},
		matches);
	if (!_v2.b) {
		return _List_Nil;
	} else {
		var first = _v2.a;
		var rest = _v2.b;
		return A3($dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatchesHelp, rest, first, _List_Nil);
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatchesHelp = F3(
	function (remaining, _v0, matchesTail) {
		organizeMatchesHelp:
		while (true) {
			var prevMatch = _v0.a;
			if (!remaining.b) {
				return A2(
					$elm$core$List$cons,
					$dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren(
						$dillonkearns$elm_markdown$Markdown$InlineParser$Match(prevMatch)),
					matchesTail);
			} else {
				var match = remaining.a.a;
				var rest = remaining.b;
				if (_Utils_cmp(prevMatch.end, match.start) < 1) {
					var $temp$remaining = rest,
						$temp$_v0 = $dillonkearns$elm_markdown$Markdown$InlineParser$Match(match),
						$temp$matchesTail = A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren(
							$dillonkearns$elm_markdown$Markdown$InlineParser$Match(prevMatch)),
						matchesTail);
					remaining = $temp$remaining;
					_v0 = $temp$_v0;
					matchesTail = $temp$matchesTail;
					continue organizeMatchesHelp;
				} else {
					if ((_Utils_cmp(prevMatch.start, match.start) < 0) && (_Utils_cmp(prevMatch.end, match.end) > 0)) {
						var $temp$remaining = rest,
							$temp$_v0 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$addChild, prevMatch, match),
							$temp$matchesTail = matchesTail;
						remaining = $temp$remaining;
						_v0 = $temp$_v0;
						matchesTail = $temp$matchesTail;
						continue organizeMatchesHelp;
					} else {
						var $temp$remaining = rest,
							$temp$_v0 = $dillonkearns$elm_markdown$Markdown$InlineParser$Match(prevMatch),
							$temp$matchesTail = matchesTail;
						remaining = $temp$remaining;
						_v0 = $temp$_v0;
						matchesTail = $temp$matchesTail;
						continue organizeMatchesHelp;
					}
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$NormalType = {$: 'NormalType'};
var $dillonkearns$elm_markdown$Markdown$Helpers$containsAmpersand = function (string) {
	return A2($elm$core$String$contains, '&', string);
};
var $dillonkearns$elm_markdown$Markdown$Entity$decimalRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&#([0-9]{1,8});'));
var $dillonkearns$elm_markdown$Markdown$Entity$isBadEndUnicode = function (_int) {
	var remain_ = A2($elm$core$Basics$modBy, 16, _int);
	var remain = A2($elm$core$Basics$modBy, 131070, _int);
	return (_int >= 131070) && ((((0 <= remain) && (remain <= 15)) || ((65536 <= remain) && (remain <= 65551))) && ((remain_ === 14) || (remain_ === 15)));
};
var $dillonkearns$elm_markdown$Markdown$Entity$isValidUnicode = function (_int) {
	return (_int === 9) || ((_int === 10) || ((_int === 13) || ((_int === 133) || (((32 <= _int) && (_int <= 126)) || (((160 <= _int) && (_int <= 55295)) || (((57344 <= _int) && (_int <= 64975)) || (((65008 <= _int) && (_int <= 65533)) || ((65536 <= _int) && (_int <= 1114109)))))))));
};
var $dillonkearns$elm_markdown$Markdown$Entity$validUnicode = function (_int) {
	return ($dillonkearns$elm_markdown$Markdown$Entity$isValidUnicode(_int) && (!$dillonkearns$elm_markdown$Markdown$Entity$isBadEndUnicode(_int))) ? $elm$core$String$fromChar(
		$elm$core$Char$fromCode(_int)) : $elm$core$String$fromChar(
		$elm$core$Char$fromCode(65533));
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimal = function (match) {
	var _v0 = match.submatches;
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var first = _v0.a.a;
		var _v1 = $elm$core$String$toInt(first);
		if (_v1.$ === 'Just') {
			var v = _v1.a;
			return $dillonkearns$elm_markdown$Markdown$Entity$validUnicode(v);
		} else {
			return match.match;
		}
	} else {
		return match.match;
	}
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimals = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$decimalRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimal);
var $dillonkearns$elm_markdown$Markdown$Entity$entitiesRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&([0-9a-zA-Z]+);'));
var $dillonkearns$elm_markdown$Markdown$Entity$entities = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('quot', 34),
			_Utils_Tuple2('amp', 38),
			_Utils_Tuple2('apos', 39),
			_Utils_Tuple2('lt', 60),
			_Utils_Tuple2('gt', 62),
			_Utils_Tuple2('nbsp', 160),
			_Utils_Tuple2('iexcl', 161),
			_Utils_Tuple2('cent', 162),
			_Utils_Tuple2('pound', 163),
			_Utils_Tuple2('curren', 164),
			_Utils_Tuple2('yen', 165),
			_Utils_Tuple2('brvbar', 166),
			_Utils_Tuple2('sect', 167),
			_Utils_Tuple2('uml', 168),
			_Utils_Tuple2('copy', 169),
			_Utils_Tuple2('ordf', 170),
			_Utils_Tuple2('laquo', 171),
			_Utils_Tuple2('not', 172),
			_Utils_Tuple2('shy', 173),
			_Utils_Tuple2('reg', 174),
			_Utils_Tuple2('macr', 175),
			_Utils_Tuple2('deg', 176),
			_Utils_Tuple2('plusmn', 177),
			_Utils_Tuple2('sup2', 178),
			_Utils_Tuple2('sup3', 179),
			_Utils_Tuple2('acute', 180),
			_Utils_Tuple2('micro', 181),
			_Utils_Tuple2('para', 182),
			_Utils_Tuple2('middot', 183),
			_Utils_Tuple2('cedil', 184),
			_Utils_Tuple2('sup1', 185),
			_Utils_Tuple2('ordm', 186),
			_Utils_Tuple2('raquo', 187),
			_Utils_Tuple2('frac14', 188),
			_Utils_Tuple2('frac12', 189),
			_Utils_Tuple2('frac34', 190),
			_Utils_Tuple2('iquest', 191),
			_Utils_Tuple2('Agrave', 192),
			_Utils_Tuple2('Aacute', 193),
			_Utils_Tuple2('Acirc', 194),
			_Utils_Tuple2('Atilde', 195),
			_Utils_Tuple2('Auml', 196),
			_Utils_Tuple2('Aring', 197),
			_Utils_Tuple2('AElig', 198),
			_Utils_Tuple2('Ccedil', 199),
			_Utils_Tuple2('Egrave', 200),
			_Utils_Tuple2('Eacute', 201),
			_Utils_Tuple2('Ecirc', 202),
			_Utils_Tuple2('Euml', 203),
			_Utils_Tuple2('Igrave', 204),
			_Utils_Tuple2('Iacute', 205),
			_Utils_Tuple2('Icirc', 206),
			_Utils_Tuple2('Iuml', 207),
			_Utils_Tuple2('ETH', 208),
			_Utils_Tuple2('Ntilde', 209),
			_Utils_Tuple2('Ograve', 210),
			_Utils_Tuple2('Oacute', 211),
			_Utils_Tuple2('Ocirc', 212),
			_Utils_Tuple2('Otilde', 213),
			_Utils_Tuple2('Ouml', 214),
			_Utils_Tuple2('times', 215),
			_Utils_Tuple2('Oslash', 216),
			_Utils_Tuple2('Ugrave', 217),
			_Utils_Tuple2('Uacute', 218),
			_Utils_Tuple2('Ucirc', 219),
			_Utils_Tuple2('Uuml', 220),
			_Utils_Tuple2('Yacute', 221),
			_Utils_Tuple2('THORN', 222),
			_Utils_Tuple2('szlig', 223),
			_Utils_Tuple2('agrave', 224),
			_Utils_Tuple2('aacute', 225),
			_Utils_Tuple2('acirc', 226),
			_Utils_Tuple2('atilde', 227),
			_Utils_Tuple2('auml', 228),
			_Utils_Tuple2('aring', 229),
			_Utils_Tuple2('aelig', 230),
			_Utils_Tuple2('ccedil', 231),
			_Utils_Tuple2('egrave', 232),
			_Utils_Tuple2('eacute', 233),
			_Utils_Tuple2('ecirc', 234),
			_Utils_Tuple2('euml', 235),
			_Utils_Tuple2('igrave', 236),
			_Utils_Tuple2('iacute', 237),
			_Utils_Tuple2('icirc', 238),
			_Utils_Tuple2('iuml', 239),
			_Utils_Tuple2('eth', 240),
			_Utils_Tuple2('ntilde', 241),
			_Utils_Tuple2('ograve', 242),
			_Utils_Tuple2('oacute', 243),
			_Utils_Tuple2('ocirc', 244),
			_Utils_Tuple2('otilde', 245),
			_Utils_Tuple2('ouml', 246),
			_Utils_Tuple2('divide', 247),
			_Utils_Tuple2('oslash', 248),
			_Utils_Tuple2('ugrave', 249),
			_Utils_Tuple2('uacute', 250),
			_Utils_Tuple2('ucirc', 251),
			_Utils_Tuple2('uuml', 252),
			_Utils_Tuple2('yacute', 253),
			_Utils_Tuple2('thorn', 254),
			_Utils_Tuple2('yuml', 255),
			_Utils_Tuple2('OElig', 338),
			_Utils_Tuple2('oelig', 339),
			_Utils_Tuple2('Scaron', 352),
			_Utils_Tuple2('scaron', 353),
			_Utils_Tuple2('Yuml', 376),
			_Utils_Tuple2('fnof', 402),
			_Utils_Tuple2('circ', 710),
			_Utils_Tuple2('tilde', 732),
			_Utils_Tuple2('Alpha', 913),
			_Utils_Tuple2('Beta', 914),
			_Utils_Tuple2('Gamma', 915),
			_Utils_Tuple2('Delta', 916),
			_Utils_Tuple2('Epsilon', 917),
			_Utils_Tuple2('Zeta', 918),
			_Utils_Tuple2('Eta', 919),
			_Utils_Tuple2('Theta', 920),
			_Utils_Tuple2('Iota', 921),
			_Utils_Tuple2('Kappa', 922),
			_Utils_Tuple2('Lambda', 923),
			_Utils_Tuple2('Mu', 924),
			_Utils_Tuple2('Nu', 925),
			_Utils_Tuple2('Xi', 926),
			_Utils_Tuple2('Omicron', 927),
			_Utils_Tuple2('Pi', 928),
			_Utils_Tuple2('Rho', 929),
			_Utils_Tuple2('Sigma', 931),
			_Utils_Tuple2('Tau', 932),
			_Utils_Tuple2('Upsilon', 933),
			_Utils_Tuple2('Phi', 934),
			_Utils_Tuple2('Chi', 935),
			_Utils_Tuple2('Psi', 936),
			_Utils_Tuple2('Omega', 937),
			_Utils_Tuple2('alpha', 945),
			_Utils_Tuple2('beta', 946),
			_Utils_Tuple2('gamma', 947),
			_Utils_Tuple2('delta', 948),
			_Utils_Tuple2('epsilon', 949),
			_Utils_Tuple2('zeta', 950),
			_Utils_Tuple2('eta', 951),
			_Utils_Tuple2('theta', 952),
			_Utils_Tuple2('iota', 953),
			_Utils_Tuple2('kappa', 954),
			_Utils_Tuple2('lambda', 955),
			_Utils_Tuple2('mu', 956),
			_Utils_Tuple2('nu', 957),
			_Utils_Tuple2('xi', 958),
			_Utils_Tuple2('omicron', 959),
			_Utils_Tuple2('pi', 960),
			_Utils_Tuple2('rho', 961),
			_Utils_Tuple2('sigmaf', 962),
			_Utils_Tuple2('sigma', 963),
			_Utils_Tuple2('tau', 964),
			_Utils_Tuple2('upsilon', 965),
			_Utils_Tuple2('phi', 966),
			_Utils_Tuple2('chi', 967),
			_Utils_Tuple2('psi', 968),
			_Utils_Tuple2('omega', 969),
			_Utils_Tuple2('thetasym', 977),
			_Utils_Tuple2('upsih', 978),
			_Utils_Tuple2('piv', 982),
			_Utils_Tuple2('ensp', 8194),
			_Utils_Tuple2('emsp', 8195),
			_Utils_Tuple2('thinsp', 8201),
			_Utils_Tuple2('zwnj', 8204),
			_Utils_Tuple2('zwj', 8205),
			_Utils_Tuple2('lrm', 8206),
			_Utils_Tuple2('rlm', 8207),
			_Utils_Tuple2('ndash', 8211),
			_Utils_Tuple2('mdash', 8212),
			_Utils_Tuple2('lsquo', 8216),
			_Utils_Tuple2('rsquo', 8217),
			_Utils_Tuple2('sbquo', 8218),
			_Utils_Tuple2('ldquo', 8220),
			_Utils_Tuple2('rdquo', 8221),
			_Utils_Tuple2('bdquo', 8222),
			_Utils_Tuple2('dagger', 8224),
			_Utils_Tuple2('Dagger', 8225),
			_Utils_Tuple2('bull', 8226),
			_Utils_Tuple2('hellip', 8230),
			_Utils_Tuple2('permil', 8240),
			_Utils_Tuple2('prime', 8242),
			_Utils_Tuple2('Prime', 8243),
			_Utils_Tuple2('lsaquo', 8249),
			_Utils_Tuple2('rsaquo', 8250),
			_Utils_Tuple2('oline', 8254),
			_Utils_Tuple2('frasl', 8260),
			_Utils_Tuple2('euro', 8364),
			_Utils_Tuple2('image', 8465),
			_Utils_Tuple2('weierp', 8472),
			_Utils_Tuple2('real', 8476),
			_Utils_Tuple2('trade', 8482),
			_Utils_Tuple2('alefsym', 8501),
			_Utils_Tuple2('larr', 8592),
			_Utils_Tuple2('uarr', 8593),
			_Utils_Tuple2('rarr', 8594),
			_Utils_Tuple2('darr', 8595),
			_Utils_Tuple2('harr', 8596),
			_Utils_Tuple2('crarr', 8629),
			_Utils_Tuple2('lArr', 8656),
			_Utils_Tuple2('uArr', 8657),
			_Utils_Tuple2('rArr', 8658),
			_Utils_Tuple2('dArr', 8659),
			_Utils_Tuple2('hArr', 8660),
			_Utils_Tuple2('forall', 8704),
			_Utils_Tuple2('part', 8706),
			_Utils_Tuple2('exist', 8707),
			_Utils_Tuple2('empty', 8709),
			_Utils_Tuple2('nabla', 8711),
			_Utils_Tuple2('isin', 8712),
			_Utils_Tuple2('notin', 8713),
			_Utils_Tuple2('ni', 8715),
			_Utils_Tuple2('prod', 8719),
			_Utils_Tuple2('sum', 8721),
			_Utils_Tuple2('minus', 8722),
			_Utils_Tuple2('lowast', 8727),
			_Utils_Tuple2('radic', 8730),
			_Utils_Tuple2('prop', 8733),
			_Utils_Tuple2('infin', 8734),
			_Utils_Tuple2('ang', 8736),
			_Utils_Tuple2('and', 8743),
			_Utils_Tuple2('or', 8744),
			_Utils_Tuple2('cap', 8745),
			_Utils_Tuple2('cup', 8746),
			_Utils_Tuple2('int', 8747),
			_Utils_Tuple2('there4', 8756),
			_Utils_Tuple2('sim', 8764),
			_Utils_Tuple2('cong', 8773),
			_Utils_Tuple2('asymp', 8776),
			_Utils_Tuple2('ne', 8800),
			_Utils_Tuple2('equiv', 8801),
			_Utils_Tuple2('le', 8804),
			_Utils_Tuple2('ge', 8805),
			_Utils_Tuple2('sub', 8834),
			_Utils_Tuple2('sup', 8835),
			_Utils_Tuple2('nsub', 8836),
			_Utils_Tuple2('sube', 8838),
			_Utils_Tuple2('supe', 8839),
			_Utils_Tuple2('oplus', 8853),
			_Utils_Tuple2('otimes', 8855),
			_Utils_Tuple2('perp', 8869),
			_Utils_Tuple2('sdot', 8901),
			_Utils_Tuple2('lceil', 8968),
			_Utils_Tuple2('rceil', 8969),
			_Utils_Tuple2('lfloor', 8970),
			_Utils_Tuple2('rfloor', 8971),
			_Utils_Tuple2('lang', 9001),
			_Utils_Tuple2('rang', 9002),
			_Utils_Tuple2('loz', 9674),
			_Utils_Tuple2('spades', 9824),
			_Utils_Tuple2('clubs', 9827),
			_Utils_Tuple2('hearts', 9829),
			_Utils_Tuple2('diams', 9830)
		]));
var $dillonkearns$elm_markdown$Markdown$Entity$replaceEntity = function (match) {
	var _v0 = match.submatches;
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var first = _v0.a.a;
		var _v1 = A2($elm$core$Dict$get, first, $dillonkearns$elm_markdown$Markdown$Entity$entities);
		if (_v1.$ === 'Just') {
			var code = _v1.a;
			return $elm$core$String$fromChar(
				$elm$core$Char$fromCode(code));
		} else {
			return match.match;
		}
	} else {
		return match.match;
	}
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceEntities = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$entitiesRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceEntity);
var $dillonkearns$elm_markdown$Markdown$Helpers$escapableRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\+)([!\"#$%&\\\'()*+,./:;<=>?@[\\\\\\]^_`{|}~-])'));
var $dillonkearns$elm_markdown$Markdown$Helpers$replaceEscapable = A2(
	$elm$regex$Regex$replace,
	$dillonkearns$elm_markdown$Markdown$Helpers$escapableRegex,
	function (regexMatch) {
		var _v0 = regexMatch.submatches;
		if (((_v0.b && (_v0.a.$ === 'Just')) && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
			var backslashes = _v0.a.a;
			var _v1 = _v0.b;
			var escapedStr = _v1.a.a;
			return _Utils_ap(
				A2(
					$elm$core$String$repeat,
					($elm$core$String$length(backslashes) / 2) | 0,
					'\\'),
				escapedStr);
		} else {
			return regexMatch.match;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Entity$hexadecimalRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&#[Xx]([0-9a-fA-F]{1,8});'));
var $dillonkearns$elm_markdown$Markdown$Entity$hexToInt = function (string) {
	var folder = F2(
		function (hexDigit, _int) {
			return ((_int * 16) + A2(
				$elm$core$Basics$modBy,
				39,
				$elm$core$Char$toCode(hexDigit))) - 9;
		});
	return A3(
		$elm$core$String$foldl,
		folder,
		0,
		$elm$core$String$toLower(string));
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimal = function (match) {
	var _v0 = match.submatches;
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var first = _v0.a.a;
		return $dillonkearns$elm_markdown$Markdown$Entity$validUnicode(
			$dillonkearns$elm_markdown$Markdown$Entity$hexToInt(first));
	} else {
		return match.match;
	}
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimals = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$hexadecimalRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimal);
var $dillonkearns$elm_markdown$Markdown$Helpers$formatStr = function (str) {
	var withEscapes = $dillonkearns$elm_markdown$Markdown$Helpers$replaceEscapable(str);
	return $dillonkearns$elm_markdown$Markdown$Helpers$containsAmpersand(withEscapes) ? $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimals(
		$dillonkearns$elm_markdown$Markdown$Entity$replaceDecimals(
			$dillonkearns$elm_markdown$Markdown$Entity$replaceEntities(withEscapes))) : withEscapes;
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch = function (text) {
	return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
		{
			end: 0,
			matches: _List_Nil,
			start: 0,
			text: $dillonkearns$elm_markdown$Markdown$Helpers$formatStr(text),
			textEnd: 0,
			textStart: 0,
			type_: $dillonkearns$elm_markdown$Markdown$InlineParser$NormalType
		});
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatch = F3(
	function (rawText, _v2, parsedMatches) {
		var matchModel = _v2.a;
		var updtMatch = $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{
				end: matchModel.end,
				matches: A3($dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches, matchModel.text, _List_Nil, matchModel.matches),
				start: matchModel.start,
				text: matchModel.text,
				textEnd: matchModel.textEnd,
				textStart: matchModel.textStart,
				type_: matchModel.type_
			});
		if (!parsedMatches.b) {
			var finalStr = A2($elm$core$String$dropLeft, matchModel.end, rawText);
			return $elm$core$String$isEmpty(finalStr) ? _List_fromArray(
				[updtMatch]) : _List_fromArray(
				[
					updtMatch,
					$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(finalStr)
				]);
		} else {
			var matchHead = parsedMatches.a.a;
			var matchesTail = parsedMatches.b;
			var _v4 = matchHead.type_;
			if (_v4.$ === 'NormalType') {
				return A2($elm$core$List$cons, updtMatch, parsedMatches);
			} else {
				return _Utils_eq(matchModel.end, matchHead.start) ? A2($elm$core$List$cons, updtMatch, parsedMatches) : ((_Utils_cmp(matchModel.end, matchHead.start) < 0) ? A2(
					$elm$core$List$cons,
					updtMatch,
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(
							A3($elm$core$String$slice, matchModel.end, matchHead.start, rawText)),
						parsedMatches)) : parsedMatches);
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches = F3(
	function (rawText, parsedMatches, matches) {
		parseTextMatches:
		while (true) {
			if (!matches.b) {
				if (!parsedMatches.b) {
					return $elm$core$String$isEmpty(rawText) ? _List_Nil : _List_fromArray(
						[
							$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(rawText)
						]);
				} else {
					var matchModel = parsedMatches.a.a;
					return (matchModel.start > 0) ? A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(
							A2($elm$core$String$left, matchModel.start, rawText)),
						parsedMatches) : parsedMatches;
				}
			} else {
				var match = matches.a;
				var matchesTail = matches.b;
				var $temp$rawText = rawText,
					$temp$parsedMatches = A3($dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatch, rawText, match, parsedMatches),
					$temp$matches = matchesTail;
				rawText = $temp$rawText;
				parsedMatches = $temp$parsedMatches;
				matches = $temp$matches;
				continue parseTextMatches;
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketLTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\<)'));
var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
var $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketOpen = {$: 'AngleBracketOpen'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketLToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var delimiter = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
			{index: regMatch.index + backslashesLength, length: 1, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketOpen}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketLTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketLToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketLTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketRTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\>)'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose = function (a) {
	return {$: 'AngleBracketClose', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$Escaped = {$: 'Escaped'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped = {$: 'NotEscaped'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketRToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $elm$core$Maybe$Just(
			{
				index: regMatch.index + backslashesLength,
				length: 1,
				meaning: $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose($dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped) : $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose($dillonkearns$elm_markdown$Markdown$InlineParser$Escaped)
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketRTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketRToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketRTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$asteriskEmphasisTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)([^*])?(\\*+)([^*])?'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisToken = F2(
	function (a, b) {
		return {$: 'EmphasisToken', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isPunctuation = function (c) {
	switch (c.valueOf()) {
		case '!':
			return true;
		case '\"':
			return true;
		case '#':
			return true;
		case '%':
			return true;
		case '&':
			return true;
		case '\'':
			return true;
		case '(':
			return true;
		case ')':
			return true;
		case '*':
			return true;
		case ',':
			return true;
		case '-':
			return true;
		case '.':
			return true;
		case '/':
			return true;
		case ':':
			return true;
		case ';':
			return true;
		case '?':
			return true;
		case '@':
			return true;
		case '[':
			return true;
		case ']':
			return true;
		case '_':
			return true;
		case '{':
			return true;
		case '}':
			return true;
		case '~':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation = A2(
	$elm$core$String$foldl,
	F2(
		function (c, accum) {
			return accum || $dillonkearns$elm_markdown$Markdown$InlineParser$isPunctuation(c);
		}),
	false);
var $dillonkearns$elm_markdown$Markdown$InlineParser$isWhitespace = function (c) {
	switch (c.valueOf()) {
		case ' ':
			return true;
		case '\u000C':
			return true;
		case '\n':
			return true;
		case '\r':
			return true;
		case '\t':
			return true;
		case '\u000B':
			return true;
		case '\u00A0':
			return true;
		case '\u2028':
			return true;
		case '\u2029':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace = A2(
	$elm$core$String$foldl,
	F2(
		function (c, accum) {
			return accum || $dillonkearns$elm_markdown$Markdown$InlineParser$isWhitespace(c);
		}),
	false);
var $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank = function (mstring) {
	if (mstring.$ === 'Just') {
		var string = mstring.a;
		return ($elm$core$String$isEmpty(string) || $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace(string)) ? 0 : ($dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation(string) ? 1 : 2);
	} else {
		return 0;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken = F3(
	function (_char, rawText, regMatch) {
		var _v0 = regMatch.submatches;
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && (_v0.b.b.a.$ === 'Just')) && _v0.b.b.b.b) {
			var maybeBackslashes = _v0.a;
			var _v1 = _v0.b;
			var maybeLeftFringe = _v1.a;
			var _v2 = _v1.b;
			var delimiter = _v2.a.a;
			var _v3 = _v2.b;
			var maybeRightFringe = _v3.a;
			var rFringeRank = $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank(maybeRightFringe);
			var leftFringeLength = function () {
				if (maybeLeftFringe.$ === 'Just') {
					var left = maybeLeftFringe.a;
					return $elm$core$String$length(left);
				} else {
					return 0;
				}
			}();
			var mLeftFringe = ((!(!regMatch.index)) && (!leftFringeLength)) ? $elm$core$Maybe$Just(
				A3($elm$core$String$slice, regMatch.index - 1, regMatch.index, rawText)) : maybeLeftFringe;
			var backslashesLength = function () {
				if (maybeBackslashes.$ === 'Just') {
					var backslashes = maybeBackslashes.a;
					return $elm$core$String$length(backslashes);
				} else {
					return 0;
				}
			}();
			var isEscaped = ((!$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength)) && (!leftFringeLength)) || function () {
				if ((mLeftFringe.$ === 'Just') && (mLeftFringe.a === '\\')) {
					return true;
				} else {
					return false;
				}
			}();
			var delimiterLength = isEscaped ? ($elm$core$String$length(delimiter) - 1) : $elm$core$String$length(delimiter);
			var lFringeRank = isEscaped ? 1 : $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank(mLeftFringe);
			if ((delimiterLength <= 0) || (_Utils_eq(
				_char,
				_Utils_chr('_')) && ((lFringeRank === 2) && (rFringeRank === 2)))) {
				return $elm$core$Maybe$Nothing;
			} else {
				var index = ((regMatch.index + backslashesLength) + leftFringeLength) + (isEscaped ? 1 : 0);
				return $elm$core$Maybe$Just(
					{
						index: index,
						length: delimiterLength,
						meaning: A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisToken,
							_char,
							{leftFringeRank: lFringeRank, rightFringeRank: rFringeRank})
					});
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$findAsteriskEmphasisTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		A2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken,
			_Utils_chr('*'),
			str),
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$asteriskEmphasisTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$codeTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\`+)'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken = function (a) {
	return {$: 'CodeToken', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToCodeToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backtick = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $elm$core$Maybe$Just(
			{
				index: regMatch.index + backslashesLength,
				length: $elm$core$String$length(backtick),
				meaning: $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken($dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped) : $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken($dillonkearns$elm_markdown$Markdown$InlineParser$Escaped)
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findCodeTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToCodeToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$codeTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$hardBreakTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(?:(\\\\+)|( {2,}))\\n'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken = {$: 'HardLineBreakToken'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToHardBreakToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	_v0$2:
	while (true) {
		if (_v0.b) {
			if (_v0.a.$ === 'Just') {
				var backslashes = _v0.a.a;
				var backslashesLength = $elm$core$String$length(backslashes);
				return (!$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength)) ? $elm$core$Maybe$Just(
					{index: (regMatch.index + backslashesLength) - 1, length: 2, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken}) : $elm$core$Maybe$Nothing;
			} else {
				if (_v0.b.b && (_v0.b.a.$ === 'Just')) {
					var _v1 = _v0.b;
					return $elm$core$Maybe$Just(
						{
							index: regMatch.index,
							length: $elm$core$String$length(regMatch.match),
							meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken
						});
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToSoftHardBreakToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	_v0$2:
	while (true) {
		if (_v0.b) {
			if (_v0.a.$ === 'Just') {
				var backslashes = _v0.a.a;
				var backslashesLength = $elm$core$String$length(backslashes);
				return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
					{index: regMatch.index + backslashesLength, length: 1, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken}) : $elm$core$Maybe$Just(
					{index: (regMatch.index + backslashesLength) - 1, length: 2, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken});
			} else {
				if (_v0.b.b) {
					var _v1 = _v0.b;
					var maybeSpaces = _v1.a;
					return $elm$core$Maybe$Just(
						{
							index: regMatch.index,
							length: $elm$core$String$length(regMatch.match),
							meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken
						});
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreak = false;
var $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreakTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(?:(\\\\+)|( *))\\n'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$findHardBreakTokens = function (str) {
	return $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreak ? A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToSoftHardBreakToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreakTokenRegex, str)) : A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToHardBreakToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$hardBreakTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageCloseTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\])'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$SquareBracketClose = {$: 'SquareBracketClose'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageCloseToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
			{index: regMatch.index + backslashesLength, length: 1, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$SquareBracketClose}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageCloseTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageCloseToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageCloseTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageOpenTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\!)?(\\[)'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$Active = {$: 'Active'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$ImageOpenToken = {$: 'ImageOpenToken'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken = function (a) {
	return {$: 'LinkOpenToken', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageOpenToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if (((_v0.b && _v0.b.b) && _v0.b.b.b) && (_v0.b.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var maybeImageOpen = _v1.a;
		var _v2 = _v1.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		var isEscaped = !$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength);
		var index = isEscaped ? ((regMatch.index + backslashesLength) + 1) : (regMatch.index + backslashesLength);
		if (isEscaped) {
			if (maybeImageOpen.$ === 'Just') {
				return $elm$core$Maybe$Just(
					{
						index: index,
						length: 1,
						meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken($dillonkearns$elm_markdown$Markdown$InlineParser$Active)
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			if (maybeImageOpen.$ === 'Just') {
				return $elm$core$Maybe$Just(
					{index: index, length: 2, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$ImageOpenToken});
			} else {
				return $elm$core$Maybe$Just(
					{
						index: index,
						length: 1,
						meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken($dillonkearns$elm_markdown$Markdown$InlineParser$Active)
					});
			}
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageOpenTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageOpenToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageOpenTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken = function (a) {
	return {$: 'StrikethroughToken', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToStrikethroughToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var tilde = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		var _v2 = $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? _Utils_Tuple2(
			$elm$core$String$length(tilde),
			$dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken($dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped)) : _Utils_Tuple2(
			$elm$core$String$length(tilde),
			$dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken($dillonkearns$elm_markdown$Markdown$InlineParser$Escaped));
		var length = _v2.a;
		var meaning = _v2.b;
		return $elm$core$Maybe$Just(
			{index: regMatch.index + backslashesLength, length: length, meaning: meaning});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(~{2,})([^~])?'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$findStrikethroughTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToStrikethroughToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$underlineEmphasisTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)([^_])?(\\_+)([^_])?'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$findUnderlineEmphasisTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		A2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken,
			_Utils_chr('_'),
			str),
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$underlineEmphasisTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex = F2(
	function (left, right) {
		if (left.b) {
			var lfirst = left.a;
			var lrest = left.b;
			if (right.b) {
				var rfirst = right.a;
				var rrest = right.b;
				return (_Utils_cmp(lfirst.index, rfirst.index) < 0) ? A2(
					$elm$core$List$cons,
					lfirst,
					A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, lrest, right)) : A2(
					$elm$core$List$cons,
					rfirst,
					A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, left, rrest));
			} else {
				return left;
			}
		} else {
			return right;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenize = function (rawText) {
	return A2(
		$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
		$dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketRTokens(rawText),
		A2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
			$dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketLTokens(rawText),
			A2(
				$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
				$dillonkearns$elm_markdown$Markdown$InlineParser$findHardBreakTokens(rawText),
				A2(
					$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
					$dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageCloseTokens(rawText),
					A2(
						$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
						$dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageOpenTokens(rawText),
						A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
							$dillonkearns$elm_markdown$Markdown$InlineParser$findStrikethroughTokens(rawText),
							A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
								$dillonkearns$elm_markdown$Markdown$InlineParser$findUnderlineEmphasisTokens(rawText),
								A2(
									$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
									$dillonkearns$elm_markdown$Markdown$InlineParser$findAsteriskEmphasisTokens(rawText),
									$dillonkearns$elm_markdown$Markdown$InlineParser$findCodeTokens(rawText)))))))));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$CodeType = {$: 'CodeType'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisType = function (a) {
	return {$: 'EmphasisType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType = function (a) {
	return {$: 'HtmlType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType = function (a) {
	return {$: 'ImageType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$Inactive = {$: 'Inactive'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType = function (a) {
	return {$: 'LinkType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughType = {$: 'StrikethroughType'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType = function (a) {
	return {$: 'AutolinkType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$decodeUrlRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('%(?:3B|2C|2F|3F|3A|40|26|3D|2B|24|23|25)'));
var $elm$url$Url$percentEncode = _Url_percentEncode;
var $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl = A2(
	$elm$core$Basics$composeR,
	$elm$url$Url$percentEncode,
	A2(
		$elm$regex$Regex$replace,
		$dillonkearns$elm_markdown$Markdown$InlineParser$decodeUrlRegex,
		function (match) {
			return A2(
				$elm$core$Maybe$withDefault,
				match.match,
				$elm$url$Url$percentDecode(match.match));
		}));
var $dillonkearns$elm_markdown$Markdown$InlineParser$urlRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^([A-Za-z][A-Za-z0-9.+\\-]{1,31}:[^<>\\x00-\\x20]*)$'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$autolinkToMatch = function (_v0) {
	var match = _v0.a;
	return A2($elm$regex$Regex$contains, $dillonkearns$elm_markdown$Markdown$InlineParser$urlRegex, match.text) ? $elm$core$Result$Ok(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			_Utils_update(
				match,
				{
					type_: $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType(
						_Utils_Tuple2(
							match.text,
							$dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(match.text)))
				}))) : $elm$core$Result$Err(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(match));
};
var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
var $dillonkearns$elm_markdown$Markdown$Helpers$insideSquareBracketRegex = '[^\\[\\]\\\\]*(?:\\\\.[^\\[\\]\\\\]*)*';
var $dillonkearns$elm_markdown$Markdown$InlineParser$refLabelRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^\\[\\s*(' + ($dillonkearns$elm_markdown$Markdown$Helpers$insideSquareBracketRegex + ')\\s*\\]')));
var $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces = function (original) {
	return original;
};
var $dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel = A2($elm$core$Basics$composeR, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $elm$core$String$toLower);
var $dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle = F2(
	function (rawUrl, maybeTitle) {
		return _Utils_Tuple2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(
				$dillonkearns$elm_markdown$Markdown$Helpers$formatStr(rawUrl)),
			A2($elm$core$Maybe$map, $dillonkearns$elm_markdown$Markdown$Helpers$formatStr, maybeTitle));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$refRegexToMatch = F3(
	function (matchModel, references, maybeRegexMatch) {
		var refLabel = function (str) {
			return $elm$core$String$isEmpty(str) ? matchModel.text : str;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				matchModel.text,
				A2(
					$elm$core$Maybe$withDefault,
					$elm$core$Maybe$Nothing,
					A2(
						$elm$core$Maybe$andThen,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.submatches;
							},
							$elm$core$List$head),
						maybeRegexMatch))));
		var _v0 = A2(
			$elm$core$Dict$get,
			$dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel(refLabel),
			references);
		if (_v0.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v1 = _v0.a;
			var rawUrl = _v1.a;
			var maybeTitle = _v1.b;
			var type_ = function () {
				var _v3 = matchModel.type_;
				if (_v3.$ === 'ImageType') {
					return $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType(
						A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle));
				} else {
					return $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType(
						A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle));
				}
			}();
			var regexMatchLength = function () {
				if (maybeRegexMatch.$ === 'Just') {
					var match = maybeRegexMatch.a.match;
					return $elm$core$String$length(match);
				} else {
					return 0;
				}
			}();
			return $elm$core$Maybe$Just(
				$dillonkearns$elm_markdown$Markdown$InlineParser$Match(
					_Utils_update(
						matchModel,
						{end: matchModel.end + regexMatchLength, type_: type_})));
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences = F3(
	function (remainText, _v0, references) {
		var tempMatch = _v0.a;
		var matches = A3($elm$regex$Regex$findAtMost, 1, $dillonkearns$elm_markdown$Markdown$InlineParser$refLabelRegex, remainText);
		return A3(
			$dillonkearns$elm_markdown$Markdown$InlineParser$refRegexToMatch,
			tempMatch,
			references,
			$elm$core$List$head(matches));
	});
var $dillonkearns$elm_markdown$Markdown$Helpers$lineEndChars = '\\f\\v\\r\\n';
var $dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars = ' \\t\\f\\v\\r\\n';
var $dillonkearns$elm_markdown$Markdown$InlineParser$hrefRegex = '(?:<([^<>' + ($dillonkearns$elm_markdown$Markdown$Helpers$lineEndChars + (']*)>|([^' + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + ('\\(\\)\\\\]*(?:\\\\.[^' + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + '\\(\\)\\\\]*)*))')))));
var $dillonkearns$elm_markdown$Markdown$Helpers$titleRegex = '(?:[' + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + (']+' + ('(?:\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\'|' + ('\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|' + '\\(([^\\)\\\\]*(?:\\\\.[^\\)\\\\]*)*)\\)))?'))));
var $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^\\(\\s*' + ($dillonkearns$elm_markdown$Markdown$InlineParser$hrefRegex + ($dillonkearns$elm_markdown$Markdown$Helpers$titleRegex + '\\s*\\)'))));
var $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust = function (maybes) {
	var process = F2(
		function (a, maybeFound) {
			if (maybeFound.$ === 'Just') {
				var found = maybeFound.a;
				return $elm$core$Maybe$Just(found);
			} else {
				return a;
			}
		});
	return A3($elm$core$List$foldl, process, $elm$core$Maybe$Nothing, maybes);
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch = F2(
	function (matchModel, regexMatch) {
		var _v0 = regexMatch.submatches;
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && _v0.b.b.b.b.b) {
			var maybeRawUrlAngleBrackets = _v0.a;
			var _v1 = _v0.b;
			var maybeRawUrlWithoutBrackets = _v1.a;
			var _v2 = _v1.b;
			var maybeTitleSingleQuotes = _v2.a;
			var _v3 = _v2.b;
			var maybeTitleDoubleQuotes = _v3.a;
			var _v4 = _v3.b;
			var maybeTitleParenthesis = _v4.a;
			var maybeTitle = $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust(
				_List_fromArray(
					[maybeTitleSingleQuotes, maybeTitleDoubleQuotes, maybeTitleParenthesis]));
			var toMatch = function (rawUrl) {
				return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
					_Utils_update(
						matchModel,
						{
							end: matchModel.end + $elm$core$String$length(regexMatch.match),
							type_: function () {
								var _v5 = matchModel.type_;
								if (_v5.$ === 'ImageType') {
									return $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType;
								} else {
									return $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType;
								}
							}()(
								A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle))
						}));
			};
			var maybeRawUrl = $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust(
				_List_fromArray(
					[maybeRawUrlAngleBrackets, maybeRawUrlWithoutBrackets]));
			return $elm$core$Maybe$Just(
				toMatch(
					A2($elm$core$Maybe$withDefault, '', maybeRawUrl)));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType = F3(
	function (remainText, _v0, refs) {
		var tempMatch = _v0.a;
		var _v1 = A3($elm$regex$Regex$findAtMost, 1, $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex, remainText);
		if (_v1.b) {
			var first = _v1.a;
			var _v2 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch, tempMatch, first);
			if (_v2.$ === 'Just') {
				var match = _v2.a;
				return $elm$core$Maybe$Just(match);
			} else {
				return A3(
					$dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences,
					remainText,
					$dillonkearns$elm_markdown$Markdown$InlineParser$Match(tempMatch),
					refs);
			}
		} else {
			return A3(
				$dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences,
				remainText,
				$dillonkearns$elm_markdown$Markdown$InlineParser$Match(tempMatch),
				refs);
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping = F2(
	function (_v0, remainMatches) {
		var match = _v0.a;
		var overlappingMatches = $elm$core$List$filter(
			function (_v1) {
				var testMatch = _v1.a;
				return (_Utils_cmp(match.end, testMatch.start) > 0) && (_Utils_cmp(match.end, testMatch.end) < 0);
			});
		return ($elm$core$List$isEmpty(remainMatches) || $elm$core$List$isEmpty(
			overlappingMatches(remainMatches))) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$List$cons,
				$dillonkearns$elm_markdown$Markdown$InlineParser$Match(match),
				remainMatches)) : $elm$core$Maybe$Nothing;
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$emailRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^([a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?)*)$'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$emailAutolinkTypeToMatch = function (_v0) {
	var match = _v0.a;
	return A2($elm$regex$Regex$contains, $dillonkearns$elm_markdown$Markdown$InlineParser$emailRegex, match.text) ? $elm$core$Result$Ok(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			_Utils_update(
				match,
				{
					type_: $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType(
						_Utils_Tuple2(
							match.text,
							'mailto:' + $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(match.text)))
				}))) : $elm$core$Result$Err(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(match));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findTokenHelp = F3(
	function (innerTokens, isToken, tokens) {
		findTokenHelp:
		while (true) {
			if (!tokens.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var nextToken = tokens.a;
				var remainingTokens = tokens.b;
				if (isToken(nextToken)) {
					return $elm$core$Maybe$Just(
						_Utils_Tuple3(
							nextToken,
							$elm$core$List$reverse(innerTokens),
							remainingTokens));
				} else {
					var $temp$innerTokens = A2($elm$core$List$cons, nextToken, innerTokens),
						$temp$isToken = isToken,
						$temp$tokens = remainingTokens;
					innerTokens = $temp$innerTokens;
					isToken = $temp$isToken;
					tokens = $temp$tokens;
					continue findTokenHelp;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$findToken = F2(
	function (isToken, tokens) {
		return A3($dillonkearns$elm_markdown$Markdown$InlineParser$findTokenHelp, _List_Nil, isToken, tokens);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlToken = F2(
	function (a, b) {
		return {$: 'HtmlToken', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$NotOpening = {$: 'NotOpening'};
var $elm$parser$Parser$Advanced$getOffset = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.offset, s);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$htmlToToken = F2(
	function (rawText, _v0) {
		var match = _v0.a;
		var consumedCharacters = A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (startOffset, htmlTag, endOffset) {
								return {htmlTag: htmlTag, length: endOffset - startOffset};
							})),
					$elm$parser$Parser$Advanced$getOffset),
				$dillonkearns$elm_markdown$HtmlParser$html),
			$elm$parser$Parser$Advanced$getOffset);
		var parsed = A2(
			$elm$parser$Parser$Advanced$run,
			consumedCharacters,
			A2($elm$core$String$dropLeft, match.start, rawText));
		if (parsed.$ === 'Ok') {
			var htmlTag = parsed.a.htmlTag;
			var length = parsed.a.length;
			var htmlToken = A2($dillonkearns$elm_markdown$Markdown$InlineParser$HtmlToken, $dillonkearns$elm_markdown$Markdown$InlineParser$NotOpening, htmlTag);
			return $elm$core$Maybe$Just(
				{index: match.start, length: length, meaning: htmlToken});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Helpers$ifError = F2(
	function (_function, result) {
		if (result.$ === 'Ok') {
			return result;
		} else {
			var err = result.a;
			return _function(err);
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isCloseToken = F2(
	function (htmlModel, token) {
		return false;
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isCodeTokenPair = F2(
	function (closeToken, openToken) {
		var _v0 = openToken.meaning;
		if (_v0.$ === 'CodeToken') {
			if (_v0.a.$ === 'Escaped') {
				var _v1 = _v0.a;
				return _Utils_eq(openToken.length - 1, closeToken.length);
			} else {
				var _v2 = _v0.a;
				return _Utils_eq(openToken.length, closeToken.length);
			}
		} else {
			return false;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isLinkTypeOrImageOpenToken = function (token) {
	var _v0 = token.meaning;
	switch (_v0.$) {
		case 'LinkOpenToken':
			return true;
		case 'ImageOpenToken':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken = F2(
	function (closeToken, openToken) {
		var _v0 = openToken.meaning;
		if (_v0.$ === 'EmphasisToken') {
			var openChar = _v0.a;
			var open = _v0.b;
			var _v1 = closeToken.meaning;
			if (_v1.$ === 'EmphasisToken') {
				var closeChar = _v1.a;
				var close = _v1.b;
				return _Utils_eq(openChar, closeChar) ? ((_Utils_eq(open.leftFringeRank, open.rightFringeRank) || _Utils_eq(close.leftFringeRank, close.rightFringeRank)) ? ((!(!A2($elm$core$Basics$modBy, 3, closeToken.length + openToken.length))) || ((!A2($elm$core$Basics$modBy, 3, closeToken.length)) && (!A2($elm$core$Basics$modBy, 3, openToken.length)))) : true) : false;
			} else {
				return false;
			}
		} else {
			return false;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isStrikethroughTokenPair = F2(
	function (closeToken, openToken) {
		var _v0 = function () {
			var _v1 = openToken.meaning;
			if (_v1.$ === 'StrikethroughToken') {
				if (_v1.a.$ === 'Escaped') {
					var _v2 = _v1.a;
					return _Utils_Tuple2(true, openToken.length - 1);
				} else {
					var _v3 = _v1.a;
					return _Utils_Tuple2(true, openToken.length);
				}
			} else {
				return _Utils_Tuple2(false, 0);
			}
		}();
		var openTokenIsStrikethrough = _v0.a;
		var openTokenLength = _v0.b;
		var _v4 = function () {
			var _v5 = closeToken.meaning;
			if (_v5.$ === 'StrikethroughToken') {
				if (_v5.a.$ === 'Escaped') {
					var _v6 = _v5.a;
					return _Utils_Tuple2(true, closeToken.length - 1);
				} else {
					var _v7 = _v5.a;
					return _Utils_Tuple2(true, closeToken.length);
				}
			} else {
				return _Utils_Tuple2(false, 0);
			}
		}();
		var closeTokenIsStrikethrough = _v4.a;
		var closeTokenLength = _v4.b;
		return closeTokenIsStrikethrough && (openTokenIsStrikethrough && _Utils_eq(closeTokenLength, openTokenLength));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakType = {$: 'HardLineBreakType'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch = F2(
	function (token, type_) {
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{end: token.index + token.length, matches: _List_Nil, start: token.index, text: '', textEnd: 0, textStart: 0, type_: type_});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$lineBreakTTM = F5(
	function (remaining, tokens, matches, refs, rawText) {
		lineBreakTTM:
		while (true) {
			if (!remaining.b) {
				return matches;
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v1 = token.meaning;
				if (_v1.$ === 'HardLineBreakToken') {
					var $temp$remaining = tokensTail,
						$temp$tokens = tokens,
						$temp$matches = A2(
						$elm$core$List$cons,
						A2($dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch, token, $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakType),
						matches),
						$temp$refs = refs,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					refs = $temp$refs;
					rawText = $temp$rawText;
					continue lineBreakTTM;
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$refs = refs,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					refs = $temp$refs;
					rawText = $temp$rawText;
					continue lineBreakTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens = F2(
	function (_v0, tokensTail) {
		var match = _v0.a;
		return A2(
			$elm$core$List$filter,
			function (token) {
				return _Utils_cmp(token.index, match.end) > -1;
			},
			tokensTail);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketsToMatch = F6(
	function (closeToken, escaped, matches, references, rawText, _v46) {
		var openToken = _v46.a;
		var remainTokens = _v46.c;
		var result = A2(
			$dillonkearns$elm_markdown$Markdown$Helpers$ifError,
			$dillonkearns$elm_markdown$Markdown$InlineParser$emailAutolinkTypeToMatch,
			$dillonkearns$elm_markdown$Markdown$InlineParser$autolinkToMatch(
				A7(
					$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
					references,
					rawText,
					function (s) {
						return s;
					},
					$dillonkearns$elm_markdown$Markdown$InlineParser$CodeType,
					openToken,
					closeToken,
					_List_Nil)));
		if (result.$ === 'Err') {
			var tempMatch = result.a;
			if (escaped.$ === 'NotEscaped') {
				var _v49 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$htmlToToken, rawText, tempMatch);
				if (_v49.$ === 'Just') {
					var newToken = _v49.a;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A2($elm$core$List$cons, newToken, remainTokens),
							matches));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			var newMatch = result.a;
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(
					remainTokens,
					A2($elm$core$List$cons, newMatch, matches)));
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		codeAutolinkTypeHtmlTagTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$htmlElementTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v38 = token.meaning;
				switch (_v38.$) {
					case 'CodeToken':
						var isEscaped = _v38.a;
						var _v39 = A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
							$dillonkearns$elm_markdown$Markdown$InlineParser$isCodeTokenPair(token),
							tokens);
						if (_v39.$ === 'Just') {
							var code = _v39.a;
							var _v40 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$codeToMatch, token, matches, references, rawText, code);
							var newTokens = _v40.a;
							var newMatches = _v40.b;
							var $temp$remaining = tokensTail,
								$temp$tokens = newTokens,
								$temp$matches = newMatches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2($elm$core$List$cons, token, tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						}
					case 'AngleBracketClose':
						var isEscaped = _v38.a;
						var isAngleBracketOpen = function (_v45) {
							var meaning = _v45.meaning;
							if (meaning.$ === 'AngleBracketOpen') {
								return true;
							} else {
								return false;
							}
						};
						var _v41 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken, isAngleBracketOpen, tokens);
						if (_v41.$ === 'Just') {
							var found = _v41.a;
							var _v42 = A6($dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketsToMatch, token, isEscaped, matches, references, rawText, found);
							if (_v42.$ === 'Just') {
								var _v43 = _v42.a;
								var newTokens = _v43.a;
								var newMatches = _v43.b;
								var $temp$remaining = tokensTail,
									$temp$tokens = A2(
									$elm$core$List$filter,
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
									newTokens),
									$temp$matches = newMatches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue codeAutolinkTypeHtmlTagTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = A2(
									$elm$core$List$filter,
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
									tokens),
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue codeAutolinkTypeHtmlTagTTM;
							}
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2(
								$elm$core$List$filter,
								A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
								tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						}
					default:
						var $temp$remaining = tokensTail,
							$temp$tokens = A2($elm$core$List$cons, token, tokens),
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue codeAutolinkTypeHtmlTagTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$codeToMatch = F5(
	function (closeToken, matches, references, rawText, _v34) {
		var openToken = _v34.a;
		var remainTokens = _v34.c;
		var updatedOpenToken = function () {
			var _v35 = openToken.meaning;
			if ((_v35.$ === 'CodeToken') && (_v35.a.$ === 'Escaped')) {
				var _v36 = _v35.a;
				return _Utils_update(
					openToken,
					{index: openToken.index + 1, length: openToken.length - 1});
			} else {
				return openToken;
			}
		}();
		var match = A7($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch, references, rawText, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $dillonkearns$elm_markdown$Markdown$InlineParser$CodeType, updatedOpenToken, closeToken, _List_Nil);
		return _Utils_Tuple2(
			remainTokens,
			A2($elm$core$List$cons, match, matches));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		emphasisTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v29 = token.meaning;
				if (_v29.$ === 'EmphasisToken') {
					var _char = _v29.a;
					var leftFringeRank = _v29.b.leftFringeRank;
					var rightFringeRank = _v29.b.rightFringeRank;
					if (_Utils_eq(leftFringeRank, rightFringeRank)) {
						if ((!(!rightFringeRank)) && ((!_Utils_eq(
							_char,
							_Utils_chr('_'))) || (rightFringeRank === 1))) {
							var _v30 = A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
								$dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken(token),
								tokens);
							if (_v30.$ === 'Just') {
								var found = _v30.a;
								var _v31 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch, references, rawText, token, tokensTail, found);
								var newRemaining = _v31.a;
								var match = _v31.b;
								var newTokens = _v31.c;
								var $temp$remaining = newRemaining,
									$temp$tokens = newTokens,
									$temp$matches = A2($elm$core$List$cons, match, matches),
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = A2($elm$core$List$cons, token, tokens),
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							}
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = tokens,
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue emphasisTTM;
						}
					} else {
						if (_Utils_cmp(leftFringeRank, rightFringeRank) < 0) {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2($elm$core$List$cons, token, tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue emphasisTTM;
						} else {
							var _v32 = A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
								$dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken(token),
								tokens);
							if (_v32.$ === 'Just') {
								var found = _v32.a;
								var _v33 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch, references, rawText, token, tokensTail, found);
								var newRemaining = _v33.a;
								var match = _v33.b;
								var newTokens = _v33.c;
								var $temp$remaining = newRemaining,
									$temp$tokens = newTokens,
									$temp$matches = A2($elm$core$List$cons, match, matches),
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = tokens,
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							}
						}
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue emphasisTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch = F5(
	function (references, rawText, closeToken, tokensTail, _v27) {
		var openToken = _v27.a;
		var innerTokens = _v27.b;
		var remainTokens = _v27.c;
		var remainLength = openToken.length - closeToken.length;
		var updt = (!remainLength) ? {closeToken: closeToken, openToken: openToken, remainTokens: remainTokens, tokensTail: tokensTail} : ((remainLength > 0) ? {
			closeToken: closeToken,
			openToken: _Utils_update(
				openToken,
				{index: openToken.index + remainLength, length: closeToken.length}),
			remainTokens: A2(
				$elm$core$List$cons,
				_Utils_update(
					openToken,
					{length: remainLength}),
				remainTokens),
			tokensTail: tokensTail
		} : {
			closeToken: _Utils_update(
				closeToken,
				{length: openToken.length}),
			openToken: openToken,
			remainTokens: remainTokens,
			tokensTail: A2(
				$elm$core$List$cons,
				_Utils_update(
					closeToken,
					{index: closeToken.index + openToken.length, length: -remainLength}),
				tokensTail)
		});
		var match = A7(
			$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
			references,
			rawText,
			function (s) {
				return s;
			},
			$dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisType(updt.openToken.length),
			updt.openToken,
			updt.closeToken,
			$elm$core$List$reverse(innerTokens));
		return _Utils_Tuple3(updt.tokensTail, match, updt.remainTokens);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$htmlElementTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		htmlElementTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$linkImageTypeTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v23 = token.meaning;
				if (_v23.$ === 'HtmlToken') {
					var isOpen = _v23.a;
					var htmlModel = _v23.b;
					if (isOpen.$ === 'NotOpening') {
						var $temp$remaining = tokensTail,
							$temp$tokens = tokens,
							$temp$matches = A2(
							$elm$core$List$cons,
							A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch,
								token,
								$dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType(htmlModel)),
							matches),
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue htmlElementTTM;
					} else {
						var _v25 = A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
							$dillonkearns$elm_markdown$Markdown$InlineParser$isCloseToken(htmlModel),
							tokensTail);
						if (_v25.$ === 'Nothing') {
							var $temp$remaining = tokensTail,
								$temp$tokens = tokens,
								$temp$matches = A2(
								$elm$core$List$cons,
								A2(
									$dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch,
									token,
									$dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType(htmlModel)),
								matches),
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue htmlElementTTM;
						} else {
							var _v26 = _v25.a;
							var closeToken = _v26.a;
							var innerTokens = _v26.b;
							var newTail = _v26.c;
							var newMatch = A7(
								$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
								references,
								rawText,
								function (s) {
									return s;
								},
								$dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType(htmlModel),
								token,
								closeToken,
								innerTokens);
							var $temp$remaining = newTail,
								$temp$tokens = tokens,
								$temp$matches = A2($elm$core$List$cons, newMatch, matches),
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue htmlElementTTM;
						}
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue htmlElementTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageTypeTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		linkImageTypeTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$emphasisTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v18 = token.meaning;
				if (_v18.$ === 'SquareBracketClose') {
					var _v19 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken, $dillonkearns$elm_markdown$Markdown$InlineParser$isLinkTypeOrImageOpenToken, tokens);
					if (_v19.$ === 'Just') {
						var found = _v19.a;
						var _v20 = A6($dillonkearns$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch, token, tokensTail, matches, references, rawText, found);
						if (_v20.$ === 'Just') {
							var _v21 = _v20.a;
							var x = _v21.a;
							var newMatches = _v21.b;
							var newTokens = _v21.c;
							var $temp$remaining = x,
								$temp$tokens = newTokens,
								$temp$matches = newMatches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue linkImageTypeTTM;
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = tokens,
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue linkImageTypeTTM;
						}
					} else {
						var $temp$remaining = tokensTail,
							$temp$tokens = tokens,
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue linkImageTypeTTM;
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue linkImageTypeTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch = F6(
	function (closeToken, tokensTail, oldMatches, references, rawText, _v8) {
		var openToken = _v8.a;
		var innerTokens = _v8.b;
		var remainTokens = _v8.c;
		var removeOpenToken = _Utils_Tuple3(
			tokensTail,
			oldMatches,
			_Utils_ap(innerTokens, remainTokens));
		var remainText = A2($elm$core$String$dropLeft, closeToken.index + 1, rawText);
		var inactivateLinkOpenToken = function (token) {
			var _v16 = token.meaning;
			if (_v16.$ === 'LinkOpenToken') {
				return _Utils_update(
					token,
					{
						meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken($dillonkearns$elm_markdown$Markdown$InlineParser$Inactive)
					});
			} else {
				return token;
			}
		};
		var findTempMatch = function (isLinkType) {
			return A7(
				$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
				references,
				rawText,
				function (s) {
					return s;
				},
				isLinkType ? $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType(
					_Utils_Tuple2('', $elm$core$Maybe$Nothing)) : $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType(
					_Utils_Tuple2('', $elm$core$Maybe$Nothing)),
				openToken,
				closeToken,
				$elm$core$List$reverse(innerTokens));
		};
		var _v9 = openToken.meaning;
		switch (_v9.$) {
			case 'ImageOpenToken':
				var tempMatch = findTempMatch(false);
				var _v10 = A3($dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType, remainText, tempMatch, references);
				if (_v10.$ === 'Nothing') {
					return $elm$core$Maybe$Just(removeOpenToken);
				} else {
					var match = _v10.a;
					var _v11 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping, match, oldMatches);
					if (_v11.$ === 'Just') {
						var matches = _v11.a;
						return $elm$core$Maybe$Just(
							_Utils_Tuple3(
								A2($dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens, match, tokensTail),
								matches,
								remainTokens));
					} else {
						return $elm$core$Maybe$Just(removeOpenToken);
					}
				}
			case 'LinkOpenToken':
				if (_v9.a.$ === 'Active') {
					var _v12 = _v9.a;
					var tempMatch = findTempMatch(true);
					var _v13 = A3($dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType, remainText, tempMatch, references);
					if (_v13.$ === 'Nothing') {
						return $elm$core$Maybe$Just(removeOpenToken);
					} else {
						var match = _v13.a;
						var _v14 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping, match, oldMatches);
						if (_v14.$ === 'Just') {
							var matches = _v14.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple3(
									A2($dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens, match, tokensTail),
									matches,
									A2($elm$core$List$map, inactivateLinkOpenToken, remainTokens)));
						} else {
							return $elm$core$Maybe$Just(removeOpenToken);
						}
					}
				} else {
					var _v15 = _v9.a;
					return $elm$core$Maybe$Just(removeOpenToken);
				}
			default:
				return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		strikethroughTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$lineBreakTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v5 = token.meaning;
				if (_v5.$ === 'StrikethroughToken') {
					var isEscaped = _v5.a;
					var _v6 = A2(
						$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
						$dillonkearns$elm_markdown$Markdown$InlineParser$isStrikethroughTokenPair(token),
						tokens);
					if (_v6.$ === 'Just') {
						var content = _v6.a;
						var _v7 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughToMatch, token, matches, references, rawText, content);
						var newTokens = _v7.a;
						var newMatches = _v7.b;
						var $temp$remaining = tokensTail,
							$temp$tokens = newTokens,
							$temp$matches = newMatches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue strikethroughTTM;
					} else {
						var $temp$remaining = tokensTail,
							$temp$tokens = A2($elm$core$List$cons, token, tokens),
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue strikethroughTTM;
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue strikethroughTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughToMatch = F5(
	function (closeToken, matches, references, rawText, _v1) {
		var openToken = _v1.a;
		var remainTokens = _v1.c;
		var updatedOpenToken = function () {
			var _v2 = openToken.meaning;
			if ((_v2.$ === 'StrikethroughToken') && (_v2.a.$ === 'Escaped')) {
				var _v3 = _v2.a;
				return _Utils_update(
					openToken,
					{index: openToken.index + 1, length: openToken.length - 1});
			} else {
				return openToken;
			}
		}();
		var match = A7($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch, references, rawText, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughType, updatedOpenToken, closeToken, _List_Nil);
		return _Utils_Tuple2(
			remainTokens,
			A2($elm$core$List$cons, match, matches));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch = F7(
	function (references, rawText, processText, type_, openToken, closeToken, innerTokens) {
		var textStart = openToken.index + openToken.length;
		var textEnd = closeToken.index;
		var text = processText(
			A3($elm$core$String$slice, textStart, textEnd, rawText));
		var start = openToken.index;
		var end = closeToken.index + closeToken.length;
		var match = {end: end, matches: _List_Nil, start: start, text: text, textEnd: textEnd, textStart: textStart, type_: type_};
		var matches = A2(
			$elm$core$List$map,
			function (_v0) {
				var matchModel = _v0.a;
				return A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch, match, matchModel);
			},
			A4($dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches, innerTokens, _List_Nil, references, rawText));
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{end: end, matches: matches, start: start, text: text, textEnd: textEnd, textStart: textStart, type_: type_});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches = F4(
	function (tokens, matches, references, rawText) {
		return A5($dillonkearns$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM, tokens, _List_Nil, matches, references, rawText);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$parse = F2(
	function (refs, rawText_) {
		var rawText = $elm$core$String$trim(rawText_);
		var tokens = $dillonkearns$elm_markdown$Markdown$InlineParser$tokenize(rawText);
		return $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(
			A3(
				$dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches,
				rawText,
				_List_Nil,
				$dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches(
					A4($dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches, tokens, _List_Nil, refs, rawText))));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$thisIsDefinitelyNotAnHtmlTag = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$token(
			A2(
				$elm$parser$Parser$Advanced$Token,
				' ',
				$elm$parser$Parser$Expecting(' '))),
			$elm$parser$Parser$Advanced$token(
			A2(
				$elm$parser$Parser$Advanced$Token,
				'>',
				$elm$parser$Parser$Expecting('>'))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$chompIf,
					$elm$core$Char$isAlpha,
					$elm$parser$Parser$Expecting('Alpha')),
				$elm$parser$Parser$Advanced$chompWhile(
					function (c) {
						return $elm$core$Char$isAlphaNum(c) || _Utils_eq(
							c,
							_Utils_chr('-'));
					})),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							':',
							$elm$parser$Parser$Expecting(':'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'@',
							$elm$parser$Parser$Expecting('@'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'\\',
							$elm$parser$Parser$Expecting('\\'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'+',
							$elm$parser$Parser$Expecting('+'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'.',
							$elm$parser$Parser$Expecting('.')))
					])))
		]));
var $dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock = $elm$parser$Parser$Advanced$backtrackable(
	A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (rawLine, _v0) {
				return $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(rawLine));
			}),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'<',
							$elm$parser$Parser$Expecting('<'))),
					$dillonkearns$elm_markdown$Markdown$Parser$thisIsDefinitelyNotAnHtmlTag),
				$dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
			$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)));
var $dillonkearns$elm_markdown$Markdown$Table$TableHeader = function (a) {
	return {$: 'TableHeader', a: a};
};
var $dillonkearns$elm_markdown$Parser$Token$parseString = function (str) {
	return $elm$parser$Parser$Advanced$token(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$Expecting(str)));
};
var $dillonkearns$elm_markdown$Markdown$TableParser$parseCellHelper = function (_v0) {
	var curr = _v0.a;
	var acc = _v0.b;
	var _return = A2(
		$elm$core$Maybe$withDefault,
		$elm$parser$Parser$Advanced$Done(acc),
		A2(
			$elm$core$Maybe$map,
			function (cell) {
				return $elm$parser$Parser$Advanced$Done(
					A2($elm$core$List$cons, cell, acc));
			},
			curr));
	var finishCell = A2(
		$elm$core$Maybe$withDefault,
		$elm$parser$Parser$Advanced$Loop(
			_Utils_Tuple2($elm$core$Maybe$Nothing, acc)),
		A2(
			$elm$core$Maybe$map,
			function (cell) {
				return $elm$parser$Parser$Advanced$Loop(
					_Utils_Tuple2(
						$elm$core$Maybe$Nothing,
						A2($elm$core$List$cons, cell, acc)));
			},
			curr));
	var addToCurrent = function (c) {
		return _Utils_ap(
			A2($elm$core$Maybe$withDefault, '', curr),
			c);
	};
	var continueCell = function (c) {
		return $elm$parser$Parser$Advanced$Loop(
			_Utils_Tuple2(
				$elm$core$Maybe$Just(
					addToCurrent(c)),
				acc));
	};
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v1) {
					return _return;
				},
				$dillonkearns$elm_markdown$Parser$Token$parseString('|\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return _return;
				},
				$dillonkearns$elm_markdown$Parser$Token$parseString('\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v3) {
					return _return;
				},
				$elm$parser$Parser$Advanced$end(
					$elm$parser$Parser$Expecting('end'))),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('|'))),
				$dillonkearns$elm_markdown$Parser$Token$parseString('\\\\|')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('\\'))),
				$dillonkearns$elm_markdown$Parser$Token$parseString('\\\\')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('|'))),
				$dillonkearns$elm_markdown$Parser$Token$parseString('\\|')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(finishCell)),
				$dillonkearns$elm_markdown$Parser$Token$parseString('|')),
				A2(
				$elm$parser$Parser$Advanced$mapChompedString,
				F2(
					function (_char, _v4) {
						return continueCell(_char);
					}),
				A2(
					$elm$parser$Parser$Advanced$chompIf,
					$elm$core$Basics$always(true),
					$elm$parser$Parser$Problem('No character found')))
			]));
};
var $dillonkearns$elm_markdown$Markdown$TableParser$parseCells = A2(
	$elm$parser$Parser$Advanced$map,
	A2(
		$elm$core$List$foldl,
		F2(
			function (cell, acc) {
				return A2(
					$elm$core$List$cons,
					$elm$core$String$trim(cell),
					acc);
			}),
		_List_Nil),
	A2(
		$elm$parser$Parser$Advanced$loop,
		_Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil),
		$dillonkearns$elm_markdown$Markdown$TableParser$parseCellHelper));
var $dillonkearns$elm_markdown$Markdown$TableParser$rowParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$dillonkearns$elm_markdown$Parser$Token$parseString('|'),
					$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
				]))),
	$dillonkearns$elm_markdown$Markdown$TableParser$parseCells);
var $dillonkearns$elm_markdown$Markdown$TableParser$parseHeader = F2(
	function (_v0, headersRow) {
		var columnAlignments = _v0.b;
		var headersWithAlignment = function (headers) {
			return A3(
				$elm$core$List$map2,
				F2(
					function (headerCell, alignment) {
						return {alignment: alignment, label: headerCell};
					}),
				headers,
				columnAlignments);
		};
		var combineHeaderAndDelimiter = function (headers) {
			return _Utils_eq(
				$elm$core$List$length(headers),
				$elm$core$List$length(columnAlignments)) ? $elm$core$Result$Ok(
				$dillonkearns$elm_markdown$Markdown$Table$TableHeader(
					headersWithAlignment(headers))) : $elm$core$Result$Err(
				'Tables must have the same number of header columns (' + ($elm$core$String$fromInt(
					$elm$core$List$length(headers)) + (') as delimiter columns (' + ($elm$core$String$fromInt(
					$elm$core$List$length(columnAlignments)) + ')'))));
		};
		var _v1 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$TableParser$rowParser, headersRow);
		if (_v1.$ === 'Ok') {
			var headers = _v1.a;
			return combineHeaderAndDelimiter(headers);
		} else {
			return $elm$core$Result$Err('Unable to parse previous line as a table header');
		}
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$CodeBlock = F2(
	function (language, body) {
		return {body: body, language: language};
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$infoString = function (fenceCharacter) {
	var toInfoString = F2(
		function (str, _v2) {
			var _v1 = $elm$core$String$trim(str);
			if (_v1 === '') {
				return $elm$core$Maybe$Nothing;
			} else {
				var trimmed = _v1;
				return $elm$core$Maybe$Just(trimmed);
			}
		});
	var _v0 = fenceCharacter.kind;
	if (_v0.$ === 'Backtick') {
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			toInfoString,
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return (!_Utils_eq(
						c,
						_Utils_chr('`'))) && (!$dillonkearns$elm_markdown$Whitespace$isLineEnd(c));
				}));
	} else {
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			toInfoString,
			$elm$parser$Parser$Advanced$chompWhile(
				A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isLineEnd)));
	}
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$Backtick = {$: 'Backtick'};
var $dillonkearns$elm_markdown$Parser$Token$backtick = A2(
	$elm$parser$Parser$Advanced$Token,
	'`',
	$elm$parser$Parser$Expecting('a \'`\''));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$backtick = {
	_char: _Utils_chr('`'),
	kind: $dillonkearns$elm_markdown$Markdown$CodeBlock$Backtick,
	token: $dillonkearns$elm_markdown$Parser$Token$backtick
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$colToIndentation = function (_int) {
	switch (_int) {
		case 1:
			return $elm$parser$Parser$Advanced$succeed(0);
		case 2:
			return $elm$parser$Parser$Advanced$succeed(1);
		case 3:
			return $elm$parser$Parser$Advanced$succeed(2);
		case 4:
			return $elm$parser$Parser$Advanced$succeed(3);
		default:
			return $elm$parser$Parser$Advanced$problem(
				$elm$parser$Parser$Expecting('Fenced code blocks should be indented no more than 3 spaces'));
	}
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast = F2(
	function (minLength, fenceCharacter) {
		var builtTokens = A3(
			$elm$core$List$foldl,
			F2(
				function (t, p) {
					return A2($elm$parser$Parser$Advanced$ignorer, p, t);
				}),
			$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
			A2(
				$elm$core$List$repeat,
				minLength,
				$elm$parser$Parser$Advanced$token(fenceCharacter.token)));
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			F2(
				function (str, _v0) {
					return _Utils_Tuple2(
						fenceCharacter,
						$elm$core$String$length(str));
				}),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				builtTokens,
				$elm$parser$Parser$Advanced$chompWhile(
					$elm$core$Basics$eq(fenceCharacter._char))));
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$Tilde = {$: 'Tilde'};
var $dillonkearns$elm_markdown$Parser$Token$tilde = A2(
	$elm$parser$Parser$Advanced$Token,
	'~',
	$elm$parser$Parser$Expecting('a `~`'));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$tilde = {
	_char: _Utils_chr('~'),
	kind: $dillonkearns$elm_markdown$Markdown$CodeBlock$Tilde,
	token: $dillonkearns$elm_markdown$Parser$Token$tilde
};
var $dillonkearns$elm_markdown$Whitespace$upToThreeSpaces = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$dillonkearns$elm_markdown$Whitespace$space,
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$dillonkearns$elm_markdown$Whitespace$space,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						]))),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$dillonkearns$elm_markdown$Whitespace$space,
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
					]))),
			$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
		]));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$openingFence = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (indent, _v0) {
						var character = _v0.a;
						var length = _v0.b;
						return {character: character, indented: indent, length: length};
					})),
			$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
		A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$CodeBlock$colToIndentation, $elm$parser$Parser$Advanced$getCol)),
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, 3, $dillonkearns$elm_markdown$Markdown$CodeBlock$backtick),
				A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, 3, $dillonkearns$elm_markdown$Markdown$CodeBlock$tilde)
			])));
var $dillonkearns$elm_markdown$Whitespace$isSpace = $elm$core$Basics$eq(
	_Utils_chr(' '));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$closingFence = F2(
	function (minLength, fenceCharacter) {
		return A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
						$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
					A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, minLength, fenceCharacter)),
				$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpace)),
			$dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$codeBlockLine = function (indented) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			A2($dillonkearns$elm_markdown$Parser$Extra$upTo, indented, $dillonkearns$elm_markdown$Whitespace$space)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getOffset, $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
			$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
};
var $elm$parser$Parser$Advanced$getSource = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.src, s);
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlockHelp = function (_v0) {
	var fence = _v0.a;
	var body = _v0.b;
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$elm$parser$Parser$Advanced$Done(body)),
				$elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd)),
				A2(
				$elm$parser$Parser$Advanced$mapChompedString,
				F2(
					function (lineEnd, _v1) {
						return $elm$parser$Parser$Advanced$Loop(
							_Utils_Tuple2(
								fence,
								_Utils_ap(body, lineEnd)));
					}),
				$dillonkearns$elm_markdown$Whitespace$lineEnd),
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						$elm$parser$Parser$Advanced$Done(body)),
					A2($dillonkearns$elm_markdown$Markdown$CodeBlock$closingFence, fence.length, fence.character))),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						$elm$parser$Parser$Advanced$succeed(
							F3(
								function (start, end, source) {
									return $elm$parser$Parser$Advanced$Loop(
										_Utils_Tuple2(
											fence,
											_Utils_ap(
												body,
												A3($elm$core$String$slice, start, end, source))));
								})),
						$dillonkearns$elm_markdown$Markdown$CodeBlock$codeBlockLine(fence.indented)),
					$elm$parser$Parser$Advanced$getOffset),
				$elm$parser$Parser$Advanced$getSource)
			]));
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlock = function (fence) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_Utils_Tuple2(fence, ''),
		$dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlockHelp);
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$parser = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (fence) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$CodeBlock$CodeBlock),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$dillonkearns$elm_markdown$Markdown$CodeBlock$infoString(fence.character),
					$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)),
			$dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlock(fence));
	},
	$dillonkearns$elm_markdown$Markdown$CodeBlock$openingFence);
var $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes = function (headingString) {
	return A2($elm$core$String$endsWith, '#', headingString) ? $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes(
		A2($elm$core$String$dropRight, 1, headingString)) : headingString;
};
var $elm$core$String$trimRight = _String_trimRight;
var $dillonkearns$elm_markdown$Markdown$Heading$dropClosingSequence = function (headingString) {
	var droppedTrailingHashesString = $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes(headingString);
	return (A2($elm$core$String$endsWith, ' ', droppedTrailingHashesString) || $elm$core$String$isEmpty(droppedTrailingHashesString)) ? $elm$core$String$trimRight(droppedTrailingHashesString) : headingString;
};
var $dillonkearns$elm_markdown$Parser$Token$hash = A2(
	$elm$parser$Parser$Advanced$Token,
	'#',
	$elm$parser$Parser$Expecting('a `#`'));
var $dillonkearns$elm_markdown$Markdown$Heading$isHash = function (c) {
	if ('#' === c.valueOf()) {
		return true;
	} else {
		return false;
	}
};
var $elm$parser$Parser$Advanced$spaces = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return _Utils_eq(
			c,
			_Utils_chr(' ')) || (_Utils_eq(
			c,
			_Utils_chr('\n')) || _Utils_eq(
			c,
			_Utils_chr('\r')));
	});
var $dillonkearns$elm_markdown$Markdown$Heading$parser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Heading),
				A2(
					$elm$parser$Parser$Advanced$andThen,
					function (startingSpaces) {
						var startSpace = $elm$core$String$length(startingSpaces);
						return (startSpace >= 4) ? $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Expecting('heading with < 4 spaces in front')) : $elm$parser$Parser$Advanced$succeed(startSpace);
					},
					$elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$spaces))),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$hash)),
		A2(
			$elm$parser$Parser$Advanced$andThen,
			function (additionalHashes) {
				var level = $elm$core$String$length(additionalHashes) + 1;
				return (level >= 7) ? $elm$parser$Parser$Advanced$problem(
					$elm$parser$Parser$Expecting('heading with < 7 #\'s')) : $elm$parser$Parser$Advanced$succeed(level);
			},
			$elm$parser$Parser$Advanced$getChompedString(
				$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Markdown$Heading$isHash)))),
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines('')),
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$newline)),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space),
								$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$tab)
							]))),
				A2(
					$elm$parser$Parser$Advanced$mapChompedString,
					F2(
						function (headingText, _v0) {
							return $dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(
								$dillonkearns$elm_markdown$Markdown$Heading$dropClosingSequence(
									$elm$core$String$trim(headingText)));
						}),
					$dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd))
			])));
var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var $elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.context)) : A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, newOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $dillonkearns$elm_markdown$Parser$Token$greaterThan = A2(
	$elm$parser$Parser$Advanced$Token,
	'>',
	$elm$parser$Parser$Expecting('a `>`'));
var $elm$parser$Parser$Advanced$Located = F3(
	function (row, col, context) {
		return {col: col, context: context, row: row};
	});
var $elm$parser$Parser$Advanced$changeContext = F2(
	function (newContext, s) {
		return {col: s.col, context: newContext, indent: s.indent, offset: s.offset, row: s.row, src: s.src};
	});
var $elm$parser$Parser$Advanced$inContext = F2(
	function (context, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(
					A2(
						$elm$parser$Parser$Advanced$changeContext,
						A2(
							$elm$core$List$cons,
							A3($elm$parser$Parser$Advanced$Located, s0.row, s0.col, context),
							s0.context),
						s0));
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						a,
						A2($elm$parser$Parser$Advanced$changeContext, s0.context, s1));
				} else {
					var step = _v1;
					return step;
				}
			});
	});
var $dillonkearns$elm_markdown$Whitespace$isWhitespace = function (_char) {
	switch (_char.valueOf()) {
		case ' ':
			return true;
		case '\n':
			return true;
		case '\t':
			return true;
		case '\u000B':
			return true;
		case '\u000C':
			return true;
		case '\r':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Parser$Token$lessThan = A2(
	$elm$parser$Parser$Advanced$Token,
	'<',
	$elm$parser$Parser$Expecting('a `<`'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$destinationParser = A2(
	$elm$parser$Parser$Advanced$inContext,
	'link destination',
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$url$Url$percentEncode),
					$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$lessThan)),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$greaterThan)),
					$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$greaterThan))),
				$elm$parser$Parser$Advanced$getChompedString(
				$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore(
					A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isWhitespace)))
			])));
var $dillonkearns$elm_markdown$Parser$Token$closingSquareBracket = A2(
	$elm$parser$Parser$Advanced$Token,
	']',
	$elm$parser$Parser$Expecting('a `]`'));
var $dillonkearns$elm_markdown$Parser$Token$openingSquareBracket = A2(
	$elm$parser$Parser$Advanced$Token,
	'[',
	$elm$parser$Parser$Expecting('a `[`'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$labelParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel),
		$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$openingSquareBracket)),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$closingSquareBracket)),
		$elm$parser$Parser$Advanced$symbol(
			A2(
				$elm$parser$Parser$Advanced$Token,
				']:',
				$elm$parser$Parser$Expecting(']:')))));
var $dillonkearns$elm_markdown$Parser$Token$doubleQuote = A2(
	$elm$parser$Parser$Advanced$Token,
	'\"',
	$elm$parser$Parser$Expecting('a double quote'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine = function (str) {
	return A2($elm$core$String$contains, '\n\n', str) ? $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Expecting('no blank line')) : $elm$parser$Parser$Advanced$succeed(str);
};
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$chompWhile(
		function (c) {
			return (!$dillonkearns$elm_markdown$Whitespace$isLineEnd(c)) && $dillonkearns$elm_markdown$Whitespace$isWhitespace(c);
		}),
	$dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
var $dillonkearns$elm_markdown$Whitespace$requiredWhitespace = A2(
	$elm$parser$Parser$Advanced$ignorer,
	A2(
		$elm$parser$Parser$Advanced$chompIf,
		$dillonkearns$elm_markdown$Whitespace$isWhitespace,
		$elm$parser$Parser$Expecting('Required whitespace')),
	$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isWhitespace));
var $dillonkearns$elm_markdown$Parser$Token$singleQuote = A2(
	$elm$parser$Parser$Advanced$Token,
	'\'',
	$elm$parser$Parser$Expecting('a single quote'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$titleParser = function () {
	var inSingleQuotes = A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Just),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$singleQuote)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$singleQuote))),
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$singleQuote)),
			$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline));
	var inDoubleQuotes = A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Just),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$doubleQuote)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$doubleQuote))),
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$doubleQuote)),
			$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline));
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		'title',
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$backtrackable(
					A2(
						$elm$parser$Parser$Advanced$keeper,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
							$dillonkearns$elm_markdown$Whitespace$requiredWhitespace),
						$elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									inDoubleQuotes,
									inSingleQuotes,
									$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing)
								])))),
					A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing),
					$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline)
				])));
}();
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$parser = A2(
	$elm$parser$Parser$Advanced$inContext,
	'link reference definition',
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (label, destination, title) {
								return _Utils_Tuple2(
									label,
									{destination: destination, title: title});
							})),
					$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$labelParser,
							$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
						$elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									$dillonkearns$elm_markdown$Whitespace$lineEnd,
									$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
								]))),
					$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))),
			$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$destinationParser),
		$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$titleParser));
var $dillonkearns$elm_markdown$ThematicBreak$ThematicBreak = {$: 'ThematicBreak'};
var $dillonkearns$elm_markdown$ThematicBreak$whitespace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab);
var $dillonkearns$elm_markdown$ThematicBreak$withChar = function (tchar) {
	var token = $dillonkearns$elm_markdown$Parser$Token$parseString(
		$elm$core$String$fromChar(tchar));
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$ThematicBreak$ThematicBreak),
								token),
							$dillonkearns$elm_markdown$ThematicBreak$whitespace),
						token),
					$dillonkearns$elm_markdown$ThematicBreak$whitespace),
				token),
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return _Utils_eq(c, tchar) || $dillonkearns$elm_markdown$Whitespace$isSpaceOrTab(c);
				})),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
};
var $dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$dillonkearns$elm_markdown$ThematicBreak$withChar(
			_Utils_chr('-')),
			$dillonkearns$elm_markdown$ThematicBreak$withChar(
			_Utils_chr('*')),
			$dillonkearns$elm_markdown$ThematicBreak$withChar(
			_Utils_chr('_'))
		]));
var $dillonkearns$elm_markdown$ThematicBreak$parser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$dillonkearns$elm_markdown$Whitespace$space),
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								$dillonkearns$elm_markdown$Whitespace$space,
								$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
							]))),
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$dillonkearns$elm_markdown$Whitespace$space,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						]))),
			$dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak),
			$dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak
		]));
var $dillonkearns$elm_markdown$Markdown$RawBlock$LevelOne = {$: 'LevelOne'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$LevelTwo = {$: 'LevelTwo'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$SetextLine = F2(
	function (a, b) {
		return {$: 'SetextLine', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Parser$Token$equals = A2(
	$elm$parser$Parser$Advanced$Token,
	'=',
	$elm$parser$Parser$Expecting('a `=`'));
var $dillonkearns$elm_markdown$Parser$Token$minus = A2(
	$elm$parser$Parser$Advanced$Token,
	'-',
	$elm$parser$Parser$Expecting('a `-`'));
var $dillonkearns$elm_markdown$Markdown$Parser$setextLineParser = function () {
	var setextLevel = F3(
		function (level, levelToken, levelChar) {
			return A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(level),
					$elm$parser$Parser$Advanced$token(levelToken)),
				$elm$parser$Parser$Advanced$chompWhile(
					$elm$core$Basics$eq(levelChar)));
		});
	return A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (raw, level) {
				return A2($dillonkearns$elm_markdown$Markdown$RawBlock$SetextLine, level, raw);
			}),
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								A3(
								setextLevel,
								$dillonkearns$elm_markdown$Markdown$RawBlock$LevelOne,
								$dillonkearns$elm_markdown$Parser$Token$equals,
								_Utils_chr('=')),
								A3(
								setextLevel,
								$dillonkearns$elm_markdown$Markdown$RawBlock$LevelTwo,
								$dillonkearns$elm_markdown$Parser$Token$minus,
								_Utils_chr('-'))
							])),
					$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
				$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)));
}();
var $dillonkearns$elm_markdown$Markdown$RawBlock$TableDelimiter = function (a) {
	return {$: 'TableDelimiter', a: a};
};
var $dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab);
var $dillonkearns$elm_markdown$Parser$Extra$maybeChomp = function (condition) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$chompIf,
				condition,
				$elm$parser$Parser$Problem('Character not found')),
				$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
			]));
};
var $dillonkearns$elm_markdown$Markdown$TableParser$requirePipeIfNotFirst = function (columns) {
	return $elm$core$List$isEmpty(columns) ? $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Parser$Token$parseString('|'),
				$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
			])) : $dillonkearns$elm_markdown$Parser$Token$parseString('|');
};
var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowHelp = function (revDelimiterColumns) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
					},
					$dillonkearns$elm_markdown$Parser$Token$parseString('|\n'))),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v1) {
					return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
				},
				$dillonkearns$elm_markdown$Parser$Token$parseString('\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
				},
				$elm$parser$Parser$Advanced$end(
					$elm$parser$Parser$Expecting('end'))),
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							$elm$parser$Parser$Advanced$Done(revDelimiterColumns)),
						$dillonkearns$elm_markdown$Parser$Token$parseString('|')),
					$elm$parser$Parser$Advanced$end(
						$elm$parser$Parser$Expecting('end')))),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							function (column) {
								return $elm$parser$Parser$Advanced$Loop(
									A2($elm$core$List$cons, column, revDelimiterColumns));
							}),
						$dillonkearns$elm_markdown$Markdown$TableParser$requirePipeIfNotFirst(revDelimiterColumns)),
					$dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getChompedString(
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								A2(
									$elm$parser$Parser$Advanced$ignorer,
									$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
									$dillonkearns$elm_markdown$Parser$Extra$maybeChomp(
										function (c) {
											return _Utils_eq(
												c,
												_Utils_chr(':'));
										})),
								$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore(
									function (c) {
										return _Utils_eq(
											c,
											_Utils_chr('-'));
									})),
							$dillonkearns$elm_markdown$Parser$Extra$maybeChomp(
								function (c) {
									return _Utils_eq(
										c,
										_Utils_chr(':'));
								}))),
					$dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace))
			]));
};
var $dillonkearns$elm_markdown$Markdown$Block$AlignCenter = {$: 'AlignCenter'};
var $dillonkearns$elm_markdown$Markdown$Block$AlignLeft = {$: 'AlignLeft'};
var $dillonkearns$elm_markdown$Markdown$Block$AlignRight = {$: 'AlignRight'};
var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterToAlignment = function (cell) {
	var _v0 = _Utils_Tuple2(
		A2($elm$core$String$startsWith, ':', cell),
		A2($elm$core$String$endsWith, ':', cell));
	if (_v0.a) {
		if (_v0.b) {
			return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Block$AlignCenter);
		} else {
			return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Block$AlignLeft);
		}
	} else {
		if (_v0.b) {
			return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Block$AlignRight);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	}
};
var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowParser = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (delimiterRow) {
		var trimmed = delimiterRow.a.trimmed;
		var headers = delimiterRow.b;
		return $elm$core$List$isEmpty(headers) ? $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Expecting('Must have at least one column in delimiter row.')) : ((($elm$core$List$length(headers) === 1) && (!(A2($elm$core$String$startsWith, '|', trimmed) && A2($elm$core$String$endsWith, '|', trimmed)))) ? $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Tables with a single column must have pipes at the start and end of the delimiter row to avoid ambiguity.')) : $elm$parser$Parser$Advanced$succeed(delimiterRow));
	},
	A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (delimiterText, revDelimiterColumns) {
				return A2(
					$dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow,
					{
						raw: delimiterText,
						trimmed: $elm$core$String$trim(delimiterText)
					},
					A2(
						$elm$core$List$map,
						$dillonkearns$elm_markdown$Markdown$TableParser$delimiterToAlignment,
						$elm$core$List$reverse(revDelimiterColumns)));
			}),
		A2($elm$parser$Parser$Advanced$loop, _List_Nil, $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowHelp)));
var $dillonkearns$elm_markdown$Markdown$Parser$tableDelimiterInOpenParagraph = A2($elm$parser$Parser$Advanced$map, $dillonkearns$elm_markdown$Markdown$RawBlock$TableDelimiter, $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowParser);
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $dillonkearns$elm_markdown$Markdown$TableParser$standardizeRowLength = F2(
	function (expectedLength, row) {
		var rowLength = $elm$core$List$length(row);
		var _v0 = A2($elm$core$Basics$compare, expectedLength, rowLength);
		switch (_v0.$) {
			case 'LT':
				return A2($elm$core$List$take, expectedLength, row);
			case 'EQ':
				return row;
			default:
				return _Utils_ap(
					row,
					A2($elm$core$List$repeat, expectedLength - rowLength, ''));
		}
	});
var $dillonkearns$elm_markdown$Markdown$TableParser$bodyRowParser = function (expectedRowLength) {
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		function (row) {
			return ($elm$core$List$isEmpty(row) || A2($elm$core$List$all, $elm$core$String$isEmpty, row)) ? $elm$parser$Parser$Advanced$problem(
				$elm$parser$Parser$Problem('A line must have at least one column')) : $elm$parser$Parser$Advanced$succeed(
				A2($dillonkearns$elm_markdown$Markdown$TableParser$standardizeRowLength, expectedRowLength, row));
		},
		$dillonkearns$elm_markdown$Markdown$TableParser$rowParser);
};
var $dillonkearns$elm_markdown$Markdown$Parser$tableRowIfTableStarted = function (_v0) {
	var headers = _v0.a;
	var body = _v0.b;
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (row) {
			return $dillonkearns$elm_markdown$Markdown$RawBlock$Table(
				A2(
					$dillonkearns$elm_markdown$Markdown$Table$Table,
					headers,
					_Utils_ap(
						body,
						_List_fromArray(
							[row]))));
		},
		$dillonkearns$elm_markdown$Markdown$TableParser$bodyRowParser(
			$elm$core$List$length(headers)));
};
var $dillonkearns$elm_markdown$Markdown$Block$H1 = {$: 'H1'};
var $dillonkearns$elm_markdown$Markdown$Block$H2 = {$: 'H2'};
var $dillonkearns$elm_markdown$Markdown$Block$H3 = {$: 'H3'};
var $dillonkearns$elm_markdown$Markdown$Block$H4 = {$: 'H4'};
var $dillonkearns$elm_markdown$Markdown$Block$H5 = {$: 'H5'};
var $dillonkearns$elm_markdown$Markdown$Block$H6 = {$: 'H6'};
var $dillonkearns$elm_markdown$Markdown$Parser$toHeading = function (level) {
	switch (level) {
		case 1:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H1);
		case 2:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H2);
		case 3:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H3);
		case 4:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H4);
		case 5:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H5);
		case 6:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H6);
		default:
			return $elm$core$Result$Err(
				$elm$parser$Parser$Expecting(
					'A heading with 1 to 6 #\'s, but found ' + $elm$core$String$fromInt(level)));
	}
};
var $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem = {$: 'EmptyItem'};
var $dillonkearns$elm_markdown$Markdown$ListItem$PlainItem = function (a) {
	return {$: 'PlainItem', a: a};
};
var $dillonkearns$elm_markdown$Markdown$ListItem$TaskItem = F2(
	function (a, b) {
		return {$: 'TaskItem', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$UnorderedList$getIntendedCodeItem = F4(
	function (markerStartPos, listMarker, markerEndPos, _v0) {
		var bodyStartPos = _v0.a;
		var item = _v0.b;
		var spaceNum = bodyStartPos - markerEndPos;
		if (spaceNum <= 4) {
			return _Utils_Tuple3(listMarker, bodyStartPos - markerStartPos, item);
		} else {
			var intendedCodeItem = function () {
				switch (item.$) {
					case 'TaskItem':
						var completion = item.a;
						var string = item.b;
						return A2(
							$dillonkearns$elm_markdown$Markdown$ListItem$TaskItem,
							completion,
							_Utils_ap(
								A2($elm$core$String$repeat, spaceNum - 1, ' '),
								string));
					case 'PlainItem':
						var string = item.a;
						return $dillonkearns$elm_markdown$Markdown$ListItem$PlainItem(
							_Utils_ap(
								A2($elm$core$String$repeat, spaceNum - 1, ' '),
								string));
					default:
						return $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem;
				}
			}();
			return _Utils_Tuple3(listMarker, (markerEndPos - markerStartPos) + 1, intendedCodeItem);
		}
	});
var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListEmptyItemParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$succeed(
		function (bodyStartPos) {
			return _Utils_Tuple2(bodyStartPos, $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem);
		}),
	A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getCol, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$ListItem$Complete = {$: 'Complete'};
var $dillonkearns$elm_markdown$Markdown$ListItem$Incomplete = {$: 'Incomplete'};
var $dillonkearns$elm_markdown$Markdown$ListItem$taskItemParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$Complete),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[x] ',
					$elm$parser$Parser$ExpectingSymbol('[x] ')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$Complete),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[X] ',
					$elm$parser$Parser$ExpectingSymbol('[X] ')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$Incomplete),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[ ] ',
					$elm$parser$Parser$ExpectingSymbol('[ ] '))))
		]));
var $dillonkearns$elm_markdown$Markdown$ListItem$parser = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$TaskItem),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$dillonkearns$elm_markdown$Markdown$ListItem$taskItemParser,
					$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))),
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$PlainItem)
			])),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (bodyStartPos, item) {
						return _Utils_Tuple2(bodyStartPos, item);
					})),
			$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
		$elm$parser$Parser$Advanced$getCol),
	$dillonkearns$elm_markdown$Markdown$ListItem$parser);
var $dillonkearns$elm_markdown$Markdown$UnorderedList$Asterisk = {$: 'Asterisk'};
var $dillonkearns$elm_markdown$Markdown$UnorderedList$Minus = {$: 'Minus'};
var $dillonkearns$elm_markdown$Markdown$UnorderedList$Plus = {$: 'Plus'};
var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListMarkerParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$Minus),
				A2($dillonkearns$elm_markdown$Parser$Extra$upTo, 3, $dillonkearns$elm_markdown$Whitespace$space)),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'-',
					$elm$parser$Parser$ExpectingSymbol('-')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$Plus),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'+',
					$elm$parser$Parser$ExpectingSymbol('+')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$Asterisk),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'*',
					$elm$parser$Parser$ExpectingSymbol('*'))))
		]));
var $dillonkearns$elm_markdown$Markdown$UnorderedList$parser = function (previousWasBody) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$getIntendedCodeItem),
					$elm$parser$Parser$Advanced$getCol),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListMarkerParser)),
			$elm$parser$Parser$Advanced$getCol),
		previousWasBody ? $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser : $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[$dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListEmptyItemParser, $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser])));
};
var $dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock = function (previousWasBody) {
	var parseListItem = F3(
		function (listmarker, intended, unparsedListItem) {
			switch (unparsedListItem.$) {
				case 'TaskItem':
					var completion = unparsedListItem.a;
					var body = unparsedListItem.b;
					return {
						body: body,
						marker: listmarker,
						task: $elm$core$Maybe$Just(
							function () {
								if (completion.$ === 'Complete') {
									return true;
								} else {
									return false;
								}
							}())
					};
				case 'PlainItem':
					var body = unparsedListItem.a;
					return {body: body, marker: listmarker, task: $elm$core$Maybe$Nothing};
				default:
					return {body: '', marker: listmarker, task: $elm$core$Maybe$Nothing};
			}
		});
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (_v0) {
			var listmarker = _v0.a;
			var intended = _v0.b;
			var unparsedListItem = _v0.c;
			return A4(
				$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
				true,
				intended,
				_List_Nil,
				A3(parseListItem, listmarker, intended, unparsedListItem));
		},
		$dillonkearns$elm_markdown$Markdown$UnorderedList$parser(previousWasBody));
};
var $dillonkearns$elm_markdown$Markdown$Parser$childToBlocks = F2(
	function (node, blocks) {
		switch (node.$) {
			case 'Element':
				var tag = node.a;
				var attributes = node.b;
				var children = node.c;
				var _v99 = $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks(children);
				if (_v99.$ === 'Ok') {
					var childrenAsBlocks = _v99.a;
					var block = $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
						A3($dillonkearns$elm_markdown$Markdown$Block$HtmlElement, tag, attributes, childrenAsBlocks));
					return $elm$core$Result$Ok(
						A2($elm$core$List$cons, block, blocks));
				} else {
					var err = _v99.a;
					return $elm$core$Result$Err(err);
				}
			case 'Text':
				var innerText = node.a;
				var _v100 = $dillonkearns$elm_markdown$Markdown$Parser$parse(innerText);
				if (_v100.$ === 'Ok') {
					var value = _v100.a;
					return $elm$core$Result$Ok(
						_Utils_ap(
							$elm$core$List$reverse(value),
							blocks));
				} else {
					var error = _v100.a;
					return $elm$core$Result$Err(
						$elm$parser$Parser$Expecting(
							A2(
								$elm$core$String$join,
								'\n',
								A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, error))));
				}
			case 'Comment':
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string)),
						blocks));
			case 'Cdata':
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Block$Cdata(string)),
						blocks));
			case 'ProcessingInstruction':
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string)),
						blocks));
			default:
				var declarationType = node.a;
				var content = node.b;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content)),
						blocks));
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$completeBlocks = function (state) {
	var _v84 = state.rawBlocks;
	_v84$5:
	while (true) {
		if (_v84.b) {
			switch (_v84.a.$) {
				case 'BlockQuote':
					var body2 = _v84.a.a;
					var rest = _v84.b;
					var _v85 = A2(
						$elm$parser$Parser$Advanced$run,
						$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
						body2);
					if (_v85.$ === 'Ok') {
						var value = _v85.a;
						return $elm$parser$Parser$Advanced$succeed(
							{
								linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
								rawBlocks: A2(
									$elm$core$List$cons,
									$dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value.rawBlocks),
									rest)
							});
					} else {
						var error = _v85.a;
						return $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Problem(
								$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(error)));
					}
				case 'UnorderedListBlock':
					var _v86 = _v84.a;
					var tight = _v86.a;
					var intended = _v86.b;
					var closeListItems = _v86.c;
					var openListItem = _v86.d;
					var rest = _v84.b;
					var _v87 = A2(
						$elm$parser$Parser$Advanced$run,
						$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
						openListItem.body);
					if (_v87.$ === 'Ok') {
						var value = _v87.a;
						var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
						return $elm$parser$Parser$Advanced$succeed(
							{
								linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
								rawBlocks: A2(
									$elm$core$List$cons,
									A4(
										$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
										tight2,
										intended,
										A2(
											$elm$core$List$cons,
											{body: value.rawBlocks, task: openListItem.task},
											closeListItems),
										openListItem),
									rest)
							});
					} else {
						var e = _v87.a;
						return $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Problem(
								$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
					}
				case 'OrderedListBlock':
					var _v92 = _v84.a;
					var tight = _v92.a;
					var intended = _v92.b;
					var marker = _v92.c;
					var order = _v92.d;
					var closeListItems = _v92.e;
					var openListItem = _v92.f;
					var rest = _v84.b;
					var _v93 = A2(
						$elm$parser$Parser$Advanced$run,
						$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
						openListItem);
					if (_v93.$ === 'Ok') {
						var value = _v93.a;
						var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
						return $elm$parser$Parser$Advanced$succeed(
							{
								linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
								rawBlocks: A2(
									$elm$core$List$cons,
									A6(
										$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
										tight2,
										intended,
										marker,
										order,
										A2($elm$core$List$cons, value.rawBlocks, closeListItems),
										openListItem),
									rest)
							});
					} else {
						var e = _v93.a;
						return $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Problem(
								$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
					}
				case 'BlankLine':
					if (_v84.b.b) {
						switch (_v84.b.a.$) {
							case 'UnorderedListBlock':
								var _v88 = _v84.a;
								var _v89 = _v84.b;
								var _v90 = _v89.a;
								var tight = _v90.a;
								var intended = _v90.b;
								var closeListItems = _v90.c;
								var openListItem = _v90.d;
								var rest = _v89.b;
								var _v91 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem.body);
								if (_v91.$ === 'Ok') {
									var value = _v91.a;
									var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												A4(
													$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
													tight2,
													intended,
													A2(
														$elm$core$List$cons,
														{body: value.rawBlocks, task: openListItem.task},
														closeListItems),
													openListItem),
												rest)
										});
								} else {
									var e = _v91.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
							case 'OrderedListBlock':
								var _v94 = _v84.a;
								var _v95 = _v84.b;
								var _v96 = _v95.a;
								var tight = _v96.a;
								var intended = _v96.b;
								var marker = _v96.c;
								var order = _v96.d;
								var closeListItems = _v96.e;
								var openListItem = _v96.f;
								var rest = _v95.b;
								var _v97 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem);
								if (_v97.$ === 'Ok') {
									var value = _v97.a;
									var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												A6(
													$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
													tight2,
													intended,
													marker,
													order,
													A2($elm$core$List$cons, value.rawBlocks, closeListItems),
													openListItem),
												rest)
										});
								} else {
									var e = _v97.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
							default:
								break _v84$5;
						}
					} else {
						break _v84$5;
					}
				default:
					break _v84$5;
			}
		} else {
			break _v84$5;
		}
	}
	return $elm$parser$Parser$Advanced$succeed(state);
};
var $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks = F2(
	function (state, newRawBlock) {
		var _v41 = _Utils_Tuple2(newRawBlock, state.rawBlocks);
		_v41$13:
		while (true) {
			if (_v41.b.b) {
				switch (_v41.b.a.$) {
					case 'CodeBlock':
						if (_v41.a.$ === 'CodeBlock') {
							var block1 = _v41.a.a;
							var _v42 = _v41.b;
							var block2 = _v42.a.a;
							var rest = _v42.b;
							return $elm$parser$Parser$Advanced$succeed(
								{
									linkReferenceDefinitions: state.linkReferenceDefinitions,
									rawBlocks: A2(
										$elm$core$List$cons,
										$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock(
											{
												body: A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block2.body, block1.body),
												language: $elm$core$Maybe$Nothing
											}),
										rest)
								});
						} else {
							break _v41$13;
						}
					case 'IndentedCodeBlock':
						switch (_v41.a.$) {
							case 'IndentedCodeBlock':
								var block1 = _v41.a.a;
								var _v43 = _v41.b;
								var block2 = _v43.a.a;
								var rest = _v43.b;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock(
												A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block2, block1)),
											rest)
									});
							case 'BlankLine':
								var _v44 = _v41.a;
								var _v45 = _v41.b;
								var block = _v45.a.a;
								var rest = _v45.b;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock(
												A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block, '\n')),
											rest)
									});
							default:
								break _v41$13;
						}
					case 'BlockQuote':
						var _v46 = _v41.b;
						var body2 = _v46.a.a;
						var rest = _v46.b;
						switch (newRawBlock.$) {
							case 'BlockQuote':
								var body1 = newRawBlock.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote(
												A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, body2, body1)),
											rest)
									});
							case 'OpenBlockOrParagraph':
								var body1 = newRawBlock.a.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote(
												A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', body2, body1)),
											rest)
									});
							default:
								var _v48 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									body2);
								if (_v48.$ === 'Ok') {
									var value = _v48.a;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												newRawBlock,
												A2(
													$elm$core$List$cons,
													$dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value.rawBlocks),
													rest))
										});
								} else {
									var e = _v48.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
						}
					case 'UnorderedListBlock':
						var _v49 = _v41.b;
						var _v50 = _v49.a;
						var tight = _v50.a;
						var intended1 = _v50.b;
						var closeListItems2 = _v50.c;
						var openListItem2 = _v50.d;
						var rest = _v49.b;
						switch (newRawBlock.$) {
							case 'UnorderedListBlock':
								var intended2 = newRawBlock.b;
								var closeListItems1 = newRawBlock.c;
								var openListItem1 = newRawBlock.d;
								if (_Utils_eq(openListItem2.marker, openListItem1.marker)) {
									var _v52 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2.body);
									if (_v52.$ === 'Ok') {
										var value = _v52.a;
										return A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													A4(
														$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
														false,
														intended2,
														A2(
															$elm$core$List$cons,
															{body: value.rawBlocks, task: openListItem2.task},
															closeListItems2),
														openListItem1),
													rest)
											}) : $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													A4(
														$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
														tight,
														intended2,
														A2(
															$elm$core$List$cons,
															{body: value.rawBlocks, task: openListItem2.task},
															closeListItems2),
														openListItem1),
													rest)
											});
									} else {
										var e = _v52.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								} else {
									var _v53 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2.body);
									if (_v53.$ === 'Ok') {
										var value = _v53.a;
										var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
										return $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													newRawBlock,
													A2(
														$elm$core$List$cons,
														A4(
															$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
															tight2,
															intended1,
															A2(
																$elm$core$List$cons,
																{body: value.rawBlocks, task: openListItem2.task},
																closeListItems2),
															openListItem1),
														rest))
											});
									} else {
										var e = _v53.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								}
							case 'OpenBlockOrParagraph':
								var body1 = newRawBlock.a.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											A4(
												$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
												tight,
												intended1,
												closeListItems2,
												_Utils_update(
													openListItem2,
													{
														body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', openListItem2.body, body1)
													})),
											rest)
									});
							default:
								var _v54 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem2.body);
								if (_v54.$ === 'Ok') {
									var value = _v54.a;
									var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												newRawBlock,
												A2(
													$elm$core$List$cons,
													A4(
														$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
														tight2,
														intended1,
														A2(
															$elm$core$List$cons,
															{body: value.rawBlocks, task: openListItem2.task},
															closeListItems2),
														openListItem2),
													rest))
										});
								} else {
									var e = _v54.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
						}
					case 'OrderedListBlock':
						var _v55 = _v41.b;
						var _v56 = _v55.a;
						var tight = _v56.a;
						var intended1 = _v56.b;
						var marker = _v56.c;
						var order = _v56.d;
						var closeListItems2 = _v56.e;
						var openListItem2 = _v56.f;
						var rest = _v55.b;
						switch (newRawBlock.$) {
							case 'OrderedListBlock':
								var intended2 = newRawBlock.b;
								var marker2 = newRawBlock.c;
								var closeListItems1 = newRawBlock.e;
								var openListItem1 = newRawBlock.f;
								if (_Utils_eq(marker, marker2)) {
									var _v58 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2);
									if (_v58.$ === 'Ok') {
										var value = _v58.a;
										var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
										return $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													A6(
														$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
														tight2,
														intended2,
														marker,
														order,
														A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
														openListItem1),
													rest)
											});
									} else {
										var e = _v58.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								} else {
									var _v59 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2);
									if (_v59.$ === 'Ok') {
										var value = _v59.a;
										var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
										return $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													newRawBlock,
													A2(
														$elm$core$List$cons,
														A6(
															$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
															tight2,
															intended1,
															marker,
															order,
															A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
															openListItem2),
														rest))
											});
									} else {
										var e = _v59.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								}
							case 'OpenBlockOrParagraph':
								var body1 = newRawBlock.a.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended1, marker, order, closeListItems2, openListItem2 + ('\n' + body1)),
											rest)
									});
							default:
								var _v60 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem2);
								if (_v60.$ === 'Ok') {
									var value = _v60.a;
									var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												newRawBlock,
												A2(
													$elm$core$List$cons,
													A6(
														$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
														tight2,
														intended1,
														marker,
														order,
														A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
														openListItem2),
													rest))
										});
								} else {
									var e = _v60.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
						}
					case 'OpenBlockOrParagraph':
						switch (_v41.a.$) {
							case 'OpenBlockOrParagraph':
								var body1 = _v41.a.a.a;
								var _v61 = _v41.b;
								var body2 = _v61.a.a.a;
								var rest = _v61.b;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
												$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(
													A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', body2, body1))),
											rest)
									});
							case 'SetextLine':
								if (_v41.a.a.$ === 'LevelOne') {
									var _v62 = _v41.a;
									var _v63 = _v62.a;
									var _v64 = _v41.b;
									var unparsedInlines = _v64.a.a;
									var rest = _v64.b;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: state.linkReferenceDefinitions,
											rawBlocks: A2(
												$elm$core$List$cons,
												A2($dillonkearns$elm_markdown$Markdown$RawBlock$Heading, 1, unparsedInlines),
												rest)
										});
								} else {
									var _v65 = _v41.a;
									var _v66 = _v65.a;
									var _v67 = _v41.b;
									var unparsedInlines = _v67.a.a;
									var rest = _v67.b;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: state.linkReferenceDefinitions,
											rawBlocks: A2(
												$elm$core$List$cons,
												A2($dillonkearns$elm_markdown$Markdown$RawBlock$Heading, 2, unparsedInlines),
												rest)
										});
								}
							case 'TableDelimiter':
								var _v68 = _v41.a.a;
								var text = _v68.a;
								var alignments = _v68.b;
								var _v69 = _v41.b;
								var rawHeaders = _v69.a.a.a;
								var rest = _v69.b;
								var _v70 = A2(
									$dillonkearns$elm_markdown$Markdown$TableParser$parseHeader,
									A2($dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow, text, alignments),
									rawHeaders);
								if (_v70.$ === 'Ok') {
									var headers = _v70.a.a;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: state.linkReferenceDefinitions,
											rawBlocks: A2(
												$elm$core$List$cons,
												$dillonkearns$elm_markdown$Markdown$RawBlock$Table(
													A2($dillonkearns$elm_markdown$Markdown$Table$Table, headers, _List_Nil)),
												rest)
										});
								} else {
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: state.linkReferenceDefinitions,
											rawBlocks: A2(
												$elm$core$List$cons,
												$dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
													$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(
														A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', rawHeaders, text.raw))),
												rest)
										});
								}
							default:
								break _v41$13;
						}
					case 'Table':
						if (_v41.a.$ === 'Table') {
							var updatedTable = _v41.a.a;
							var _v71 = _v41.b;
							var rest = _v71.b;
							return $elm$parser$Parser$Advanced$succeed(
								{
									linkReferenceDefinitions: state.linkReferenceDefinitions,
									rawBlocks: A2(
										$elm$core$List$cons,
										$dillonkearns$elm_markdown$Markdown$RawBlock$Table(updatedTable),
										rest)
								});
						} else {
							break _v41$13;
						}
					case 'BlankLine':
						if (_v41.b.b.b) {
							switch (_v41.b.b.a.$) {
								case 'OrderedListBlock':
									var _v72 = _v41.b;
									var _v73 = _v72.a;
									var _v74 = _v72.b;
									var _v75 = _v74.a;
									var tight = _v75.a;
									var intended1 = _v75.b;
									var marker = _v75.c;
									var order = _v75.d;
									var closeListItems2 = _v75.e;
									var openListItem2 = _v75.f;
									var rest = _v74.b;
									var _v76 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2);
									if (_v76.$ === 'Ok') {
										var value = _v76.a;
										if (newRawBlock.$ === 'OrderedListBlock') {
											var intended2 = newRawBlock.b;
											var openListItem = newRawBlock.f;
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														A6(
															$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
															false,
															intended2,
															marker,
															order,
															A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
															openListItem),
														rest)
												});
										} else {
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														newRawBlock,
														A2(
															$elm$core$List$cons,
															$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
															A2(
																$elm$core$List$cons,
																A6(
																	$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
																	tight,
																	intended1,
																	marker,
																	order,
																	A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
																	openListItem2),
																rest)))
												});
										}
									} else {
										var e = _v76.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								case 'UnorderedListBlock':
									var _v78 = _v41.b;
									var _v79 = _v78.a;
									var _v80 = _v78.b;
									var _v81 = _v80.a;
									var tight = _v81.a;
									var intended1 = _v81.b;
									var closeListItems2 = _v81.c;
									var openListItem2 = _v81.d;
									var rest = _v80.b;
									var _v82 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2.body);
									if (_v82.$ === 'Ok') {
										var value = _v82.a;
										if (newRawBlock.$ === 'UnorderedListBlock') {
											var openListItem = newRawBlock.d;
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														A4(
															$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
															false,
															intended1,
															A2(
																$elm$core$List$cons,
																{body: value.rawBlocks, task: openListItem2.task},
																closeListItems2),
															openListItem),
														rest)
												});
										} else {
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														newRawBlock,
														A2(
															$elm$core$List$cons,
															$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
															A2(
																$elm$core$List$cons,
																A4(
																	$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
																	tight,
																	intended1,
																	A2(
																		$elm$core$List$cons,
																		{body: value.rawBlocks, task: openListItem2.task},
																		closeListItems2),
																	openListItem2),
																rest)))
												});
										}
									} else {
										var e = _v82.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								default:
									break _v41$13;
							}
						} else {
							break _v41$13;
						}
					default:
						break _v41$13;
				}
			} else {
				break _v41$13;
			}
		}
		return $elm$parser$Parser$Advanced$succeed(
			{
				linkReferenceDefinitions: state.linkReferenceDefinitions,
				rawBlocks: A2($elm$core$List$cons, newRawBlock, state.rawBlocks)
			});
	});
var $dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper = F2(
	function (referencesDict, _v36) {
		var unparsedInlines = _v36.a;
		var mappedReferencesDict = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$mapSecond(
					function (_v37) {
						var destination = _v37.destination;
						var title = _v37.title;
						return _Utils_Tuple2(destination, title);
					}),
				referencesDict));
		return A2(
			$elm$core$List$map,
			$dillonkearns$elm_markdown$Markdown$Parser$mapInline,
			A2($dillonkearns$elm_markdown$Markdown$InlineParser$parse, mappedReferencesDict, unparsedInlines));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$mapInline = function (inline) {
	switch (inline.$) {
		case 'Text':
			var string = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$Text(string);
		case 'HardLineBreak':
			return $dillonkearns$elm_markdown$Markdown$Block$HardLineBreak;
		case 'CodeInline':
			var string = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$CodeSpan(string);
		case 'Link':
			var string = inline.a;
			var maybeString = inline.b;
			var inlines = inline.c;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Block$Link,
				string,
				maybeString,
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
		case 'Image':
			var string = inline.a;
			var maybeString = inline.b;
			var inlines = inline.c;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Block$Image,
				string,
				maybeString,
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
		case 'HtmlInline':
			var node = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$HtmlInline(
				$dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock(node));
		case 'Emphasis':
			var level = inline.a;
			var inlines = inline.b;
			switch (level) {
				case 1:
					return $dillonkearns$elm_markdown$Markdown$Block$Emphasis(
						A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
				case 2:
					return $dillonkearns$elm_markdown$Markdown$Block$Strong(
						A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
				default:
					return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(level) ? $dillonkearns$elm_markdown$Markdown$Block$Strong(
						_List_fromArray(
							[
								$dillonkearns$elm_markdown$Markdown$Parser$mapInline(
								A2($dillonkearns$elm_markdown$Markdown$Inline$Emphasis, level - 2, inlines))
							])) : $dillonkearns$elm_markdown$Markdown$Block$Emphasis(
						_List_fromArray(
							[
								$dillonkearns$elm_markdown$Markdown$Parser$mapInline(
								A2($dillonkearns$elm_markdown$Markdown$Inline$Emphasis, level - 1, inlines))
							]));
			}
		default:
			var inlines = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$Strikethrough(
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock = function (node) {
	switch (node.$) {
		case 'Text':
			var innerText = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$HtmlComment('TODO this never happens, but use types to drop this case.');
		case 'Element':
			var tag = node.a;
			var attributes = node.b;
			var children = node.c;
			var parseChild = function (child) {
				if (child.$ === 'Text') {
					var text = child.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$textNodeToBlocks(text);
				} else {
					return _List_fromArray(
						[
							$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock(child))
						]);
				}
			};
			return A3(
				$dillonkearns$elm_markdown$Markdown$Block$HtmlElement,
				tag,
				attributes,
				A2($elm$core$List$concatMap, parseChild, children));
		case 'Comment':
			var string = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string);
		case 'Cdata':
			var string = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$Cdata(string);
		case 'ProcessingInstruction':
			var string = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string);
		default:
			var declarationType = node.a;
			var content = node.b;
			return A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content);
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks = function (children) {
	return A2($dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocksHelp, children, _List_Nil);
};
var $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocksHelp = F2(
	function (remaining, soFar) {
		nodesToBlocksHelp:
		while (true) {
			if (remaining.b) {
				var node = remaining.a;
				var rest = remaining.b;
				var _v31 = A2($dillonkearns$elm_markdown$Markdown$Parser$childToBlocks, node, soFar);
				if (_v31.$ === 'Ok') {
					var newSoFar = _v31.a;
					var $temp$remaining = rest,
						$temp$soFar = newSoFar;
					remaining = $temp$remaining;
					soFar = $temp$soFar;
					continue nodesToBlocksHelp;
				} else {
					var e = _v31.a;
					return $elm$core$Result$Err(e);
				}
			} else {
				return $elm$core$Result$Ok(
					$elm$core$List$reverse(soFar));
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parse = function (input) {
	var _v27 = A2(
		$elm$parser$Parser$Advanced$run,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
			$dillonkearns$elm_markdown$Helpers$endOfFile),
		input);
	if (_v27.$ === 'Err') {
		var e = _v27.a;
		return $elm$core$Result$Err(e);
	} else {
		var v = _v27.a;
		var _v28 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(v);
		if (_v28.$ === 'Err') {
			var e = _v28.a;
			return A2(
				$elm$parser$Parser$Advanced$run,
				$elm$parser$Parser$Advanced$problem(e),
				'');
		} else {
			var blocks = _v28.a;
			var isNotEmptyParagraph = function (block) {
				if ((block.$ === 'Paragraph') && (!block.a.b)) {
					return false;
				} else {
					return true;
				}
			};
			return $elm$core$Result$Ok(
				A2($elm$core$List$filter, isNotEmptyParagraph, blocks));
		}
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines = function (state) {
	return A3($dillonkearns$elm_markdown$Markdown$Parser$parseAllInlinesHelp, state, state.rawBlocks, _List_Nil);
};
var $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlinesHelp = F3(
	function (state, rawBlocks, parsedBlocks) {
		parseAllInlinesHelp:
		while (true) {
			if (rawBlocks.b) {
				var rawBlock = rawBlocks.a;
				var rest = rawBlocks.b;
				var _v26 = A2($dillonkearns$elm_markdown$Markdown$Parser$parseInlines, state.linkReferenceDefinitions, rawBlock);
				switch (_v26.$) {
					case 'ParsedBlock':
						var newParsedBlock = _v26.a;
						var $temp$state = state,
							$temp$rawBlocks = rest,
							$temp$parsedBlocks = A2($elm$core$List$cons, newParsedBlock, parsedBlocks);
						state = $temp$state;
						rawBlocks = $temp$rawBlocks;
						parsedBlocks = $temp$parsedBlocks;
						continue parseAllInlinesHelp;
					case 'EmptyBlock':
						var $temp$state = state,
							$temp$rawBlocks = rest,
							$temp$parsedBlocks = parsedBlocks;
						state = $temp$state;
						rawBlocks = $temp$rawBlocks;
						parsedBlocks = $temp$parsedBlocks;
						continue parseAllInlinesHelp;
					default:
						var e = _v26.a;
						return $elm$core$Result$Err(e);
				}
			} else {
				return $elm$core$Result$Ok(parsedBlocks);
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseHeaderInlines = F2(
	function (linkReferences, header) {
		return A2(
			$elm$core$List$map,
			function (_v24) {
				var label = _v24.label;
				var alignment = _v24.alignment;
				return A3(
					$dillonkearns$elm_markdown$Markdown$Parser$parseRawInline,
					linkReferences,
					function (parsedHeaderLabel) {
						return {alignment: alignment, label: parsedHeaderLabel};
					},
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(label));
			},
			header);
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseInlines = F2(
	function (linkReferences, rawBlock) {
		switch (rawBlock.$) {
			case 'Heading':
				var level = rawBlock.a;
				var unparsedInlines = rawBlock.b;
				var _v17 = $dillonkearns$elm_markdown$Markdown$Parser$toHeading(level);
				if (_v17.$ === 'Ok') {
					var parsedLevel = _v17.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
						A2(
							$dillonkearns$elm_markdown$Markdown$Block$Heading,
							parsedLevel,
							A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines)));
				} else {
					var e = _v17.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem(e);
				}
			case 'OpenBlockOrParagraph':
				var unparsedInlines = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$Paragraph(
						A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines)));
			case 'Html':
				var html = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(html));
			case 'UnorderedListBlock':
				var tight = rawBlock.a;
				var intended = rawBlock.b;
				var unparsedItems = rawBlock.c;
				var parseItem = F2(
					function (rawBlockTask, rawBlocks) {
						var blocksTask = function () {
							if (rawBlockTask.$ === 'Just') {
								if (!rawBlockTask.a) {
									return $dillonkearns$elm_markdown$Markdown$Block$IncompleteTask;
								} else {
									return $dillonkearns$elm_markdown$Markdown$Block$CompletedTask;
								}
							} else {
								return $dillonkearns$elm_markdown$Markdown$Block$NoTask;
							}
						}();
						var blocks = function () {
							var _v18 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(
								{linkReferenceDefinitions: linkReferences, rawBlocks: rawBlocks});
							if (_v18.$ === 'Ok') {
								var parsedBlocks = _v18.a;
								return parsedBlocks;
							} else {
								var e = _v18.a;
								return _List_Nil;
							}
						}();
						return A2($dillonkearns$elm_markdown$Markdown$Block$ListItem, blocksTask, blocks);
					});
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					A2(
						$dillonkearns$elm_markdown$Markdown$Block$UnorderedList,
						$dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay(tight),
						$elm$core$List$reverse(
							A2(
								$elm$core$List$map,
								function (item) {
									return A2(parseItem, item.task, item.body);
								},
								unparsedItems))));
			case 'OrderedListBlock':
				var tight = rawBlock.a;
				var startingIndex = rawBlock.d;
				var unparsedItems = rawBlock.e;
				var parseItem = function (rawBlocks) {
					var _v20 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(
						{linkReferenceDefinitions: linkReferences, rawBlocks: rawBlocks});
					if (_v20.$ === 'Ok') {
						var parsedBlocks = _v20.a;
						return parsedBlocks;
					} else {
						var e = _v20.a;
						return _List_Nil;
					}
				};
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					A3(
						$dillonkearns$elm_markdown$Markdown$Block$OrderedList,
						$dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay(tight),
						startingIndex,
						$elm$core$List$reverse(
							A2($elm$core$List$map, parseItem, unparsedItems))));
			case 'CodeBlock':
				var codeBlock = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$CodeBlock(codeBlock));
			case 'ThematicBreak':
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$ThematicBreak);
			case 'BlankLine':
				return $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock;
			case 'BlockQuote':
				var rawBlocks = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock;
			case 'ParsedBlockQuote':
				var rawBlocks = rawBlock.a;
				var _v21 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(
					{linkReferenceDefinitions: linkReferences, rawBlocks: rawBlocks});
				if (_v21.$ === 'Ok') {
					var parsedBlocks = _v21.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
						$dillonkearns$elm_markdown$Markdown$Block$BlockQuote(parsedBlocks));
				} else {
					var e = _v21.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem(e);
				}
			case 'IndentedCodeBlock':
				var codeBlockBody = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$CodeBlock(
						{body: codeBlockBody, language: $elm$core$Maybe$Nothing}));
			case 'Table':
				var _v22 = rawBlock.a;
				var header = _v22.a;
				var rows = _v22.b;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					A2(
						$dillonkearns$elm_markdown$Markdown$Block$Table,
						A2($dillonkearns$elm_markdown$Markdown$Parser$parseHeaderInlines, linkReferences, header),
						A2($dillonkearns$elm_markdown$Markdown$Parser$parseRowInlines, linkReferences, rows)));
			case 'TableDelimiter':
				var _v23 = rawBlock.a;
				var text = _v23.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$Paragraph(
						A2(
							$dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper,
							linkReferences,
							$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(text.raw))));
			default:
				var raw = rawBlock.b;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$Paragraph(
						A2(
							$dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper,
							linkReferences,
							$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(raw))));
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseRawInline = F3(
	function (linkReferences, wrap, unparsedInlines) {
		return wrap(
			A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseRowInlines = F2(
	function (linkReferences, rows) {
		return A2(
			$elm$core$List$map,
			function (row) {
				return A2(
					$elm$core$List$map,
					function (column) {
						return A3(
							$dillonkearns$elm_markdown$Markdown$Parser$parseRawInline,
							linkReferences,
							$elm$core$Basics$identity,
							$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(column));
					},
					row);
			},
			rows);
	});
var $dillonkearns$elm_markdown$Markdown$Parser$stepRawBlock = function (revStmts) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return $elm$parser$Parser$Advanced$Done(revStmts);
				},
				$dillonkearns$elm_markdown$Helpers$endOfFile),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (reference) {
					return $elm$parser$Parser$Advanced$Loop(
						A2($dillonkearns$elm_markdown$Markdown$Parser$addReference, revStmts, reference));
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$parser)),
				function () {
				var _v3 = revStmts.rawBlocks;
				_v3$6:
				while (true) {
					if (_v3.b) {
						switch (_v3.a.$) {
							case 'OpenBlockOrParagraph':
								return A2(
									$elm$parser$Parser$Advanced$map,
									function (block) {
										return $elm$parser$Parser$Advanced$Loop(block);
									},
									A2(
										$elm$parser$Parser$Advanced$andThen,
										$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser()));
							case 'Table':
								var table = _v3.a.a;
								return A2(
									$elm$parser$Parser$Advanced$map,
									function (block) {
										return $elm$parser$Parser$Advanced$Loop(block);
									},
									A2(
										$elm$parser$Parser$Advanced$andThen,
										$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
										$elm$parser$Parser$Advanced$oneOf(
											_List_fromArray(
												[
													$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser(),
													$dillonkearns$elm_markdown$Markdown$Parser$tableRowIfTableStarted(table)
												]))));
							case 'UnorderedListBlock':
								var _v4 = _v3.a;
								var tight = _v4.a;
								var intended = _v4.b;
								var closeListItems = _v4.c;
								var openListItem = _v4.d;
								var rest = _v3.b;
								var completeOrMergeUnorderedListBlockBlankLine = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												rawBlocks: A2(
													$elm$core$List$cons,
													$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
													A2(
														$elm$core$List$cons,
														A4(
															$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
															tight,
															intended,
															closeListItems,
															_Utils_update(
																openListItem,
																{
																	body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '', openListItem.body, newString)
																})),
														rest))
											});
									});
								var completeOrMergeUnorderedListBlock = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												rawBlocks: A2(
													$elm$core$List$cons,
													A4(
														$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
														tight,
														intended,
														closeListItems,
														_Utils_update(
															openListItem,
															{
																body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', openListItem.body, newString)
															})),
													rest)
											});
									});
								return $elm$parser$Parser$Advanced$oneOf(
									_List_fromArray(
										[
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												function (_v5) {
													return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
												},
												$dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												completeOrMergeUnorderedListBlock(revStmts),
												A2(
													$elm$parser$Parser$Advanced$keeper,
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
														$elm$parser$Parser$Advanced$symbol(
															A2(
																$elm$parser$Parser$Advanced$Token,
																A2($elm$core$String$repeat, intended, ' '),
																$elm$parser$Parser$ExpectingSymbol('Indentation')))),
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
														$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$andThen,
												$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
												$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList()))
										]));
							case 'OrderedListBlock':
								var _v10 = _v3.a;
								var tight = _v10.a;
								var intended = _v10.b;
								var marker = _v10.c;
								var order = _v10.d;
								var closeListItems = _v10.e;
								var openListItem = _v10.f;
								var rest = _v3.b;
								var completeOrMergeUnorderedListBlockBlankLine = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												rawBlocks: A2(
													$elm$core$List$cons,
													$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
													A2(
														$elm$core$List$cons,
														A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
														rest))
											});
									});
								var completeOrMergeUnorderedListBlock = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												rawBlocks: A2(
													$elm$core$List$cons,
													A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
													rest)
											});
									});
								return $elm$parser$Parser$Advanced$oneOf(
									_List_fromArray(
										[
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												function (_v11) {
													return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
												},
												$dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												completeOrMergeUnorderedListBlock(revStmts),
												A2(
													$elm$parser$Parser$Advanced$keeper,
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
														$elm$parser$Parser$Advanced$symbol(
															A2(
																$elm$parser$Parser$Advanced$Token,
																A2($elm$core$String$repeat, intended, ' '),
																$elm$parser$Parser$ExpectingSymbol('Indentation')))),
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
														$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$andThen,
												$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
												$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList()))
										]));
							case 'BlankLine':
								if (_v3.b.b) {
									switch (_v3.b.a.$) {
										case 'UnorderedListBlock':
											var _v6 = _v3.a;
											var _v7 = _v3.b;
											var _v8 = _v7.a;
											var tight = _v8.a;
											var intended = _v8.b;
											var closeListItems = _v8.c;
											var openListItem = _v8.d;
											var rest = _v7.b;
											var completeOrMergeUnorderedListBlockBlankLine = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															rawBlocks: A2(
																$elm$core$List$cons,
																$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
																A2(
																	$elm$core$List$cons,
																	A4(
																		$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
																		tight,
																		intended,
																		closeListItems,
																		_Utils_update(
																			openListItem,
																			{
																				body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '', openListItem.body, newString)
																			})),
																	rest))
														});
												});
											var completeOrMergeUnorderedListBlock = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															rawBlocks: A2(
																$elm$core$List$cons,
																A4(
																	$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
																	tight,
																	intended,
																	closeListItems,
																	_Utils_update(
																		openListItem,
																		{
																			body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', openListItem.body, newString)
																		})),
																rest)
														});
												});
											return ($elm$core$String$trim(openListItem.body) === '') ? A2(
												$elm$parser$Parser$Advanced$map,
												function (block) {
													return $elm$parser$Parser$Advanced$Loop(block);
												},
												A2(
													$elm$parser$Parser$Advanced$andThen,
													$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
													$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser())) : $elm$parser$Parser$Advanced$oneOf(
												_List_fromArray(
													[
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															function (_v9) {
																return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
															},
															$dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															completeOrMergeUnorderedListBlock(revStmts),
															A2(
																$elm$parser$Parser$Advanced$keeper,
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
																	$elm$parser$Parser$Advanced$symbol(
																		A2(
																			$elm$parser$Parser$Advanced$Token,
																			A2($elm$core$String$repeat, intended, ' '),
																			$elm$parser$Parser$ExpectingSymbol('Indentation')))),
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
																	$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$andThen,
															$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
															$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()))
													]));
										case 'OrderedListBlock':
											var _v12 = _v3.a;
											var _v13 = _v3.b;
											var _v14 = _v13.a;
											var tight = _v14.a;
											var intended = _v14.b;
											var marker = _v14.c;
											var order = _v14.d;
											var closeListItems = _v14.e;
											var openListItem = _v14.f;
											var rest = _v13.b;
											var completeOrMergeUnorderedListBlockBlankLine = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															rawBlocks: A2(
																$elm$core$List$cons,
																$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
																A2(
																	$elm$core$List$cons,
																	A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
																	rest))
														});
												});
											var completeOrMergeUnorderedListBlock = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															rawBlocks: A2(
																$elm$core$List$cons,
																A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
																rest)
														});
												});
											return ($elm$core$String$trim(openListItem) === '') ? A2(
												$elm$parser$Parser$Advanced$map,
												function (block) {
													return $elm$parser$Parser$Advanced$Loop(block);
												},
												A2(
													$elm$parser$Parser$Advanced$andThen,
													$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
													$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser())) : $elm$parser$Parser$Advanced$oneOf(
												_List_fromArray(
													[
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															function (_v15) {
																return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
															},
															$dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															completeOrMergeUnorderedListBlock(revStmts),
															A2(
																$elm$parser$Parser$Advanced$keeper,
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
																	$elm$parser$Parser$Advanced$symbol(
																		A2(
																			$elm$parser$Parser$Advanced$Token,
																			A2($elm$core$String$repeat, intended, ' '),
																			$elm$parser$Parser$ExpectingSymbol('Indentation')))),
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
																	$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$andThen,
															$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
															$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()))
													]));
										default:
											break _v3$6;
									}
								} else {
									break _v3$6;
								}
							default:
								break _v3$6;
						}
					} else {
						break _v3$6;
					}
				}
				return A2(
					$elm$parser$Parser$Advanced$map,
					function (block) {
						return $elm$parser$Parser$Advanced$Loop(block);
					},
					A2(
						$elm$parser$Parser$Advanced$andThen,
						$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
						$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()));
			}(),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (block) {
					return $elm$parser$Parser$Advanced$Loop(block);
				},
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
					$dillonkearns$elm_markdown$Markdown$Parser$openBlockOrParagraphParser))
			]));
};
var $dillonkearns$elm_markdown$Markdown$Parser$textNodeToBlocks = function (textNodeValue) {
	return A2(
		$elm$core$Result$withDefault,
		_List_Nil,
		$dillonkearns$elm_markdown$Markdown$Parser$parse(textNodeValue));
};
var $dillonkearns$elm_markdown$Markdown$Parser$xmlNodeToHtmlNode = function (xmlNode) {
	switch (xmlNode.$) {
		case 'Text':
			var innerText = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(innerText)));
		case 'Element':
			var tag = xmlNode.a;
			var attributes = xmlNode.b;
			var children = xmlNode.c;
			var _v1 = $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks(children);
			if (_v1.$ === 'Ok') {
				var parsedChildren = _v1.a;
				return $elm$parser$Parser$Advanced$succeed(
					$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
						A3($dillonkearns$elm_markdown$Markdown$Block$HtmlElement, tag, attributes, parsedChildren)));
			} else {
				var err = _v1.a;
				return $elm$parser$Parser$Advanced$problem(err);
			}
		case 'Comment':
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					$dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string)));
		case 'Cdata':
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					$dillonkearns$elm_markdown$Markdown$Block$Cdata(string)));
		case 'ProcessingInstruction':
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					$dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string)));
		default:
			var declarationType = xmlNode.a;
			var content = xmlNode.b;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content)));
	}
};
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser() {
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		$dillonkearns$elm_markdown$Markdown$Parser$completeBlocks,
		A2(
			$elm$parser$Parser$Advanced$loop,
			{linkReferenceDefinitions: _List_Nil, rawBlocks: _List_Nil},
			$dillonkearns$elm_markdown$Markdown$Parser$stepRawBlock));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$dillonkearns$elm_markdown$Markdown$Parser$blankLine,
				$dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$indentedCodeBlock,
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v40) {
					return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(false),
				$dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(false),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
				$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser()
			]));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$dillonkearns$elm_markdown$Markdown$Parser$blankLine,
				$dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Parser$setextLineParser),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v39) {
					return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(true),
				$dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(true),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
				$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser(),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Parser$tableDelimiterInOpenParagraph)
			]));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$dillonkearns$elm_markdown$Markdown$Parser$blankLine,
				$dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v38) {
					return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(false),
				$dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(false),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
				$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser()
			]));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser() {
	return A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$xmlNodeToHtmlNode, $dillonkearns$elm_markdown$HtmlParser$html);
}
try {
	var $dillonkearns$elm_markdown$Markdown$Parser$rawBlockParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$rawBlockParser;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockNotAfterOpenBlockOrParagraphParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockNotAfterOpenBlockOrParagraphParser;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterOpenBlockOrParagraphParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterOpenBlockOrParagraphParser;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterList = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterList;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$htmlParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$htmlParser;
	};
} catch ($) {
	throw 'Some top-level definitions from `Markdown.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    childToBlocks\n  │     ↓\n  │    rawBlockParser\n  │     ↓\n  │    completeBlocks\n  │     ↓\n  │    completeOrMergeBlocks\n  │     ↓\n  │    mergeableBlockNotAfterOpenBlockOrParagraphParser\n  │     ↓\n  │    mergeableBlockAfterOpenBlockOrParagraphParser\n  │     ↓\n  │    mergeableBlockAfterList\n  │     ↓\n  │    htmlParser\n  │     ↓\n  │    inlineParseHelper\n  │     ↓\n  │    mapInline\n  │     ↓\n  │    nodeToRawBlock\n  │     ↓\n  │    nodesToBlocks\n  │     ↓\n  │    nodesToBlocksHelp\n  │     ↓\n  │    parse\n  │     ↓\n  │    parseAllInlines\n  │     ↓\n  │    parseAllInlinesHelp\n  │     ↓\n  │    parseHeaderInlines\n  │     ↓\n  │    parseInlines\n  │     ↓\n  │    parseRawInline\n  │     ↓\n  │    parseRowInlines\n  │     ↓\n  │    stepRawBlock\n  │     ↓\n  │    textNodeToBlocks\n  │     ↓\n  │    xmlNodeToHtmlNode\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $dillonkearns$elm_markdown$Markdown$Renderer$combineResults = A2(
	$elm$core$List$foldr,
	$elm$core$Result$map2($elm$core$List$cons),
	$elm$core$Result$Ok(_List_Nil));
var $dillonkearns$elm_markdown$Markdown$Block$foldl = F3(
	function (_function, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var block = list.a;
				var remainingBlocks = list.b;
				switch (block.$) {
					case 'HtmlBlock':
						var html = block.a;
						if (html.$ === 'HtmlElement') {
							var children = html.c;
							var $temp$function = _function,
								$temp$acc = A2(_function, block, acc),
								$temp$list = _Utils_ap(children, remainingBlocks);
							_function = $temp$function;
							acc = $temp$acc;
							list = $temp$list;
							continue foldl;
						} else {
							var $temp$function = _function,
								$temp$acc = A2(_function, block, acc),
								$temp$list = remainingBlocks;
							_function = $temp$function;
							acc = $temp$acc;
							list = $temp$list;
							continue foldl;
						}
					case 'UnorderedList':
						var tight = block.a;
						var blocks = block.b;
						var childBlocks = A2(
							$elm$core$List$concatMap,
							function (_v3) {
								var children = _v3.b;
								return children;
							},
							blocks);
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = _Utils_ap(childBlocks, remainingBlocks);
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'OrderedList':
						var _int = block.b;
						var blocks = block.c;
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = _Utils_ap(
							$elm$core$List$concat(blocks),
							remainingBlocks);
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'BlockQuote':
						var blocks = block.a;
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = _Utils_ap(blocks, remainingBlocks);
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'Heading':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'Paragraph':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'Table':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'CodeBlock':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					default:
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText = function (block) {
	switch (block.$) {
		case 'Paragraph':
			var inlines = block.a;
			return $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines);
		case 'HtmlBlock':
			var html = block.a;
			if (html.$ === 'HtmlElement') {
				var blocks = html.c;
				return A3(
					$dillonkearns$elm_markdown$Markdown$Block$foldl,
					F2(
						function (nestedBlock, soFar) {
							return _Utils_ap(
								soFar,
								$dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText(nestedBlock));
						}),
					'',
					blocks);
			} else {
				return '';
			}
		case 'UnorderedList':
			var tight = block.a;
			var items = block.b;
			return A2(
				$elm$core$String$join,
				'\n',
				A2(
					$elm$core$List$map,
					function (_v4) {
						var task = _v4.a;
						var blocks = _v4.b;
						return A2(
							$elm$core$String$join,
							'\n',
							A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
					},
					items));
		case 'OrderedList':
			var tight = block.a;
			var _int = block.b;
			var items = block.c;
			return A2(
				$elm$core$String$join,
				'\n',
				A2(
					$elm$core$List$map,
					function (blocks) {
						return A2(
							$elm$core$String$join,
							'\n',
							A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
					},
					items));
		case 'BlockQuote':
			var blocks = block.a;
			return A2(
				$elm$core$String$join,
				'\n',
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
		case 'Heading':
			var headingLevel = block.a;
			var inlines = block.b;
			return $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines);
		case 'Table':
			var header = block.a;
			var rows = block.b;
			return A2(
				$elm$core$String$join,
				'\n',
				$elm$core$List$concat(
					_List_fromArray(
						[
							A2(
							$elm$core$List$map,
							$dillonkearns$elm_markdown$Markdown$Block$extractInlineText,
							A2(
								$elm$core$List$map,
								function ($) {
									return $.label;
								},
								header)),
							$elm$core$List$concat(
							A2(
								$elm$core$List$map,
								$elm$core$List$map($dillonkearns$elm_markdown$Markdown$Block$extractInlineText),
								rows))
						])));
		case 'CodeBlock':
			var body = block.a.body;
			return body;
		default:
			return '';
	}
};
var $dillonkearns$elm_markdown$Markdown$Block$extractInlineText = function (inlines) {
	return A3($elm$core$List$foldl, $dillonkearns$elm_markdown$Markdown$Block$extractTextHelp, '', inlines);
};
var $dillonkearns$elm_markdown$Markdown$Block$extractTextHelp = F2(
	function (inline, text) {
		switch (inline.$) {
			case 'Text':
				var str = inline.a;
				return _Utils_ap(text, str);
			case 'HardLineBreak':
				return text + ' ';
			case 'CodeSpan':
				var str = inline.a;
				return _Utils_ap(text, str);
			case 'Link':
				var inlines = inline.c;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			case 'Image':
				var inlines = inline.c;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			case 'HtmlInline':
				var html = inline.a;
				if (html.$ === 'HtmlElement') {
					var blocks = html.c;
					return A3(
						$dillonkearns$elm_markdown$Markdown$Block$foldl,
						F2(
							function (block, soFar) {
								return _Utils_ap(
									soFar,
									$dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText(block));
							}),
						text,
						blocks);
				} else {
					return text;
				}
			case 'Strong':
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			case 'Emphasis':
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			default:
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHtml = F5(
	function (tagName, attributes, children, _v0, renderedChildren) {
		var htmlRenderer = _v0.a;
		return A2(
			$elm$core$Result$andThen,
			function (okChildren) {
				return A2(
					$elm$core$Result$map,
					function (myRenderer) {
						return myRenderer(okChildren);
					},
					A3(htmlRenderer, tagName, attributes, children));
			},
			$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(renderedChildren));
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$foldThing = F3(
	function (renderer, topLevelInline, soFar) {
		var _v12 = A2($dillonkearns$elm_markdown$Markdown$Renderer$renderSingleInline, renderer, topLevelInline);
		if (_v12.$ === 'Just') {
			var inline = _v12.a;
			return A2($elm$core$List$cons, inline, soFar);
		} else {
			return soFar;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHelper = F2(
	function (renderer, blocks) {
		return A2(
			$elm$core$List$filterMap,
			$dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle(renderer),
			blocks);
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle = function (renderer) {
	return function (block) {
		switch (block.$) {
			case 'Heading':
				var level = block.a;
				var content = block.b;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						function (children) {
							return renderer.heading(
								{
									children: children,
									level: level,
									rawText: $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(content)
								});
						},
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content)));
			case 'Paragraph':
				var content = block.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.paragraph,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content)));
			case 'HtmlBlock':
				var html = block.a;
				if (html.$ === 'HtmlElement') {
					var tag = html.a;
					var attributes = html.b;
					var children = html.c;
					return $elm$core$Maybe$Just(
						A4($dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode, renderer, tag, attributes, children));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			case 'UnorderedList':
				var tight = block.a;
				var items = block.b;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						function (listItems) {
							return renderer.unorderedList(
								A2(
									$elm$core$List$map,
									function (_v7) {
										var task = _v7.a;
										var children = _v7.b;
										return A2(
											$dillonkearns$elm_markdown$Markdown$Block$ListItem,
											task,
											$elm$core$List$concat(children));
									},
									listItems));
						},
						$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
							A2(
								$elm$core$List$map,
								function (_v4) {
									var task = _v4.a;
									var children = _v4.b;
									return A2(
										$elm$core$Result$map,
										$dillonkearns$elm_markdown$Markdown$Block$ListItem(task),
										$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
											function (blocks) {
												return A2(
													$elm$core$List$filterMap,
													function (listItemBlock) {
														var _v5 = _Utils_Tuple2(tight, listItemBlock);
														if ((_v5.a.$ === 'Tight') && (_v5.b.$ === 'Paragraph')) {
															var _v6 = _v5.a;
															var content = _v5.b.a;
															return $elm$core$Maybe$Just(
																A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content));
														} else {
															return A2(
																$elm$core$Maybe$map,
																$elm$core$Result$map($elm$core$List$singleton),
																A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle, renderer, listItemBlock));
														}
													},
													blocks);
											}(children)));
								},
								items))));
			case 'OrderedList':
				var tight = block.a;
				var startingIndex = block.b;
				var items = block.c;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						function (listItems) {
							return A2(
								renderer.orderedList,
								startingIndex,
								A2(
									$elm$core$List$map,
									function (children) {
										return $elm$core$List$concat(children);
									},
									listItems));
						},
						$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
							A2(
								$elm$core$List$map,
								function (itemsblocks) {
									return $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
										function (blocks) {
											return A2(
												$elm$core$List$filterMap,
												function (listItemBlock) {
													var _v8 = _Utils_Tuple2(tight, listItemBlock);
													if ((_v8.a.$ === 'Tight') && (_v8.b.$ === 'Paragraph')) {
														var _v9 = _v8.a;
														var content = _v8.b.a;
														return $elm$core$Maybe$Just(
															A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content));
													} else {
														return A2(
															$elm$core$Maybe$map,
															$elm$core$Result$map($elm$core$List$singleton),
															A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle, renderer, listItemBlock));
													}
												},
												blocks);
										}(itemsblocks));
								},
								items))));
			case 'CodeBlock':
				var codeBlock = block.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.codeBlock(codeBlock)));
			case 'ThematicBreak':
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(renderer.thematicBreak));
			case 'BlockQuote':
				var nestedBlocks = block.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.blockQuote,
						$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
							A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelper, renderer, nestedBlocks))));
			default:
				var header = block.a;
				var rows = block.b;
				var renderedHeaderCells = $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
					A2(
						$elm$core$List$map,
						function (_v11) {
							var label = _v11.label;
							var alignment = _v11.alignment;
							return A2(
								$elm$core$Result$map,
								$elm$core$Tuple$pair(alignment),
								A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, label));
						},
						header));
				var renderedHeader = A2(
					$elm$core$Result$map,
					function (listListView) {
						return renderer.tableHeader(
							$elm$core$List$singleton(
								renderer.tableRow(
									A2(
										$elm$core$List$map,
										function (_v10) {
											var maybeAlignment = _v10.a;
											var item = _v10.b;
											return A2(renderer.tableHeaderCell, maybeAlignment, item);
										},
										listListView))));
					},
					renderedHeaderCells);
				var renderedBody = function (r) {
					return $elm$core$List$isEmpty(r) ? _List_Nil : _List_fromArray(
						[
							renderer.tableBody(r)
						]);
				};
				var alignmentForColumn = function (columnIndex) {
					return A2(
						$elm$core$Maybe$andThen,
						function ($) {
							return $.alignment;
						},
						$elm$core$List$head(
							A2($elm$core$List$drop, columnIndex, header)));
				};
				var renderRow = function (cells) {
					return A2(
						$elm$core$Result$map,
						renderer.tableRow,
						A2(
							$elm$core$Result$map,
							$elm$core$List$indexedMap(
								F2(
									function (index, cell) {
										return A2(
											renderer.tableCell,
											alignmentForColumn(index),
											cell);
									})),
							$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
								A2(
									$elm$core$List$map,
									$dillonkearns$elm_markdown$Markdown$Renderer$renderStyled(renderer),
									cells))));
				};
				var renderedRows = $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
					A2($elm$core$List$map, renderRow, rows));
				return $elm$core$Maybe$Just(
					A3(
						$elm$core$Result$map2,
						F2(
							function (h, r) {
								return renderer.table(
									A2(
										$elm$core$List$cons,
										h,
										renderedBody(r)));
							}),
						renderedHeader,
						renderedRows));
		}
	};
};
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode = F4(
	function (renderer, tag, attributes, children) {
		return A5(
			$dillonkearns$elm_markdown$Markdown$Renderer$renderHtml,
			tag,
			attributes,
			children,
			renderer.html,
			A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelper, renderer, children));
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderSingleInline = F2(
	function (renderer, inline) {
		switch (inline.$) {
			case 'Strong':
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.strong,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 'Emphasis':
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.emphasis,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 'Strikethrough':
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.strikethrough,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 'Image':
				var src = inline.a;
				var title = inline.b;
				var children = inline.c;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.image(
							{
								alt: $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(children),
								src: src,
								title: title
							})));
			case 'Text':
				var string = inline.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.text(string)));
			case 'CodeSpan':
				var string = inline.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.codeSpan(string)));
			case 'Link':
				var destination = inline.a;
				var title = inline.b;
				var inlines = inline.c;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$andThen,
						function (children) {
							return $elm$core$Result$Ok(
								A2(
									renderer.link,
									{destination: destination, title: title},
									children));
						},
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, inlines)));
			case 'HardLineBreak':
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(renderer.hardLineBreak));
			default:
				var html = inline.a;
				if (html.$ === 'HtmlElement') {
					var tag = html.a;
					var attributes = html.b;
					var children = html.c;
					return $elm$core$Maybe$Just(
						A4($dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode, renderer, tag, attributes, children));
				} else {
					return $elm$core$Maybe$Nothing;
				}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderStyled = F2(
	function (renderer, styledStrings) {
		return $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
			A3(
				$elm$core$List$foldr,
				$dillonkearns$elm_markdown$Markdown$Renderer$foldThing(renderer),
				_List_Nil,
				styledStrings));
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$render = F2(
	function (renderer, ast) {
		return $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
			A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelper, renderer, ast));
	});
var $elm$html$Html$Attributes$align = $elm$html$Html$Attributes$stringProperty('align');
var $elm$html$Html$blockquote = _VirtualDom_node('blockquote');
var $elm$html$Html$br = _VirtualDom_node('br');
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$checked = $elm$html$Html$Attributes$boolProperty('checked');
var $elm$html$Html$del = _VirtualDom_node('del');
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $elm$html$Html$em = _VirtualDom_node('em');
var $elm$html$Html$h2 = _VirtualDom_node('h2');
var $elm$html$Html$h3 = _VirtualDom_node('h3');
var $elm$html$Html$h4 = _VirtualDom_node('h4');
var $elm$html$Html$h6 = _VirtualDom_node('h6');
var $elm$html$Html$hr = _VirtualDom_node('hr');
var $elm$html$Html$input = _VirtualDom_node('input');
var $elm$html$Html$ol = _VirtualDom_node('ol');
var $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer = function (a) {
	return {$: 'HtmlRenderer', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Html$resultOr = F2(
	function (ra, rb) {
		if (ra.$ === 'Err') {
			var singleError = ra.a;
			if (rb.$ === 'Ok') {
				var okValue = rb.a;
				return $elm$core$Result$Ok(okValue);
			} else {
				var errorsSoFar = rb.a;
				return $elm$core$Result$Err(
					A2($elm$core$List$cons, singleError, errorsSoFar));
			}
		} else {
			var okValue = ra.a;
			return $elm$core$Result$Ok(okValue);
		}
	});
var $dillonkearns$elm_markdown$Markdown$Html$attributesToString = function (attributes) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$map,
			function (_v0) {
				var name = _v0.name;
				var value = _v0.value;
				return name + ('=\"' + (value + '\"'));
			},
			attributes));
};
var $dillonkearns$elm_markdown$Markdown$Html$tagToString = F2(
	function (tagName, attributes) {
		return $elm$core$List$isEmpty(attributes) ? ('<' + (tagName + '>')) : ('<' + (tagName + (' ' + ($dillonkearns$elm_markdown$Markdown$Html$attributesToString(attributes) + '>'))));
	});
var $dillonkearns$elm_markdown$Markdown$Html$oneOf = function (decoders) {
	var unwrappedDecoders = A2(
		$elm$core$List$map,
		function (_v1) {
			var rawDecoder = _v1.a;
			return rawDecoder;
		},
		decoders);
	return function (rawDecoder) {
		return $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer(
			F3(
				function (tagName, attributes, innerBlocks) {
					return A2(
						$elm$core$Result$mapError,
						function (errors) {
							if (!errors.b) {
								return 'Ran into a oneOf with no possibilities!';
							} else {
								if (!errors.b.b) {
									var singleError = errors.a;
									return 'Problem with the given value:\n\n' + (A2($dillonkearns$elm_markdown$Markdown$Html$tagToString, tagName, attributes) + ('\n\n' + (singleError + '\n')));
								} else {
									return 'oneOf failed parsing this value:\n    ' + (A2($dillonkearns$elm_markdown$Markdown$Html$tagToString, tagName, attributes) + ('\n\nParsing failed in the following 2 ways:\n\n\n' + (A2(
										$elm$core$String$join,
										'\n\n',
										A2(
											$elm$core$List$indexedMap,
											F2(
												function (index, error) {
													return '(' + ($elm$core$String$fromInt(index + 1) + (') ' + error));
												}),
											errors)) + '\n')));
								}
							}
						},
						A3(rawDecoder, tagName, attributes, innerBlocks));
				}));
	}(
		A3(
			$elm$core$List$foldl,
			F2(
				function (decoder, soFar) {
					return F3(
						function (tagName, attributes, children) {
							return A2(
								$dillonkearns$elm_markdown$Markdown$Html$resultOr,
								A3(decoder, tagName, attributes, children),
								A3(soFar, tagName, attributes, children));
						});
				}),
			F3(
				function (tagName, attributes, children) {
					return $elm$core$Result$Err(_List_Nil);
				}),
			unwrappedDecoders));
};
var $elm$html$Html$Attributes$start = function (n) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'start',
		$elm$core$String$fromInt(n));
};
var $elm$html$Html$strong = _VirtualDom_node('strong');
var $elm$html$Html$table = _VirtualDom_node('table');
var $elm$html$Html$tbody = _VirtualDom_node('tbody');
var $elm$html$Html$td = _VirtualDom_node('td');
var $elm$html$Html$th = _VirtualDom_node('th');
var $elm$html$Html$thead = _VirtualDom_node('thead');
var $elm$html$Html$tr = _VirtualDom_node('tr');
var $elm$core$String$words = _String_words;
var $dillonkearns$elm_markdown$Markdown$Renderer$defaultHtmlRenderer = {
	blockQuote: $elm$html$Html$blockquote(_List_Nil),
	codeBlock: function (_v0) {
		var body = _v0.body;
		var language = _v0.language;
		var classes = function () {
			var _v1 = A2($elm$core$Maybe$map, $elm$core$String$words, language);
			if ((_v1.$ === 'Just') && _v1.a.b) {
				var _v2 = _v1.a;
				var actualLanguage = _v2.a;
				return _List_fromArray(
					[
						$elm$html$Html$Attributes$class('language-' + actualLanguage)
					]);
			} else {
				return _List_Nil;
			}
		}();
		return A2(
			$elm$html$Html$pre,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$code,
					classes,
					_List_fromArray(
						[
							$elm$html$Html$text(body)
						]))
				]));
	},
	codeSpan: function (content) {
		return A2(
			$elm$html$Html$code,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text(content)
				]));
	},
	emphasis: function (children) {
		return A2($elm$html$Html$em, _List_Nil, children);
	},
	hardLineBreak: A2($elm$html$Html$br, _List_Nil, _List_Nil),
	heading: function (_v3) {
		var level = _v3.level;
		var children = _v3.children;
		switch (level.$) {
			case 'H1':
				return A2($elm$html$Html$h1, _List_Nil, children);
			case 'H2':
				return A2($elm$html$Html$h2, _List_Nil, children);
			case 'H3':
				return A2($elm$html$Html$h3, _List_Nil, children);
			case 'H4':
				return A2($elm$html$Html$h4, _List_Nil, children);
			case 'H5':
				return A2($elm$html$Html$h5, _List_Nil, children);
			default:
				return A2($elm$html$Html$h6, _List_Nil, children);
		}
	},
	html: $dillonkearns$elm_markdown$Markdown$Html$oneOf(_List_Nil),
	image: function (imageInfo) {
		var _v5 = imageInfo.title;
		if (_v5.$ === 'Just') {
			var title = _v5.a;
			return A2(
				$elm$html$Html$img,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$src(imageInfo.src),
						$elm$html$Html$Attributes$alt(imageInfo.alt),
						$elm$html$Html$Attributes$title(title)
					]),
				_List_Nil);
		} else {
			return A2(
				$elm$html$Html$img,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$src(imageInfo.src),
						$elm$html$Html$Attributes$alt(imageInfo.alt)
					]),
				_List_Nil);
		}
	},
	link: F2(
		function (link, content) {
			var _v6 = link.title;
			if (_v6.$ === 'Just') {
				var title = _v6.a;
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(link.destination),
							$elm$html$Html$Attributes$title(title)
						]),
					content);
			} else {
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(link.destination)
						]),
					content);
			}
		}),
	orderedList: F2(
		function (startingIndex, items) {
			return A2(
				$elm$html$Html$ol,
				function () {
					if (startingIndex === 1) {
						return _List_fromArray(
							[
								$elm$html$Html$Attributes$start(startingIndex)
							]);
					} else {
						return _List_Nil;
					}
				}(),
				A2(
					$elm$core$List$map,
					function (itemBlocks) {
						return A2($elm$html$Html$li, _List_Nil, itemBlocks);
					},
					items));
		}),
	paragraph: $elm$html$Html$p(_List_Nil),
	strikethrough: function (children) {
		return A2($elm$html$Html$del, _List_Nil, children);
	},
	strong: function (children) {
		return A2($elm$html$Html$strong, _List_Nil, children);
	},
	table: $elm$html$Html$table(_List_Nil),
	tableBody: $elm$html$Html$tbody(_List_Nil),
	tableCell: function (maybeAlignment) {
		var attrs = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$List$singleton,
				A2(
					$elm$core$Maybe$map,
					$elm$html$Html$Attributes$align,
					A2(
						$elm$core$Maybe$map,
						function (alignment) {
							switch (alignment.$) {
								case 'AlignLeft':
									return 'left';
								case 'AlignCenter':
									return 'center';
								default:
									return 'right';
							}
						},
						maybeAlignment))));
		return $elm$html$Html$td(attrs);
	},
	tableHeader: $elm$html$Html$thead(_List_Nil),
	tableHeaderCell: function (maybeAlignment) {
		var attrs = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$List$singleton,
				A2(
					$elm$core$Maybe$map,
					$elm$html$Html$Attributes$align,
					A2(
						$elm$core$Maybe$map,
						function (alignment) {
							switch (alignment.$) {
								case 'AlignLeft':
									return 'left';
								case 'AlignCenter':
									return 'center';
								default:
									return 'right';
							}
						},
						maybeAlignment))));
		return $elm$html$Html$th(attrs);
	},
	tableRow: $elm$html$Html$tr(_List_Nil),
	text: $elm$html$Html$text,
	thematicBreak: A2($elm$html$Html$hr, _List_Nil, _List_Nil),
	unorderedList: function (items) {
		return A2(
			$elm$html$Html$ul,
			_List_Nil,
			A2(
				$elm$core$List$map,
				function (item) {
					var task = item.a;
					var children = item.b;
					var checkbox = function () {
						switch (task.$) {
							case 'NoTask':
								return $elm$html$Html$text('');
							case 'IncompleteTask':
								return A2(
									$elm$html$Html$input,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$disabled(true),
											$elm$html$Html$Attributes$checked(false),
											$elm$html$Html$Attributes$type_('checkbox')
										]),
									_List_Nil);
							default:
								return A2(
									$elm$html$Html$input,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$disabled(true),
											$elm$html$Html$Attributes$checked(true),
											$elm$html$Html$Attributes$type_('checkbox')
										]),
									_List_Nil);
						}
					}();
					return A2(
						$elm$html$Html$li,
						_List_Nil,
						A2($elm$core$List$cons, checkbox, children));
				},
				items));
	}
};
var $author$project$Views$Icon$exclamation = $author$project$Views$Icon$icon('exclamation');
var $author$project$Views$Markdown$renderHint = F2(
	function (level, content) {
		var makeIcon = function (icon) {
			return A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('fs-4'),
						A2($elm$html$Html$Attributes$style, 'opacity', '.8'),
						A2($elm$html$Html$Attributes$style, 'line-height', '0')
					]),
				_List_fromArray(
					[icon]));
		};
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('d-flex justify-content-between align-items-start gap-2 alert alert-' + level)
				]),
			_List_fromArray(
				[
					function () {
					switch (level) {
						case 'danger':
							return makeIcon($author$project$Views$Icon$exclamation);
						case 'info':
							return makeIcon($author$project$Views$Icon$info);
						case 'warning':
							return makeIcon($author$project$Views$Icon$warning);
						default:
							return $elm$html$Html$text('');
					}
				}(),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('flex-fill')
						]),
					content)
				]));
	});
var $author$project$Views$Markdown$renderImage = function (_v0) {
	var title = _v0.title;
	var src = _v0.src;
	var alt = _v0.alt;
	return A2(
		$elm$html$Html$img,
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					A2($elm$core$Maybe$map, $elm$html$Html$Attributes$title, title),
					$elm$core$Maybe$Just(
					$elm$html$Html$Attributes$src(
						A3($elm$core$String$replace, '../.gitbook/assets/', 'https://raw.githubusercontent.com/MTES-MCT/ecobalyse/docs/.gitbook/assets/', src))),
					$elm$core$Maybe$Just(
					$elm$html$Html$Attributes$alt(alt)),
					$elm$core$Maybe$Just(
					A2($elm$html$Html$Attributes$attribute, 'crossorigin', 'anonymous'))
				])),
		_List_Nil);
};
var $author$project$Data$Gitbook$extractLinkFolder = function (path) {
	var _v0 = A2(
		$elm$core$String$split,
		'/',
		$author$project$Data$Gitbook$pathToString(path));
	if (_v0.b) {
		var folder = _v0.a;
		return (folder === '..') ? _List_Nil : _List_fromArray(
			[folder]);
	} else {
		return _List_Nil;
	}
};
var $author$project$Data$Gitbook$pathPrefixes = _List_fromArray(
	['faq', 'glossaire', 'methodologie']);
var $author$project$Data$Gitbook$publicUrlFromString = function (path) {
	return $author$project$Data$Env$gitbookUrl + ('/' + path);
};
var $author$project$Data$Gitbook$handleMarkdownGitbookLink = F2(
	function (maybePath, link) {
		if (A2(
			$elm$core$List$any,
			function (x) {
				return A2($elm$core$String$startsWith, x, link);
			},
			$author$project$Data$Gitbook$pathPrefixes)) {
			return $author$project$Data$Gitbook$publicUrlFromString(link);
		} else {
			if (A2($elm$core$String$endsWith, '.md', link)) {
				if (maybePath.$ === 'Just') {
					var path = maybePath.a;
					return $author$project$Data$Gitbook$publicUrlFromString(
						A2(
							$elm$core$String$join,
							'/',
							_Utils_ap(
								$author$project$Data$Gitbook$extractLinkFolder(path),
								_List_fromArray(
									[
										A3($elm$core$String$replace, '.md', '', link)
									]))));
				} else {
					return $author$project$Data$Gitbook$publicUrlFromString(link);
				}
			} else {
				return link;
			}
		}
	});
var $author$project$Views$Markdown$siteUrl = 'https://ecobalyse.beta.gouv.fr';
var $author$project$Views$Markdown$renderLink = F2(
	function (maybePath, _v0) {
		var title = _v0.title;
		var destination = _v0.destination;
		var destination_ = A2($author$project$Data$Gitbook$handleMarkdownGitbookLink, maybePath, destination);
		var baseAttrs = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					A2($elm$core$Maybe$map, $elm$html$Html$Attributes$title, title)
				]));
		return A2($elm$core$String$startsWith, $author$project$Views$Markdown$siteUrl, destination_) ? $author$project$Views$Link$internal(
			A2(
				$elm$core$List$cons,
				$elm$html$Html$Attributes$href(
					A3($elm$core$String$replace, $author$project$Views$Markdown$siteUrl, '', destination_)),
				baseAttrs)) : (A2($elm$core$String$startsWith, 'http', destination_) ? $author$project$Views$Link$external(
			A2(
				$elm$core$List$cons,
				$elm$html$Html$Attributes$href(destination_),
				baseAttrs)) : $author$project$Views$Link$internal(
			A2(
				$elm$core$List$cons,
				$elm$html$Html$Attributes$href(destination_),
				baseAttrs)));
	});
var $author$project$Views$Markdown$renderMark = function (style_) {
	return $elm$html$Html$span(
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('mark'),
				A2($elm$html$Html$Attributes$attribute, 'style', style_),
				A2($elm$html$Html$Attributes$style, 'background-color', 'transparent')
			]));
};
var $dillonkearns$elm_markdown$Markdown$Html$tag = F2(
	function (expectedTag, a) {
		return $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer(
			F3(
				function (tagName, attributes, children) {
					return _Utils_eq(tagName, expectedTag) ? $elm$core$Result$Ok(a) : $elm$core$Result$Err('Expected ' + (expectedTag + (' but was ' + tagName)));
				}));
	});
var $dillonkearns$elm_markdown$List$Helpers$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return $elm$core$Maybe$Just(first);
				} else {
					var $temp$predicate = predicate,
						$temp$list = rest;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Html$withAttribute = F2(
	function (attributeName, _v0) {
		var renderer = _v0.a;
		return $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer(
			F3(
				function (tagName, attributes, innerBlocks) {
					return function () {
						var _v1 = A2(
							$dillonkearns$elm_markdown$List$Helpers$find,
							function (_v2) {
								var name = _v2.name;
								var value = _v2.value;
								return _Utils_eq(name, attributeName);
							},
							attributes);
						if (_v1.$ === 'Just') {
							var value = _v1.a.value;
							return $elm$core$Result$map(
								$elm$core$Basics$apR(value));
						} else {
							return function (_v3) {
								return $elm$core$Result$Err('Expecting attribute \"' + (attributeName + '\".'));
							};
						}
					}()(
						A3(renderer, tagName, attributes, innerBlocks));
				}));
	});
var $dillonkearns$elm_markdown$Markdown$Html$withOptionalAttribute = F2(
	function (attributeName, _v0) {
		var renderer = _v0.a;
		return $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer(
			F3(
				function (tagName, attributes, innerBlocks) {
					return function () {
						var _v1 = A2(
							$dillonkearns$elm_markdown$List$Helpers$find,
							function (_v2) {
								var name = _v2.name;
								var value = _v2.value;
								return _Utils_eq(name, attributeName);
							},
							attributes);
						if (_v1.$ === 'Just') {
							var value = _v1.a.value;
							return $elm$core$Result$map(
								$elm$core$Basics$apR(
									$elm$core$Maybe$Just(value)));
						} else {
							return $elm$core$Result$map(
								$elm$core$Basics$apR($elm$core$Maybe$Nothing));
						}
					}()(
						A3(renderer, tagName, attributes, innerBlocks));
				}));
	});
var $author$project$Views$Markdown$renderer = function (maybePath) {
	return _Utils_update(
		$dillonkearns$elm_markdown$Markdown$Renderer$defaultHtmlRenderer,
		{
			html: $dillonkearns$elm_markdown$Markdown$Html$oneOf(
				_List_fromArray(
					[
						A2(
						$dillonkearns$elm_markdown$Markdown$Html$withAttribute,
						'level',
						A2($dillonkearns$elm_markdown$Markdown$Html$tag, 'hint', $author$project$Views$Markdown$renderHint)),
						A2(
						$dillonkearns$elm_markdown$Markdown$Html$withAttribute,
						'style',
						A2($dillonkearns$elm_markdown$Markdown$Html$tag, 'mark', $author$project$Views$Markdown$renderMark)),
						A2(
						$dillonkearns$elm_markdown$Markdown$Html$withOptionalAttribute,
						'title',
						A2(
							$dillonkearns$elm_markdown$Markdown$Html$withAttribute,
							'href',
							A2(
								$dillonkearns$elm_markdown$Markdown$Html$tag,
								'a',
								F2(
									function (href, title) {
										return A2(
											$author$project$Views$Markdown$renderLink,
											maybePath,
											{destination: href, title: title});
									})))),
						A2(
						$dillonkearns$elm_markdown$Markdown$Html$tag,
						'code',
						$elm$html$Html$code(_List_Nil)),
						A2(
						$dillonkearns$elm_markdown$Markdown$Html$tag,
						'em',
						$elm$html$Html$em(_List_Nil)),
						A2(
						$dillonkearns$elm_markdown$Markdown$Html$tag,
						'p',
						$elm$html$Html$p(
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('mb-1')
								])))
					])),
			image: $author$project$Views$Markdown$renderImage,
			link: $author$project$Views$Markdown$renderLink(maybePath)
		});
};
var $author$project$Views$Markdown$parse = function (content) {
	var _v0 = function () {
		if (content.$ === 'Simple') {
			var string = content.a;
			return _Utils_Tuple2(string, $elm$core$Maybe$Nothing);
		} else {
			var page = content.a;
			return _Utils_Tuple2(
				page.markdown,
				$elm$core$Maybe$Just(page.path));
		}
	}();
	var markdown = _v0.a;
	var path = _v0.b;
	return A2(
		$elm$core$Result$andThen,
		$dillonkearns$elm_markdown$Markdown$Renderer$render(
			$author$project$Views$Markdown$renderer(path)),
		A2(
			$elm$core$Result$mapError,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$map($dillonkearns$elm_markdown$Markdown$Parser$deadEndToString),
				$elm$core$String$join('\n')),
			$dillonkearns$elm_markdown$Markdown$Parser$parse(
				$author$project$Views$Markdown$clean(markdown))));
};
var $author$project$Views$Alert$preformatted = function (config) {
	return $author$project$Views$Alert$simple(
		_Utils_update(
			config,
			{
				content: _List_fromArray(
					[
						A2(
						$elm$html$Html$pre,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('fs-7 mb-0')
							]),
						config.content)
					])
			}));
};
var $author$project$Views$Markdown$view = F2(
	function (attrs, content) {
		var _v0 = $author$project$Views$Markdown$parse(content);
		if (_v0.$ === 'Ok') {
			var rendered = _v0.a;
			return A2(
				$elm$html$Html$div,
				A2(
					$elm$core$List$cons,
					$elm$html$Html$Attributes$class('Markdown bottomed-paragraphs'),
					attrs),
				rendered);
		} else {
			var errors = _v0.a;
			return $author$project$Views$Alert$preformatted(
				{
					close: $elm$core$Maybe$Nothing,
					content: _List_fromArray(
						[
							$elm$html$Html$text(errors)
						]),
					level: $author$project$Views$Alert$Danger,
					title: $elm$core$Maybe$Just('Des erreurs ont été rencontrées')
				});
		}
	});
var $author$project$Views$Markdown$simple = F2(
	function (attrs, markdown) {
		return A2(
			$author$project$Views$Markdown$view,
			attrs,
			$author$project$Views$Markdown$Simple(markdown));
	});
var $author$project$Page$Api$view = F2(
	function (session, _v0) {
		return _Utils_Tuple2(
			'API',
			_List_fromArray(
				[
					A2(
					$author$project$Views$Container$centered,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('pb-5')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$h1,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('mb-3')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('API Ecobalyse')
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('row')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('col-xl-8')
										]),
									_List_fromArray(
										[
											$author$project$Views$Alert$simple(
											{
												close: $elm$core$Maybe$Nothing,
												content: _List_fromArray(
													[
														A2(
														$elm$html$Html$div,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class('fs-7')
															]),
														_List_fromArray(
															[
																A2($author$project$Views$Markdown$simple, _List_Nil, 'Cette API est en version *alpha*, l\'implémentation et le contrat d\'interface sont susceptibles\n                             de changer à tout moment. Vous êtes vivement invité à **ne pas exploiter cette API en production**.')
															]))
													]),
												level: $author$project$Views$Alert$Info,
												title: $elm$core$Maybe$Nothing
											}),
											A2(
											$elm$html$Html$p,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('fw-bold')
												]),
											_List_fromArray(
												[
													$elm$html$Html$text('L\'API HTTP Ecobalyse permet de calculer les impacts environnementaux des produits textiles.')
												])),
											A2(
											$elm$html$Html$p,
											_List_Nil,
											_List_fromArray(
												[
													$elm$html$Html$text('Elle est accessible à l\'adresse '),
													A2(
													$elm$html$Html$code,
													_List_Nil,
													_List_fromArray(
														[
															$elm$html$Html$text(
															$author$project$Page$Api$getApiServerUrl(session))
														])),
													$elm$html$Html$text(' et '),
													A2(
													$elm$html$Html$a,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$href(
															$author$project$Page$Api$getApiServerUrl(session)),
															$elm$html$Html$Attributes$target('_blank')
														]),
													_List_fromArray(
														[
															$elm$html$Html$text('documentée')
														])),
													$elm$html$Html$text(' au format '),
													A2(
													$elm$html$Html$a,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$href('https://swagger.io/specification/'),
															$elm$html$Html$Attributes$target('_blank')
														]),
													_List_fromArray(
														[
															$elm$html$Html$text('OpenAPI')
														])),
													$elm$html$Html$text('.')
												])),
											A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('height-auto')
												]),
											_List_fromArray(
												[
													$author$project$Page$Api$apiBrowser(session)
												]))
										])),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('col-xl-4')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('card')
												]),
											_List_fromArray(
												[
													A2(
													$elm$html$Html$div,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$class('card-header')
														]),
													_List_fromArray(
														[
															$elm$html$Html$text('Dernières mises à jour')
														])),
													A2(
													$elm$html$Html$ul,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$class('list-group list-group-flush')
														]),
													A2(
														$elm$core$List$map,
														function (_v1) {
															var date = _v1.date;
															var level = _v1.level;
															var md = _v1.md;
															return A2(
																$elm$html$Html$li,
																_List_fromArray(
																	[
																		$elm$html$Html$Attributes$class('list-group-item')
																	]),
																_List_fromArray(
																	[
																		A2(
																		$elm$html$Html$div,
																		_List_fromArray(
																			[
																				$elm$html$Html$Attributes$class('d-flex justify-content-between align-items-center mb-1')
																			]),
																		_List_fromArray(
																			[
																				$elm$html$Html$text(date),
																				A2(
																				$elm$html$Html$span,
																				_List_fromArray(
																					[
																						$elm$html$Html$Attributes$class('badge'),
																						$elm$html$Html$Attributes$classList(
																						_List_fromArray(
																							[
																								_Utils_Tuple2('bg-danger', level === 'major'),
																								_Utils_Tuple2('bg-info', level !== 'major')
																							]))
																					]),
																				_List_fromArray(
																					[
																						$elm$html$Html$text(level)
																					]))
																			])),
																		A2(
																		$author$project$Views$Markdown$simple,
																		_List_fromArray(
																			[
																				$elm$html$Html$Attributes$class('fs-7')
																			]),
																		md)
																	]));
														},
														$author$project$Page$Api$changelog))
												]))
										]))
								]))
						]))
				]));
	});
var $gingko$time_distance$Time$Distance$I18n$fr = F3(
	function (_v0, tense, distanceId) {
		var withAffix = _v0.withAffix;
		var toStr = $elm$core$String$fromInt;
		var maybeAffix = function (str) {
			var _v2 = _Utils_Tuple2(withAffix, tense);
			if (_v2.a) {
				if (_v2.b.$ === 'Past') {
					var _v3 = _v2.b;
					return 'il y a ' + str;
				} else {
					var _v4 = _v2.b;
					return 'dans ' + str;
				}
			} else {
				return str;
			}
		};
		return maybeAffix(
			function () {
				switch (distanceId.$) {
					case 'LessThanXSeconds':
						var i = distanceId.a;
						return (i === 1) ? 'moins d\'une seconde' : ('menos de ' + (toStr(i) + ' secondes'));
					case 'HalfAMinute':
						return 'une demi-minute';
					case 'LessThanXMinutes':
						var i = distanceId.a;
						return (i === 1) ? 'moins d\'une minute' : ('moins de ' + (toStr(i) + ' minutes'));
					case 'XMinutes':
						var i = distanceId.a;
						return (i === 1) ? '1 minute' : (toStr(i) + ' minutes');
					case 'AboutXHours':
						var i = distanceId.a;
						return (i === 1) ? 'environ une heure' : ('environ ' + (toStr(i) + ' heures'));
					case 'XDays':
						var i = distanceId.a;
						return (i === 1) ? '1 jour' : (toStr(i) + ' jours');
					case 'AboutXMonths':
						var i = distanceId.a;
						return (i === 1) ? 'environ un mois' : ('alrededor ' + (toStr(i) + ' mois'));
					case 'XMonths':
						var i = distanceId.a;
						return (i === 1) ? '1 mois' : (toStr(i) + ' mois');
					case 'AboutXYears':
						var i = distanceId.a;
						return (i === 1) ? 'environ un an' : ('environ ' + (toStr(i) + ' ans'));
					case 'OverXYears':
						var i = distanceId.a;
						return (i === 1) ? 'plus d\'un an' : ('plus de ' + (toStr(i) + ' ans'));
					default:
						var i = distanceId.a;
						return (i === 1) ? 'près d\'un an' : ('près de ' + (toStr(i) + ' ans'));
				}
			}());
	});
var $gingko$time_distance$Time$Distance$Types$Future = {$: 'Future'};
var $gingko$time_distance$Time$Distance$Types$Past = {$: 'Past'};
var $gingko$time_distance$Time$Distance$Types$AboutXHours = function (a) {
	return {$: 'AboutXHours', a: a};
};
var $gingko$time_distance$Time$Distance$Types$LessThanXMinutes = function (a) {
	return {$: 'LessThanXMinutes', a: a};
};
var $gingko$time_distance$Time$Distance$Types$XDays = function (a) {
	return {$: 'XDays', a: a};
};
var $gingko$time_distance$Time$Distance$Types$XMinutes = function (a) {
	return {$: 'XMinutes', a: a};
};
var $gingko$time_distance$Time$Distance$minutes_in_almost_two_days = 2520;
var $gingko$time_distance$Time$Distance$minutes_in_day = 1440;
var $gingko$time_distance$Time$Distance$minutes_in_month = 43200;
var $gingko$time_distance$Time$Distance$minutes_in_two_months = 86400;
var $gingko$time_distance$Time$Distance$Types$AboutXYears = function (a) {
	return {$: 'AboutXYears', a: a};
};
var $gingko$time_distance$Time$Distance$Types$AlmostXYears = function (a) {
	return {$: 'AlmostXYears', a: a};
};
var $gingko$time_distance$Time$Distance$Types$OverXYears = function (a) {
	return {$: 'OverXYears', a: a};
};
var $gingko$time_distance$Time$Distance$Types$XMonths = function (a) {
	return {$: 'XMonths', a: a};
};
var $gingko$time_distance$Time$Distance$upToOneYear = function (minutes) {
	var nearestMonth = $elm$core$Basics$round(minutes / $gingko$time_distance$Time$Distance$minutes_in_month);
	return $gingko$time_distance$Time$Distance$Types$XMonths(nearestMonth);
};
var $gingko$time_distance$Time$Distance$moreThanTwoMonths = function (minutes) {
	var months = (minutes / $gingko$time_distance$Time$Distance$minutes_in_month) | 0;
	if (months < 12) {
		return $gingko$time_distance$Time$Distance$upToOneYear(minutes);
	} else {
		var years = $elm$core$Basics$floor(months / 12);
		var monthsSinceStartOfYear = A2($elm$core$Basics$modBy, 12, months);
		return (monthsSinceStartOfYear < 3) ? $gingko$time_distance$Time$Distance$Types$AboutXYears(years) : ((monthsSinceStartOfYear < 9) ? $gingko$time_distance$Time$Distance$Types$OverXYears(years) : $gingko$time_distance$Time$Distance$Types$AlmostXYears(years + 1));
	}
};
var $gingko$time_distance$Time$Distance$upToOneDay = function (minutes) {
	var hours = $elm$core$Basics$round(minutes / 60);
	return $gingko$time_distance$Time$Distance$Types$AboutXHours(hours);
};
var $gingko$time_distance$Time$Distance$Types$HalfAMinute = {$: 'HalfAMinute'};
var $gingko$time_distance$Time$Distance$Types$LessThanXSeconds = function (a) {
	return {$: 'LessThanXSeconds', a: a};
};
var $gingko$time_distance$Time$Distance$upToOneMinute = function (seconds) {
	return (seconds < 5) ? $gingko$time_distance$Time$Distance$Types$LessThanXSeconds(5) : ((seconds < 10) ? $gingko$time_distance$Time$Distance$Types$LessThanXSeconds(10) : ((seconds < 20) ? $gingko$time_distance$Time$Distance$Types$LessThanXSeconds(20) : ((seconds < 40) ? $gingko$time_distance$Time$Distance$Types$HalfAMinute : ((seconds < 60) ? $gingko$time_distance$Time$Distance$Types$LessThanXMinutes(1) : $gingko$time_distance$Time$Distance$Types$XMinutes(1)))));
};
var $gingko$time_distance$Time$Distance$upToOneMonth = function (minutes) {
	var days = $elm$core$Basics$round(minutes / $gingko$time_distance$Time$Distance$minutes_in_day);
	return $gingko$time_distance$Time$Distance$Types$XDays(days);
};
var $gingko$time_distance$Time$Distance$Types$AboutXMonths = function (a) {
	return {$: 'AboutXMonths', a: a};
};
var $gingko$time_distance$Time$Distance$upToTwoMonths = function (minutes) {
	var months = $elm$core$Basics$round(minutes / $gingko$time_distance$Time$Distance$minutes_in_month);
	return $gingko$time_distance$Time$Distance$Types$AboutXMonths(months);
};
var $gingko$time_distance$Time$Distance$calculateDistance = F3(
	function (includeSeconds, s1, s2) {
		var seconds = ($elm$core$Basics$abs(s2 - s1) / 1000) | 0;
		var minutes = $elm$core$Basics$round(seconds / 60);
		return (includeSeconds && (minutes < 2)) ? $gingko$time_distance$Time$Distance$upToOneMinute(seconds) : ((!minutes) ? $gingko$time_distance$Time$Distance$Types$LessThanXMinutes(1) : ((minutes < 2) ? $gingko$time_distance$Time$Distance$Types$XMinutes(minutes) : ((minutes < 45) ? $gingko$time_distance$Time$Distance$Types$XMinutes(minutes) : ((minutes < 90) ? $gingko$time_distance$Time$Distance$Types$AboutXHours(1) : ((_Utils_cmp(minutes, $gingko$time_distance$Time$Distance$minutes_in_day) < 0) ? $gingko$time_distance$Time$Distance$upToOneDay(minutes) : ((_Utils_cmp(minutes, $gingko$time_distance$Time$Distance$minutes_in_almost_two_days) < 0) ? $gingko$time_distance$Time$Distance$Types$XDays(1) : ((_Utils_cmp(minutes, $gingko$time_distance$Time$Distance$minutes_in_month) < 0) ? $gingko$time_distance$Time$Distance$upToOneMonth(minutes) : ((_Utils_cmp(minutes, $gingko$time_distance$Time$Distance$minutes_in_two_months) < 0) ? $gingko$time_distance$Time$Distance$upToTwoMonths(minutes) : $gingko$time_distance$Time$Distance$moreThanTwoMonths(minutes)))))))));
	});
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $gingko$time_distance$Time$Distance$inWordsWithConfig = F4(
	function (config, locale, otherTime, currentTime) {
		var otherSeconds = $elm$time$Time$posixToMillis(otherTime);
		var currentSeconds = $elm$time$Time$posixToMillis(currentTime);
		var distance = A3($gingko$time_distance$Time$Distance$calculateDistance, true, otherSeconds, currentSeconds);
		var tense = function () {
			var _v0 = A2($elm$core$Basics$compare, currentSeconds, otherSeconds);
			if (_v0.$ === 'GT') {
				return $gingko$time_distance$Time$Distance$Types$Past;
			} else {
				return $gingko$time_distance$Time$Distance$Types$Future;
			}
		}();
		return A3(locale, config, tense, distance);
	});
var $elm$html$Html$Attributes$width = function (n) {
	return A2(
		_VirtualDom_attribute,
		'width',
		$elm$core$String$fromInt(n));
};
var $author$project$Page$Changelog$commitView = F2(
	function (time, commit) {
		var _v0 = A2(
			$elm_community$list_extra$List$Extra$splitAt,
			1,
			A2(
				$elm$core$List$filter,
				A2($elm$core$Basics$composeR, $elm$core$String$isEmpty, $elm$core$Basics$not),
				A2(
					$elm$core$List$map,
					$elm$core$String$trim,
					A2($elm$core$String$split, '\n', commit.message))));
		var first = _v0.a;
		var rest = _v0.b;
		var title = A2(
			$elm$core$Maybe$withDefault,
			'Untitled commit',
			$elm$core$List$head(first));
		return A2(
			$elm$html$Html$tr,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$td,
					_List_Nil,
					_List_fromArray(
						[
							($elm$core$List$length(rest) > 0) ? A2(
							$elm$html$Html$details,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$html$Html$summary,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(title)
										])),
									A2(
									$elm$html$Html$pre,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('ms-3 mt-2 mb-0')
										]),
									_List_fromArray(
										[
											A2(
											$author$project$Views$Markdown$simple,
											_List_Nil,
											A2($elm$core$String$join, '\n', rest))
										]))
								])) : $elm$html$Html$text(title)
						])),
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('text-nowrap')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$img,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$src(commit.authorAvatar),
									$elm$html$Html$Attributes$alt(commit.authorName),
									A2($elm$html$Html$Attributes$attribute, 'crossorigin', 'anonymous'),
									$elm$html$Html$Attributes$width(24),
									$elm$html$Html$Attributes$class('rounded-circle shadow-sm align-top me-2')
								]),
							_List_Nil),
							$elm$html$Html$text(commit.authorName)
						])),
					A2(
					$elm$html$Html$td,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$author$project$Views$Link$external,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('text-decoration-none'),
									$elm$html$Html$Attributes$href('https://github.com/MTES-MCT/ecobalyse/commit/' + commit.sha)
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(
									A4(
										$gingko$time_distance$Time$Distance$inWordsWithConfig,
										{withAffix: true},
										$gingko$time_distance$Time$Distance$I18n$fr,
										commit.date,
										time))
								]))
						]))
				]));
	});
var $author$project$Views$Table$responsiveDefault = F2(
	function (attrs, content) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('DatasetTable table-responsive')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$table,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$Attributes$class('table table-striped table-hover table-responsive mb-0'),
						attrs),
					content)
				]));
	});
var $author$project$Page$Changelog$view = F2(
	function (_v0, model) {
		return _Utils_Tuple2(
			'Changelog',
			_List_fromArray(
				[
					A2(
					$author$project$Views$Container$centered,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('pb-5')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$h1,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('mb-3')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Changelog')
								])),
							function () {
							var _v1 = model.changelog;
							switch (_v1.$) {
								case 'Success':
									var commits = _v1.a;
									return A2(
										$author$project$Views$Table$responsiveDefault,
										_List_Nil,
										_List_fromArray(
											[
												A2(
												$elm$html$Html$thead,
												_List_Nil,
												_List_fromArray(
													[
														A2(
														$elm$html$Html$tr,
														_List_Nil,
														_List_fromArray(
															[
																A2(
																$elm$html$Html$th,
																_List_Nil,
																_List_fromArray(
																	[
																		$elm$html$Html$text('Quoi')
																	])),
																A2(
																$elm$html$Html$th,
																_List_Nil,
																_List_fromArray(
																	[
																		$elm$html$Html$text('Qui')
																	])),
																A2(
																$elm$html$Html$th,
																_List_Nil,
																_List_fromArray(
																	[
																		$elm$html$Html$text('Quand')
																	]))
															]))
													])),
												A2(
												$elm$html$Html$tbody,
												_List_Nil,
												A2(
													$elm$core$List$map,
													$author$project$Page$Changelog$commitView(model.time),
													commits))
											]));
								case 'Failure':
									var error = _v1.a;
									return $author$project$Views$Alert$httpError(error);
								case 'Loading':
									return $author$project$Views$Spinner$view;
								default:
									return $elm$html$Html$text('');
							}
						}()
						]))
				]));
	});
var $author$project$Page$Editorial$view = F2(
	function (_v0, model) {
		var _v1 = model.content;
		switch (_v1.$) {
			case 'Success':
				var content = _v1.a;
				return _Utils_Tuple2(
					A2(
						$elm$core$Maybe$withDefault,
						'Sans titre',
						A2(
							$elm$core$Maybe$andThen,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$String$split('# '),
								$elm_community$list_extra$List$Extra$last),
							$elm$core$List$head(
								A2($elm$core$String$split, '\n', content)))),
					_List_fromArray(
						[
							A2(
							$author$project$Views$Container$centered,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$author$project$Views$Markdown$simple,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('pb-5')
										]),
									content)
								]))
						]));
			case 'Loading':
				return _Utils_Tuple2(
					'Chargement…',
					_List_fromArray(
						[$author$project$Views$Spinner$view]));
			case 'Failure':
				var httpError = _v1.a;
				return _Utils_Tuple2(
					'Erreur de chargement',
					_List_fromArray(
						[
							$author$project$Views$Alert$httpError(httpError)
						]));
			default:
				return _Utils_Tuple2('', _List_Nil);
		}
	});
var $author$project$Page$Food$Simulator$Reset = {$: 'Reset'};
var $author$project$Data$Food$Product$stepToItems = function (step) {
	return A2(
		$elm$core$List$concatMap,
		function (accessor) {
			return accessor(step);
		},
		_List_fromArray(
			[
				function ($) {
				return $.transport;
			},
				function ($) {
				return $.wasteTreatment;
			},
				function ($) {
				return $.energy;
			},
				function ($) {
				return $.processing;
			},
				function ($) {
				return $.material;
			}
			]));
};
var $author$project$Data$Food$Product$getStepImpact = F2(
	function (trigram, step) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (item, total) {
					var impact = $author$project$Data$Unit$impactToFloat(
						A2($author$project$Data$Impact$getImpact, trigram, item.process.impacts));
					return total + (item.amount * impact);
				}),
			0,
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.mainItem;
					},
					$elm$core$Basics$not),
				$author$project$Data$Food$Product$stepToItems(step)));
	});
var $author$project$Data$Food$Product$getTotalImpact = F2(
	function (trigram, product) {
		return (((A2($author$project$Data$Food$Product$getStepImpact, trigram, product.consumer) + A2($author$project$Data$Food$Product$getStepImpact, trigram, product.supermarket)) + A2($author$project$Data$Food$Product$getStepImpact, trigram, product.distribution)) + A2($author$project$Data$Food$Product$getStepImpact, trigram, product.packaging)) + A2($author$project$Data$Food$Product$getStepImpact, trigram, product.plant);
	});
var $author$project$Page$Food$Simulator$makeItemViewData = F3(
	function (config, stepWeight, item) {
		var totalImpact = config.totalImpact;
		var trigram = config.trigram;
		var amount = item.amount;
		var process = item.process;
		var impact = A2(
			$ianmackenzie$elm_units$Quantity$multiplyBy,
			amount,
			A2($author$project$Data$Impact$getImpact, trigram, process.impacts));
		var percent = ($author$project$Data$Unit$impactToFloat(impact) * 100) / totalImpact;
		return {
			config: config,
			impact: impact,
			item: item,
			percent: percent,
			stepWeight: stepWeight,
			width: A3($elm$core$Basics$clamp, 0, 100, percent)
		};
	});
var $author$project$Page$Food$Simulator$toItemViewDataList = F3(
	function (itemViewDataConfig, stepWeight, items) {
		return $elm$core$List$reverse(
			A2(
				$elm$core$List$sortBy,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.impact;
					},
					$author$project$Data$Unit$impactToFloat),
				A2(
					$elm$core$List$map,
					A2($author$project$Page$Food$Simulator$makeItemViewData, itemViewDataConfig, stepWeight),
					items)));
	});
var $elm$html$Html$section = _VirtualDom_node('section');
var $author$project$Page$Food$Simulator$viewCategory = F2(
	function (header1, children) {
		return ($elm$core$List$length(children) > 0) ? A2(
			$elm$html$Html$section,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('FoodStep mt-3')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h3,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('h6')
						]),
					_List_fromArray(
						[header1])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('stacked-card')
						]),
					children)
				])) : $elm$html$Html$text('');
	});
var $author$project$Page$Food$Simulator$ItemAmountChanged = F2(
	function (a, b) {
		return {$: 'ItemAmountChanged', a: a, b: b};
	});
var $author$project$Data$Food$Product$formatAmount = F3(
	function (totalWeight, unit, amount) {
		if (unit === 't/km') {
			var perKg = amount / totalWeight;
			var distanceInKm = perKg * 1000;
			return A2($author$project$Views$Format$formatFloat, 0, distanceInKm) + ('\u00A0km (' + (A2($author$project$Views$Format$formatFloat, 2, amount * 1000) + '\u00A0kg.km)'));
		} else {
			return A2($author$project$Views$Format$formatFloat, 2, amount) + ('\u00A0' + $author$project$Data$Food$Product$formatStringUnit(unit));
		}
	});
var $author$project$Data$Food$Product$formatItem = F2(
	function (totalWeight, item) {
		return A3($author$project$Data$Food$Product$formatAmount, totalWeight, item.process.unit, item.amount);
	});
var $author$project$Page$Food$Simulator$DeleteItem = function (a) {
	return {$: 'DeleteItem', a: a};
};
var $author$project$Views$Format$formatRichFloat = F3(
	function (decimals, unit, value) {
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text(
					(!value) ? '0' : A2($author$project$Views$Format$formatFloat, decimals, value)),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('fs-unit')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('\u202F'),
							$elm$html$Html$text(unit)
						]))
				]));
	});
var $author$project$Views$Format$formatImpactFloat = function (_v0) {
	var unit = _v0.unit;
	return A2($author$project$Views$Format$formatRichFloat, 2, unit);
};
var $author$project$Views$Format$percent = A2($author$project$Views$Format$formatRichFloat, 2, '%');
var $author$project$Views$Icon$trash = $author$project$Views$Icon$icon('trash');
var $author$project$Page$Food$Simulator$itemView = F2(
	function (_v0, itemViewData) {
		var disabled = _v0.disabled;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('border-top border-top-sm-0 d-flex align-items-center gap-1')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('w-50'),
							A2($elm$html$Html$Attributes$style, 'max-width', '50%'),
							A2($elm$html$Html$Attributes$style, 'min-width', '50%')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('progress')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('progress-bar'),
											A2(
											$elm$html$Html$Attributes$style,
											'width',
											$elm$core$String$fromFloat(itemViewData.width) + '%')
										]),
									_List_Nil)
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('text-start py-1 ps-2 text-truncate flex-fill fs-7')
						]),
					_List_fromArray(
						[
							A2(
							$author$project$Views$Format$formatImpactFloat,
							itemViewData.config.definition,
							$author$project$Data$Unit$impactToFloat(itemViewData.impact)),
							$elm$html$Html$text(' ('),
							$author$project$Views$Format$percent(itemViewData.percent),
							$elm$html$Html$text(')')
						])),
					disabled ? $elm$html$Html$text('') : A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('btn p-0 text-primary'),
							$elm$html$Html$Attributes$disabled(disabled),
							$elm$html$Html$Events$onClick(
							$author$project$Page$Food$Simulator$DeleteItem(itemViewData.item))
						]),
					_List_fromArray(
						[$author$project$Views$Icon$trash]))
				]));
	});
var $elm$html$Html$Attributes$min = $elm$html$Html$Attributes$stringProperty('min');
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $elm$html$Html$Attributes$step = function (n) {
	return A2($elm$html$Html$Attributes$stringProperty, 'step', n);
};
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $author$project$Page$Food$Simulator$viewPlantProcess = F2(
	function (_v0, itemViewData) {
		var disabled = _v0.disabled;
		var item = itemViewData.item;
		var stepWeight = itemViewData.stepWeight;
		var name = $author$project$Data$Food$Product$processNameToString(item.process.name);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('card-body row align-items-center py-1')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('col-sm-3')
						]),
					_List_fromArray(
						[
							disabled ? A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('fs-7')
								]),
							$elm$core$List$singleton(
								$elm$html$Html$text(
									A2($author$project$Data$Food$Product$formatItem, stepWeight, item)))) : A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('input-group input-group-sm my-2')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$input,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$id('slider-' + name),
											$elm$html$Html$Attributes$class('form-control text-end incdec-arrows-left'),
											$elm$html$Html$Attributes$type_('number'),
											$elm$html$Html$Attributes$step('1'),
											$elm$html$Html$Attributes$value(
											$elm$core$String$fromInt(
												$elm$core$Basics$round(
													function (f) {
														return f * 1000;
													}(item.amount)))),
											$elm$html$Html$Attributes$title('Quantité en grammes'),
											$elm$html$Html$Events$onInput(
											function (str) {
												return A2(
													$author$project$Page$Food$Simulator$ItemAmountChanged,
													item,
													(str === '') ? $elm$core$Maybe$Just(0) : A2(
														$elm$core$Maybe$map,
														function (f) {
															return f / 1000;
														},
														$elm$core$String$toFloat(str)));
											}),
											$elm$html$Html$Attributes$min('0')
										]),
									_List_Nil),
									A2(
									$elm$html$Html$span,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('input-group-text')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('g')
										]))
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('col-sm-9')
						]),
					_List_fromArray(
						[
							A2(
							$author$project$Page$Food$Simulator$itemView,
							{disabled: disabled},
							itemViewData)
						]))
				]));
	});
var $author$project$Page$Food$Simulator$viewEnergy = F2(
	function (itemViewDataConfig, step) {
		var stepWeight = $author$project$Data$Food$Product$getWeightAtPlant(step);
		return A2(
			$author$project$Page$Food$Simulator$viewCategory,
			$elm$html$Html$text('Énergie'),
			A2(
				$elm$core$List$map,
				function (itemViewData) {
					var item = itemViewData.item;
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('card')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('card-header')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(
										$author$project$Data$Food$Product$processNameToString(item.process.name)),
										$elm$html$Html$text(item.comment)
									])),
								A2(
								$author$project$Page$Food$Simulator$viewPlantProcess,
								{disabled: true},
								itemViewData)
							]));
				},
				A3($author$project$Page$Food$Simulator$toItemViewDataList, itemViewDataConfig, stepWeight, step.energy)));
	});
var $author$project$Page$Food$Simulator$AddItem = {$: 'AddItem'};
var $author$project$Page$Food$Simulator$ItemSelected = function (a) {
	return {$: 'ItemSelected', a: a};
};
var $author$project$Page$Food$Simulator$maybeToProcessName = function (string) {
	return (string === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
		$author$project$Data$Food$Product$stringToProcessName(string));
};
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$Keyed$node = $elm$virtual_dom$VirtualDom$keyedNode;
var $elm$html$Html$option = _VirtualDom_node('option');
var $elm$html$Html$Attributes$selected = $elm$html$Html$Attributes$boolProperty('selected');
var $author$project$Page$Food$Simulator$itemSelector = F2(
	function (maybeSelectedItem, event) {
		return A2(
			$elm$core$Basics$composeR,
			$elm$core$List$map(
				function (processName) {
					var string = $author$project$Data$Food$Product$processNameToString(processName);
					return _Utils_Tuple2(
						string,
						A2(
							$elm$html$Html$option,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$selected(
									_Utils_eq(
										maybeSelectedItem,
										$elm$core$Maybe$Just(processName)))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(string)
								])));
				}),
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Basics$append(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'-- Sélectionner un ingrédient dans la liste --',
							A2(
								$elm$html$Html$option,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$selected(
										_Utils_eq(maybeSelectedItem, $elm$core$Maybe$Nothing))
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('-- Sélectionner un ingrédient dans la liste --')
									])))
						])),
				A2(
					$elm$html$Html$Keyed$node,
					'select',
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('form-select'),
							$elm$html$Html$Events$onInput(
							A2($elm$core$Basics$composeR, $author$project$Page$Food$Simulator$maybeToProcessName, event))
						]))));
	});
var $elm$core$List$sort = function (xs) {
	return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
};
var $elm_community$list_extra$List$Extra$uniqueHelp = F4(
	function (f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			if (!remaining.b) {
				return $elm$core$List$reverse(accumulator);
			} else {
				var first = remaining.a;
				var rest = remaining.b;
				var computedFirst = f(first);
				if (A2($elm$core$List$member, computedFirst, existing)) {
					var $temp$f = f,
						$temp$existing = existing,
						$temp$remaining = rest,
						$temp$accumulator = accumulator;
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				} else {
					var $temp$f = f,
						$temp$existing = A2($elm$core$List$cons, computedFirst, existing),
						$temp$remaining = rest,
						$temp$accumulator = A2($elm$core$List$cons, first, accumulator);
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$unique = function (list) {
	return A4($elm_community$list_extra$List$Extra$uniqueHelp, $elm$core$Basics$identity, _List_Nil, list, _List_Nil);
};
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $turboMaCk$any_dict$Dict$Any$toList = function (_v0) {
	var dict = _v0.a.dict;
	return $elm$core$Dict$values(dict);
};
var $turboMaCk$any_dict$Dict$Any$values = A2(
	$elm$core$Basics$composeL,
	$elm$core$List$map($elm$core$Tuple$second),
	$turboMaCk$any_dict$Dict$Any$toList);
var $author$project$Data$Food$Product$listIngredients = function (products) {
	return A2(
		$elm$core$List$map,
		$author$project$Data$Food$Product$stringToProcessName,
		$elm$core$List$sort(
			$elm_community$list_extra$List$Extra$unique(
				A2(
					$elm$core$List$map,
					$author$project$Data$Food$Product$processNameToString,
					A2(
						$elm$core$List$concatMap,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.plant;
							},
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.material;
								},
								$elm$core$List$map(
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.process;
										},
										function ($) {
											return $.name;
										})))),
						$turboMaCk$any_dict$Dict$Any$values(products))))));
};
var $author$project$Page$Food$Simulator$viewIngredientSelector = F3(
	function (selectedItem, product, products) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('row pt-3 gap-2 gap-md-0')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('col-md-8')
						]),
					_List_fromArray(
						[
							A3(
							$author$project$Page$Food$Simulator$itemSelector,
							selectedItem,
							$author$project$Page$Food$Simulator$ItemSelected,
							A2(
								$elm$core$List$filter,
								function (processName) {
									return !A2(
										$elm$core$List$member,
										processName,
										A2(
											$elm$core$List$map,
											A2(
												$elm$core$Basics$composeR,
												function ($) {
													return $.process;
												},
												function ($) {
													return $.name;
												}),
											product.plant.material));
								},
								$author$project$Data$Food$Product$listIngredients(products)))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('col-md-4')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$button,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('btn btn-primary w-100 text-truncate'),
									$elm$html$Html$Events$onClick($author$project$Page$Food$Simulator$AddItem),
									$elm$html$Html$Attributes$disabled(
									_Utils_eq(selectedItem, $elm$core$Maybe$Nothing)),
									$elm$html$Html$Attributes$title('Ajouter un ingrédient')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Ajouter un ingrédient')
								]))
						]))
				]));
	});
var $author$project$Page$Food$Simulator$viewMaterial = F2(
	function (itemViewDataConfig, step) {
		var stepWeight = $author$project$Data$Food$Product$getWeightAtPlant(step);
		return A2(
			$author$project$Page$Food$Simulator$viewCategory,
			$elm$html$Html$text('Ingrédients'),
			A2(
				$elm$core$List$map,
				function (itemViewData) {
					var item = itemViewData.item;
					var name = $author$project$Data$Food$Product$processNameToString(item.process.name);
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('card')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('card-header')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('row')
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$div,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('col-lg-8')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text(name)
													])),
												A2(
												$elm$html$Html$div,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('col-lg-4 text-truncate text-lg-end')
													]),
												_List_fromArray(
													[
														(item.comment !== '') ? A2(
														$elm$html$Html$small,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class('text-muted'),
																A2($elm$html$Html$Attributes$style, 'cursor', 'help'),
																$elm$html$Html$Attributes$title(item.comment)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text(item.comment)
															])) : $elm$html$Html$text('')
													]))
											]))
									])),
								A2(
								$author$project$Page$Food$Simulator$viewPlantProcess,
								{disabled: false},
								itemViewData)
							]));
				},
				A2(
					$elm$core$List$map,
					A2($author$project$Page$Food$Simulator$makeItemViewData, itemViewDataConfig, stepWeight),
					step.material)));
	});
var $author$project$Page$Food$Simulator$viewProcessing = F2(
	function (itemViewDataConfig, step) {
		var stepWeight = $author$project$Data$Food$Product$getWeightAtPlant(step);
		return A2(
			$author$project$Page$Food$Simulator$viewCategory,
			$elm$html$Html$text('Procédé'),
			A2(
				$elm$core$List$map,
				function (itemViewData) {
					var item = itemViewData.item;
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('card')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('card-header')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(
										$author$project$Data$Food$Product$processNameToString(item.process.name)),
										$elm$html$Html$text(item.comment)
									])),
								A2(
								$author$project$Page$Food$Simulator$viewPlantProcess,
								{disabled: true},
								itemViewData)
							]));
				},
				A3($author$project$Page$Food$Simulator$toItemViewDataList, itemViewDataConfig, stepWeight, step.processing)));
	});
var $author$project$Page$Food$Simulator$ProductSelected = function (a) {
	return {$: 'ProductSelected', a: a};
};
var $turboMaCk$any_dict$Dict$Any$keys = A2(
	$elm$core$Basics$composeL,
	$elm$core$List$map($elm$core$Tuple$first),
	$turboMaCk$any_dict$Dict$Any$toList);
var $elm$html$Html$select = _VirtualDom_node('select');
var $author$project$Page$Food$Simulator$viewProductSelector = function (selectedProduct) {
	return A2(
		$elm$core$Basics$composeR,
		$turboMaCk$any_dict$Dict$Any$keys,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$map(
				function (productName) {
					var name = $author$project$Data$Food$Product$productNameToString(productName);
					return A2(
						$elm$html$Html$option,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$value(name),
								$elm$html$Html$Attributes$selected(
								_Utils_eq(productName, selectedProduct))
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(name)
							]));
				}),
			$elm$html$Html$select(
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('form-select mb-3'),
						$elm$html$Html$Events$onInput(
						A2($elm$core$Basics$composeR, $author$project$Data$Food$Product$stringToProductName, $author$project$Page$Food$Simulator$ProductSelected))
					]))));
};
var $author$project$Page$Food$Simulator$NoOp = {$: 'NoOp'};
var $author$project$Page$Food$Simulator$SwitchImpact = function (a) {
	return {$: 'SwitchImpact', a: a};
};
var $author$project$Data$Food$Product$getWeightAtStep = function (step) {
	return A2(
		$elm$core$Maybe$withDefault,
		0,
		A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.amount;
			},
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function ($) {
						return $.mainItem;
					},
					step.material))));
};
var $elm$html$Html$optgroup = _VirtualDom_node('optgroup');
var $author$project$Views$Impact$impactSelector = function (_v0) {
	var impacts = _v0.impacts;
	var selectedImpact = _v0.selectedImpact;
	var switchImpact = _v0.switchImpact;
	var scope = _v0.scope;
	var toOption = function (impact) {
		var trigram = impact.trigram;
		var label = impact.label;
		return A2(
			$elm$html$Html$option,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$selected(
					_Utils_eq(selectedImpact, impact.trigram)),
					$elm$html$Html$Attributes$value(
					$author$project$Data$Impact$toString(trigram))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(label)
				]));
	};
	var scopeImpacts = A2(
		$elm$core$List$filter,
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.scopes;
			},
			$elm$core$List$member(scope)),
		impacts);
	return A2(
		$elm$html$Html$select,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('form-select'),
				$elm$html$Html$Events$onInput(
				A2($elm$core$Basics$composeR, $author$project$Data$Impact$trg, switchImpact))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$optgroup,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$attribute, 'label', 'Impacts agrégés')
					]),
				A2(
					$elm$core$List$map,
					toOption,
					A2(
						$elm$core$List$filter,
						function (_v1) {
							var trigram = _v1.trigram;
							return _Utils_eq(
								trigram,
								$author$project$Data$Impact$trg('pef'));
						},
						scopeImpacts))),
				A2(
				$elm$html$Html$optgroup,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$attribute, 'label', 'Impacts détaillés')
					]),
				A2(
					$elm$core$List$map,
					toOption,
					A2(
						$elm$core$List$sortBy,
						function ($) {
							return $.label;
						},
						A2(
							$elm$core$List$filter,
							function (_v2) {
								var trigram = _v2.trigram;
								var primary = _v2.primary;
								return primary && (!_Utils_eq(
									trigram,
									$author$project$Data$Impact$trg('pef')));
							},
							scopeImpacts))))
			]));
};
var $author$project$Views$Component$Summary$viewIf = F2(
	function (condition, html) {
		return condition ? html : $elm$html$Html$text('');
	});
var $author$project$Views$Component$Summary$viewUnless = function (condition) {
	return $author$project$Views$Component$Summary$viewIf(!condition);
};
var $author$project$Views$Component$Summary$view = function (_v0) {
	var header = _v0.header;
	var body = _v0.body;
	var footer = _v0.footer;
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('card bg-primary shadow-sm')
			]),
		_List_fromArray(
			[
				A2(
				$author$project$Views$Component$Summary$viewUnless,
				$elm$core$List$isEmpty(header),
				A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('card-header text-white d-flex justify-content-between gap-1')
						]),
					header)),
				A2(
				$author$project$Views$Component$Summary$viewUnless,
				$elm$core$List$isEmpty(body),
				A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('card-body px-1 py-2 py-sm-3 d-grid gap-2 gap-sm-3 text-white')
						]),
					body)),
				A2(
				$author$project$Views$Component$Summary$viewUnless,
				$elm$core$List$isEmpty(footer),
				A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('card-footer text-white d-flex justify-content-between gap-1')
						]),
					footer))
			]));
};
var $author$project$Page$Food$Simulator$stepNames = function (product) {
	return _List_fromArray(
		[
			_Utils_Tuple2('Recette', product.plant),
			_Utils_Tuple2('Conditionnement', product.packaging),
			_Utils_Tuple2('Stockage', product.distribution),
			_Utils_Tuple2('Vente au détail', product.supermarket),
			_Utils_Tuple2('Consommation', product.consumer)
		]);
};
var $author$project$Page$Food$Simulator$viewStepsSummary = F2(
	function (trigram, product) {
		var totalImpact = A2($author$project$Data$Food$Product$getTotalImpact, trigram, product);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('card fs-7')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$ul,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('list-group list-group-flush')
						]),
					A2(
						$elm$core$List$map,
						function (_v0) {
							var label = _v0.a;
							var step = _v0.b;
							var impact = A2($author$project$Data$Food$Product$getStepImpact, trigram, step);
							var percent = (impact / totalImpact) * 100;
							return A2(
								$elm$html$Html$li,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('list-group-item d-flex justify-content-between align-items-center gap-1')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('flex-fill w-33 text-truncate')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(label)
											])),
										A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('flex-fill w-50')
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$div,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('progress'),
														A2($elm$html$Html$Attributes$style, 'height', '13px')
													]),
												_List_fromArray(
													[
														A2(
														$elm$html$Html$div,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class('progress-bar'),
																A2(
																$elm$html$Html$Attributes$style,
																'width',
																$elm$core$String$fromFloat(percent) + '%')
															]),
														_List_Nil)
													]))
											])),
										A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('flex-fill text-end'),
												A2($elm$html$Html$Attributes$style, 'min-width', '62px')
											]),
										_List_fromArray(
											[
												$author$project$Views$Format$percent(percent)
											]))
									]));
						},
						$author$project$Page$Food$Simulator$stepNames(product)))
				]));
	});
var $author$project$Page$Food$Simulator$viewSidebar = F3(
	function (session, _v0, _v1) {
		var definition = _v0.definition;
		var trigram = _v0.trigram;
		var totalImpact = _v0.totalImpact;
		var product = _v1.product;
		var finalWeight = $author$project$Data$Food$Product$getWeightAtStep(product.consumer);
		var impactPerKg = totalImpact / finalWeight;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('d-flex flex-column gap-3 mb-3 sticky-md-top'),
					A2($elm$html$Html$Attributes$style, 'top', '7px')
				]),
			_List_fromArray(
				[
					$author$project$Views$Impact$impactSelector(
					{
						impacts: session.db.impacts,
						scope: $author$project$Data$Impact$Food,
						selectedFunctionalUnit: $author$project$Data$Unit$PerItem,
						selectedImpact: trigram,
						switchFunctionalUnit: $elm$core$Basics$always($author$project$Page$Food$Simulator$NoOp),
						switchImpact: $author$project$Page$Food$Simulator$SwitchImpact
					}),
					$author$project$Views$Component$Summary$view(
					{
						body: _List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('d-flex flex-column m-auto gap-1 px-2')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$h2,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('h5 m-0')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('Impact par kg de produit')
											])),
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('display-4 lh-1 text-center text-nowrap')
											]),
										_List_fromArray(
											[
												A2($author$project$Views$Format$formatImpactFloat, definition, impactPerKg)
											])),
										A2(
										$elm$html$Html$h3,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('h6 m-0 mt-2')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('Impact total')
											])),
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('display-5 lh-1 text-center text-nowrap')
											]),
										_List_fromArray(
											[
												A2($author$project$Views$Format$formatImpactFloat, definition, totalImpact)
											])),
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('fs-7 text-end')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(' pour un poids total chez le consommateur de '),
												A2(
												$elm$html$Html$strong,
												_List_Nil,
												_List_fromArray(
													[
														$elm$html$Html$text(
														A2($author$project$Views$Format$formatFloat, 3, finalWeight)),
														$elm$html$Html$text('\u00A0kg')
													]))
											]))
									]))
							]),
						footer: _List_Nil,
						header: _List_Nil
					}),
					A2($author$project$Page$Food$Simulator$viewStepsSummary, trigram, product)
				]));
	});
var $author$project$Data$Food$Product$getMainItemComment = function (step) {
	return A2(
		$elm$core$Maybe$map,
		function ($) {
			return $.comment;
		},
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				function ($) {
					return $.mainItem;
				},
				$author$project$Data$Food$Product$stepToItems(step))));
};
var $author$project$Views$Component$DownArrow$img = function (path) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('text-center')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$img,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$src(path),
						$elm$html$Html$Attributes$alt(''),
						A2($elm$html$Html$Attributes$attribute, 'aria-hidden', 'true')
					]),
				_List_Nil)
			]));
};
var $author$project$Views$Component$DownArrow$large = $author$project$Views$Component$DownArrow$img('img/down-arrow-lg-icon.png');
var $author$project$Views$Icon$question = $author$project$Views$Icon$icon('question');
var $author$project$Page$Food$Simulator$viewComment = function (comment) {
	return (comment !== '') ? A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('d-inline-flex align-items-center fs-7 gap-1 py-1 text-muted cursor-help'),
				$elm$html$Html$Attributes$title(comment)
			]),
		_List_fromArray(
			[$author$project$Views$Icon$question])) : $elm$html$Html$text('');
};
var $author$project$Page$Food$Simulator$viewItemDetails = function (_v0) {
	var config = _v0.config;
	var item = _v0.item;
	var impact = _v0.impact;
	var percent = _v0.percent;
	var stepWeight = _v0.stepWeight;
	var width = _v0.width;
	return A2(
		$elm$html$Html$li,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('list-group-item')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('fs-7')
					]),
				_List_fromArray(
					[
						$author$project$Page$Food$Simulator$viewComment(item.comment),
						$elm$html$Html$text(' '),
						$elm$html$Html$text(
						$author$project$Data$Food$Product$processNameToString(item.process.name))
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('progress my-2'),
						A2($elm$html$Html$Attributes$style, 'height', '9px')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('progress-bar'),
								A2(
								$elm$html$Html$Attributes$style,
								'width',
								$elm$core$String$fromFloat(width) + '%')
							]),
						_List_Nil)
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('d-flex flex-row justify-content-between fs-7')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('w-33')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								A2($author$project$Data$Food$Product$formatItem, stepWeight, item))
							])),
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('w-33')
							]),
						_List_fromArray(
							[
								A2(
								$author$project$Views$Format$formatImpactFloat,
								config.definition,
								$author$project$Data$Unit$impactToFloat(impact))
							])),
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('w-33')
							]),
						_List_fromArray(
							[
								$author$project$Views$Format$percent(percent)
							]))
					]))
			]));
};
var $author$project$Page$Food$Simulator$viewStep = F3(
	function (label, itemViewDataConfig, step) {
		var definition = itemViewDataConfig.definition;
		var trigram = itemViewDataConfig.trigram;
		var stepWeight = $author$project$Data$Food$Product$getWeightAtStep(step);
		var stepImpact = A2($author$project$Data$Food$Product$getStepImpact, trigram, step);
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('d-flex align-items-center fs-7')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('w-50 text-end p-2')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(
									A2($author$project$Views$Format$formatFloat, 3, stepWeight)),
									$elm$html$Html$text('\u00A0kg')
								])),
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('text-center')
								]),
							_List_fromArray(
								[$author$project$Views$Component$DownArrow$large])),
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('w-50 text-muted p-2')
								]),
							_List_Nil)
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('card')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('card-header')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('row d-flex align-items-center')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('col-9')
												]),
											_List_fromArray(
												[
													A2(
													$elm$html$Html$h3,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$class('h6 m-0')
														]),
													_List_fromArray(
														[
															$elm$html$Html$text(label)
														]))
												])),
											A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('col-3 text-end h5 m-0 text-nowrap overflow-hidden')
												]),
											_List_fromArray(
												[
													A2($author$project$Views$Format$formatImpactFloat, definition, stepImpact)
												]))
										])),
									function () {
									var _v0 = $author$project$Data$Food$Product$getMainItemComment(step);
									if (_v0.$ === 'Just') {
										var comment = _v0.a;
										return A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('fs-7 text-muted mt-1')
												]),
											_List_fromArray(
												[
													$elm$html$Html$text(comment)
												]));
									} else {
										return $elm$html$Html$text('');
									}
								}()
								])),
							A2(
							$elm$html$Html$ul,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('list-group list-group-flush')
								]),
							A2(
								$elm$core$List$map,
								$author$project$Page$Food$Simulator$viewItemDetails,
								A3(
									$author$project$Page$Food$Simulator$toItemViewDataList,
									itemViewDataConfig,
									stepWeight,
									A2(
										$elm$core$List$filter,
										A2(
											$elm$core$Basics$composeR,
											function ($) {
												return $.mainItem;
											},
											$elm$core$Basics$not),
										$author$project$Data$Food$Product$stepToItems(step)))))
						]))
				]));
	});
var $author$project$Page$Food$Simulator$viewSteps = F2(
	function (itemViewDataConfig, product) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mb-3')
				]),
			A2(
				$elm$core$List$map,
				function (_v0) {
					var label = _v0.a;
					var step = _v0.b;
					return A3($author$project$Page$Food$Simulator$viewStep, label, itemViewDataConfig, step);
				},
				A2(
					$elm$core$List$drop,
					1,
					$author$project$Page$Food$Simulator$stepNames(product))));
	});
var $author$project$Page$Food$Simulator$CountrySelected = function (a) {
	return {$: 'CountrySelected', a: a};
};
var $author$project$Views$CountrySelect$view = function (_v0) {
	var attributes = _v0.attributes;
	var selectedCountry = _v0.selectedCountry;
	var onSelect = _v0.onSelect;
	var countries = _v0.countries;
	return A2(
		$elm$html$Html$select,
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Attributes$class('form-select'),
			A2(
				$elm$core$List$cons,
				$elm$html$Html$Events$onInput(
					A2($elm$core$Basics$composeR, $author$project$Data$Country$codeFromString, onSelect)),
				attributes)),
		A2(
			$elm$core$List$map,
			function (_v1) {
				var code = _v1.code;
				var name = _v1.name;
				return A2(
					$elm$html$Html$option,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$selected(
							_Utils_eq(selectedCountry, code)),
							$elm$html$Html$Attributes$value(
							$author$project$Data$Country$codeToString(code))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(name)
						]));
			},
			A2(
				$elm$core$List$sortBy,
				function ($) {
					return $.name;
				},
				countries)));
};
var $author$project$Page$Food$Simulator$viewTransport = F4(
	function (itemViewDataConfig, step, selectedCountry, countries) {
		var stepWeight = $author$project$Data$Food$Product$getWeightAtPlant(step);
		var countrySelector = $author$project$Views$CountrySelect$view(
			{
				attributes: _List_fromArray(
					[
						$elm$html$Html$Attributes$class('form-select w-50 d-inline')
					]),
				countries: countries,
				onSelect: $author$project$Page$Food$Simulator$CountrySelected,
				selectedCountry: selectedCountry
			});
		var header = A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('d-flex justify-content-between align-items-center gap-3')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('text-truncate')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Transport - pays d\'origine : ')
						])),
					countrySelector
				]));
		return A2(
			$author$project$Page$Food$Simulator$viewCategory,
			header,
			A2(
				$elm$core$List$map,
				function (itemViewData) {
					var item = itemViewData.item;
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('card')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('card-header')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(
										$author$project$Data$Food$Product$processNameToString(item.process.name)),
										$elm$html$Html$text(item.comment)
									])),
								A2(
								$author$project$Page$Food$Simulator$viewPlantProcess,
								{disabled: true},
								itemViewData)
							]));
				},
				A3($author$project$Page$Food$Simulator$toItemViewDataList, itemViewDataConfig, stepWeight, step.transport)));
	});
var $author$project$Page$Food$Simulator$viewWaste = F2(
	function (itemViewDataConfig, step) {
		var stepWeight = $author$project$Data$Food$Product$getWeightAtPlant(step);
		return A2(
			$author$project$Page$Food$Simulator$viewCategory,
			$elm$html$Html$text('Déchets'),
			A2(
				$elm$core$List$map,
				function (itemViewData) {
					var item = itemViewData.item;
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('card')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('card-header')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(
										$author$project$Data$Food$Product$processNameToString(item.process.name)),
										$elm$html$Html$text(item.comment)
									])),
								A2(
								$author$project$Page$Food$Simulator$viewPlantProcess,
								{disabled: true},
								itemViewData)
							]));
				},
				A3($author$project$Page$Food$Simulator$toItemViewDataList, itemViewDataConfig, stepWeight, step.wasteTreatment)));
	});
var $author$project$Page$Food$Simulator$view = F2(
	function (session, model) {
		var foodDb = session.foodDb;
		var db = session.db;
		var selectedProduct = model.selectedProduct;
		var impact = model.impact;
		var selectedItem = model.selectedItem;
		var selectedCountry = model.selectedCountry;
		return _Utils_Tuple2(
			'Simulateur de recettes',
			_List_fromArray(
				[
					function () {
					var _v0 = model.currentProductInfo;
					if (_v0.$ === 'Just') {
						var currentProductInfo = _v0.a;
						var product = currentProductInfo.product;
						var totalImpact = A2($author$project$Data$Food$Product$getTotalImpact, impact, product);
						var definition = A2(
							$elm$core$Result$withDefault,
							$author$project$Data$Impact$invalid,
							A2($author$project$Data$Impact$getDefinition, impact, db.impacts));
						var itemViewDataConfig = {definition: definition, totalImpact: totalImpact, trigram: impact};
						return A2(
							$author$project$Views$Container$centered,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('row gap-3 gap-lg-0')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('col-lg-4 order-lg-2 d-flex flex-column gap-3')
												]),
											_List_fromArray(
												[
													A3($author$project$Page$Food$Simulator$viewSidebar, session, itemViewDataConfig, currentProductInfo)
												])),
											A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('col-lg-8 order-lg-1 d-flex flex-column')
												]),
											_List_fromArray(
												[
													A2($author$project$Page$Food$Simulator$viewProductSelector, selectedProduct, foodDb.products),
													A2($author$project$Page$Food$Simulator$viewMaterial, itemViewDataConfig, product.plant),
													A3($author$project$Page$Food$Simulator$viewIngredientSelector, selectedItem, product, foodDb.products),
													A2($author$project$Page$Food$Simulator$viewEnergy, itemViewDataConfig, product.plant),
													A2($author$project$Page$Food$Simulator$viewProcessing, itemViewDataConfig, product.plant),
													A4($author$project$Page$Food$Simulator$viewTransport, itemViewDataConfig, product.plant, selectedCountry, db.countries),
													A2($author$project$Page$Food$Simulator$viewWaste, itemViewDataConfig, product.plant),
													A2(
													$elm$html$Html$button,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$class('btn btn-outline-primary w-100 mt-3'),
															$elm$html$Html$Events$onClick($author$project$Page$Food$Simulator$Reset)
														]),
													_List_fromArray(
														[
															$elm$html$Html$text('Réinitialiser')
														])),
													A2($author$project$Page$Food$Simulator$viewSteps, itemViewDataConfig, product)
												]))
										]))
								]));
					} else {
						return $author$project$Views$Spinner$view;
					}
				}()
				]));
	});
var $elm_community$list_extra$List$Extra$uncons = function (list) {
	if (!list.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var first = list.a;
		var rest = list.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(first, rest));
	}
};
var $author$project$Data$Gitbook$parseIsIsnt = function (markdown) {
	var toIsIsnt = function (list) {
		if ((list.b && list.b.b) && (!list.b.b.b)) {
			var is = list.a;
			var _v2 = list.b;
			var isnt = _v2.a;
			return $elm$core$Maybe$Just(
				{is: is, isnt: isnt});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var splitMap = F2(
		function (delim, fn) {
			return A2(
				$elm$core$Basics$composeR,
				$elm$core$String$split(delim),
				A2(
					$elm$core$Basics$composeR,
					$elm$core$List$map($elm$core$String$trim),
					A2(
						$elm$core$Basics$composeR,
						$elm_community$list_extra$List$Extra$uncons,
						$elm$core$Maybe$map(fn))));
		});
	return toIsIsnt(
		A2(
			$elm$core$List$filterMap,
			A2(
				splitMap,
				'\n### ',
				function (_v0) {
					var title = _v0.a;
					var mdrest = _v0.b;
					return _Utils_Tuple2(
						title,
						A2(
							$elm$core$List$filterMap,
							A2(
								splitMap,
								'\n\n',
								$elm$core$Tuple$mapSecond(
									$elm$core$String$join('\n\n'))),
							mdrest));
				}),
			A2(
				$elm$core$List$drop,
				1,
				A2($elm$core$String$split, '\n## ', markdown))));
};
var $author$project$Views$Icon$day = $author$project$Views$Icon$icon('day');
var $author$project$Views$Format$days = A2(
	$elm$core$Basics$composeR,
	$ianmackenzie$elm_units$Duration$inDays,
	A2($author$project$Views$Format$formatRichFloat, 0, 'j'));
var $author$project$Data$Unit$inFunctionalUnit = F2(
	function (funit, daysOfWear) {
		if (funit.$ === 'PerItem') {
			return $elm$core$Basics$identity;
		} else {
			return $ianmackenzie$elm_units$Quantity$divideBy(
				$ianmackenzie$elm_units$Duration$inDays(daysOfWear));
		}
	});
var $author$project$Views$Format$formatImpact = F4(
	function (funit, _v0, daysOfWear, def) {
		var trigram = _v0.trigram;
		var unit = _v0.unit;
		return A3(
			$author$project$Views$Format$formatRichFloat,
			2,
			unit,
			$author$project$Data$Unit$impactToFloat(
				A3(
					$author$project$Data$Unit$inFunctionalUnit,
					funit,
					daysOfWear,
					A2($author$project$Data$Impact$getImpact, trigram, def))));
	});
var $author$project$Data$Unit$functionalToString = function (funit) {
	if (funit.$ === 'PerDayOfWear') {
		return 'par jour d\'utilisation';
	} else {
		return 'par vêtement';
	}
};
var $author$project$Views$Format$kg = A2(
	$elm$core$Basics$composeR,
	$ianmackenzie$elm_units$Mass$inKilograms,
	A2($author$project$Views$Format$formatRichFloat, 3, 'kg'));
var $author$project$Views$Icon$bus = $author$project$Views$Icon$icon('truck');
var $author$project$Views$Icon$dyeing = $author$project$Views$Icon$icon('dyeing');
var $author$project$Views$Icon$fabric = $author$project$Views$Icon$icon('fabric');
var $author$project$Views$Icon$making = $author$project$Views$Icon$icon('making');
var $author$project$Views$Icon$material = $author$project$Views$Icon$icon('material');
var $author$project$Views$Icon$recycle = $author$project$Views$Icon$icon('recycle');
var $author$project$Views$Icon$thread = $author$project$Views$Icon$icon('thread');
var $author$project$Views$Icon$use = $author$project$Views$Icon$icon('use');
var $author$project$Views$Textile$Step$stepIcon = function (label) {
	switch (label.$) {
		case 'Material':
			return $author$project$Views$Icon$material;
		case 'Spinning':
			return $author$project$Views$Icon$thread;
		case 'Fabric':
			return $author$project$Views$Icon$fabric;
		case 'Dyeing':
			return $author$project$Views$Icon$dyeing;
		case 'Making':
			return $author$project$Views$Icon$making;
		case 'Distribution':
			return $author$project$Views$Icon$bus;
		case 'Use':
			return $author$project$Views$Icon$use;
		default:
			return $author$project$Views$Icon$recycle;
	}
};
var $author$project$Data$Textile$Step$Label$toString = function (label) {
	switch (label.$) {
		case 'Material':
			return 'Matière';
		case 'Spinning':
			return 'Filature';
		case 'Fabric':
			return 'Tissage & Tricotage';
		case 'Making':
			return 'Confection';
		case 'Dyeing':
			return 'Teinture';
		case 'Distribution':
			return 'Distribution';
		case 'Use':
			return 'Utilisation';
		default:
			return 'Fin de vie';
	}
};
var $author$project$Views$Icon$boat = $author$project$Views$Icon$icon('ship');
var $author$project$Views$Format$km = A2(
	$elm$core$Basics$composeR,
	$ianmackenzie$elm_units$Length$inKilometers,
	A2($author$project$Views$Format$formatRichFloat, 0, 'km'));
var $author$project$Views$Icon$plane = $author$project$Views$Icon$icon('plane');
var $author$project$Views$Transport$view = F2(
	function (_v0, _v1) {
		var fullWidth = _v0.fullWidth;
		var airTransportLabel = _v0.airTransportLabel;
		var seaTransportLabel = _v0.seaTransportLabel;
		var roadTransportLabel = _v0.roadTransportLabel;
		var road = _v1.road;
		var air = _v1.air;
		var sea = _v1.sea;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$classList(
					_List_fromArray(
						[
							_Utils_Tuple2('d-flex fs-7', true),
							_Utils_Tuple2('justify-content-between', fullWidth),
							_Utils_Tuple2('justify-content-center', !fullWidth)
						]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mx-2'),
							$elm$html$Html$Attributes$title(
							A2($elm$core$Maybe$withDefault, '', airTransportLabel))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('me-1'),
									A2($elm$html$Html$Attributes$style, 'cursor', 'help')
								]),
							_List_fromArray(
								[$author$project$Views$Icon$plane])),
							$author$project$Views$Format$km(air)
						])),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mx-2'),
							$elm$html$Html$Attributes$title(
							A2($elm$core$Maybe$withDefault, '', seaTransportLabel))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('me-1'),
									A2($elm$html$Html$Attributes$style, 'cursor', 'help')
								]),
							_List_fromArray(
								[$author$project$Views$Icon$boat])),
							$author$project$Views$Format$km(sea)
						])),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mx-2'),
							$elm$html$Html$Attributes$title(
							A2($elm$core$Maybe$withDefault, '', roadTransportLabel))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('me-1'),
									A2($elm$html$Html$Attributes$style, 'cursor', 'help')
								]),
							_List_fromArray(
								[$author$project$Views$Icon$bus])),
							$author$project$Views$Format$km(road)
						]))
				]));
	});
var $author$project$Views$Format$ratioToDecimals = F2(
	function (decimals, _v0) {
		var _float = _v0.a;
		return A3($author$project$Views$Format$formatRichFloat, decimals, '%', _float * 100);
	});
var $author$project$Views$Textile$Summary$viewMaterials = function (materials) {
	return A2(
		$elm$html$Html$span,
		_List_Nil,
		A2(
			$elm$core$List$intersperse,
			$elm$html$Html$text(', '),
			A2(
				$elm$core$List$map,
				function (_v1) {
					var material = _v1.material;
					var share = _v1.share;
					return A2(
						$elm$html$Html$span,
						_List_Nil,
						_List_fromArray(
							[
								A2($author$project$Views$Format$ratioToDecimals, 0, share),
								$elm$html$Html$text(' '),
								$elm$html$Html$text(material.shortName)
							]));
				},
				A2(
					$elm$core$List$filter,
					function (_v0) {
						var share = _v0.share;
						return $author$project$Data$Unit$ratioToFloat(share) > 0;
					},
					materials))));
};
var $author$project$Views$Textile$Summary$mainSummaryView = F2(
	function (_v0, simulator) {
		var session = _v0.session;
		var impact = _v0.impact;
		var funit = _v0.funit;
		var inputs = simulator.inputs;
		var lifeCycle = simulator.lifeCycle;
		return $author$project$Views$Component$Summary$view(
			{
				body: _List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('d-flex justify-content-center align-items-center')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$img,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$src('img/product/' + (inputs.product.name + '.svg')),
										$elm$html$Html$Attributes$alt(inputs.product.name),
										$elm$html$Html$Attributes$class('SummaryProductImage invert me-2')
									]),
								_List_Nil),
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('SummaryScore d-flex flex-column')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('display-5')
											]),
										_List_fromArray(
											[
												A4($author$project$Views$Format$formatImpact, funit, impact, simulator.daysOfWear, simulator.impacts)
											])),
										A2(
										$elm$html$Html$small,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('SummaryScoreFunit text-end')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(
												$author$project$Data$Unit$functionalToString(funit))
											]))
									]))
							])),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('Chevrons')
							]),
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (index, _v1) {
									var label = _v1.label;
									var country = _v1.country;
									return A2(
										$elm$html$Html$li,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$classList(
												_List_fromArray(
													[
														_Utils_Tuple2('d-none d-xl-block', index > 5)
													])),
												$elm$html$Html$Attributes$class('cursor-help'),
												$elm$html$Html$Attributes$title(
												$author$project$Data$Textile$Step$Label$toString(label) + (': ' + country.name))
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$span,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('d-flex gap-1 align-items-center')
													]),
												_List_fromArray(
													[
														A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class('fs-6')
															]),
														_List_fromArray(
															[
																$author$project$Views$Textile$Step$stepIcon(label)
															])),
														$elm$html$Html$text(
														$author$project$Data$Country$codeToString(country.code))
													]))
											]));
								}),
							A2(
								$elm$core$List$filter,
								function ($) {
									return $.enabled;
								},
								$elm$core$Array$toList(lifeCycle)))),
						A2(
						$author$project$Views$Transport$view,
						{
							airTransportLabel: $elm$core$Maybe$Just('Transport aérien total'),
							fullWidth: false,
							roadTransportLabel: $elm$core$Maybe$Just('Transport routier total'),
							seaTransportLabel: $elm$core$Maybe$Just('Transport maritime total')
						},
						A2($author$project$Data$Textile$LifeCycle$computeTotalTransportImpacts, session.db, lifeCycle))
					]),
				footer: _List_Nil,
				header: _List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('text-nowrap')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$strong,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(inputs.product.name)
									]))
							])),
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('text-truncate')
							]),
						_List_fromArray(
							[
								$author$project$Views$Textile$Summary$viewMaterials(inputs.materials)
							])),
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('text-nowrap')
							]),
						_List_fromArray(
							[
								$author$project$Views$Format$kg(inputs.mass)
							])),
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('text-nowrap')
							]),
						_List_fromArray(
							[
								$author$project$Views$Icon$day,
								$author$project$Views$Format$days(simulator.daysOfWear)
							]))
					])
			});
	});
var $author$project$Views$Link$smallPillExternal = function (attrs) {
	return $elm$html$Html$a(
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Attributes$target('_blank'),
			A2(
				$elm$core$List$cons,
				$elm$html$Html$Attributes$rel('noopener noreferrer'),
				A2(
					$elm$core$List$cons,
					$elm$html$Html$Attributes$class('btn btn-sm text-secondary text-decoration-none btn-link p-0 ms-1'),
					attrs))));
};
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$circle = $elm$svg$Svg$trustedNode('circle');
var $elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var $elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var $elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var $elm$svg$Svg$Attributes$strokeDasharray = _VirtualDom_attribute('stroke-dasharray');
var $elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $author$project$Views$PieChart$view = function (percentage) {
	var circumference = 31.4;
	var strokeDash = $elm$core$Basics$round((percentage * circumference) / 100);
	var strokeDashArrayValue = $elm$core$String$fromInt(strokeDash) + (' ' + $elm$core$String$fromFloat(circumference));
	return A2(
		$elm$svg$Svg$svg,
		_List_fromArray(
			[
				$elm$svg$Svg$Attributes$viewBox('0 0 20 20'),
				$elm$svg$Svg$Attributes$width('20'),
				$elm$svg$Svg$Attributes$height('20')
			]),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$circle,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$cx('10'),
						$elm$svg$Svg$Attributes$cy('10'),
						$elm$svg$Svg$Attributes$r('10'),
						$elm$svg$Svg$Attributes$fill('#eee')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$circle,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$cx('10'),
						$elm$svg$Svg$Attributes$cy('10'),
						$elm$svg$Svg$Attributes$r('5'),
						$elm$svg$Svg$Attributes$fill('transparent'),
						$elm$svg$Svg$Attributes$stroke('#075ea2'),
						$elm$svg$Svg$Attributes$strokeWidth('10'),
						$elm$svg$Svg$Attributes$transform('rotate(-90) translate(-20)'),
						$elm$svg$Svg$Attributes$strokeDasharray(strokeDashArrayValue)
					]),
				_List_Nil)
			]));
};
var $author$project$Views$Textile$BarChart$barView = F2(
	function (_v0, bar) {
		var impact = _v0.impact;
		return A2(
			$elm$html$Html$tr,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('fs-7')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$th,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('text-end text-truncate py-1 pe-1')
						]),
					_List_fromArray(
						[bar.label])),
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('d-none d-sm-block text-end py-1 ps-1 pe-2 text-truncate')
						]),
					_List_fromArray(
						[
							A2($author$project$Views$Format$formatImpactFloat, impact, bar.score)
						])),
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('w-100 py-1')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('bg-primary'),
									A2($elm$html$Html$Attributes$style, 'height', '1rem'),
									A2($elm$html$Html$Attributes$style, 'line-height', '1rem'),
									A2(
									$elm$html$Html$Attributes$style,
									'width',
									$elm$core$String$fromFloat(bar.width) + '%')
								]),
							_List_Nil)
						])),
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('d-none d-sm-block text-end py-1 ps-2 text-truncate')
						]),
					_List_fromArray(
						[
							$author$project$Views$Format$percent(bar.percent)
						])),
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('ps-2')
						]),
					_List_fromArray(
						[
							$author$project$Views$PieChart$view(bar.percent)
						]))
				]));
	});
var $elm$html$Html$abbr = _VirtualDom_node('abbr');
var $author$project$Views$Format$formatInt = F2(
	function (unit, _int) {
		return A2(
			$cuducos$elm_format_number$FormatNumber$format,
			_Utils_update(
				$cuducos$elm_format_number$FormatNumber$Locales$frenchLocale,
				{
					decimals: $cuducos$elm_format_number$FormatNumber$Locales$Exact(0)
				}),
			_int) + ('\u202F' + unit);
	});
var $author$project$Data$Impact$grabImpactFloat = F4(
	function (funit, daysOfWear, trigram, _v0) {
		var impacts = _v0.impacts;
		return $author$project$Data$Unit$impactToFloat(
			A3(
				$author$project$Data$Unit$inFunctionalUnit,
				funit,
				daysOfWear,
				A2($author$project$Data$Impact$getImpact, trigram, impacts)));
	});
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Elm$JsArray$push = _JsArray_push;
var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			$elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					$elm$core$Elm$JsArray$push,
					$elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
				return A2($elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (value.$ === 'SubTree') {
				var subTree = value.a;
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4(
						$elm$core$Array$insertTailInTree,
						shift - $elm$core$Array$shiftStep,
						index,
						tail,
						$elm$core$Elm$JsArray$singleton(value)));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var $elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var originalTailLen = $elm$core$Elm$JsArray$length(tail);
		var newTailLen = $elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + $elm$core$Array$shiftStep;
				var newTree = A4(
					$elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					$elm$core$Elm$JsArray$singleton(
						$elm$core$Array$SubTree(tree)));
				return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					$elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var $elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			$elm$core$Array$unsafeReplaceTail,
			A2($elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var $author$project$Views$Textile$BarChart$makeBars = function (_v0) {
	var simulator = _v0.simulator;
	var impact = _v0.impact;
	var funit = _v0.funit;
	var grabImpact = A3($author$project$Data$Impact$grabImpactFloat, funit, simulator.daysOfWear, impact.trigram);
	var maxScore = A2(
		$elm$core$Maybe$withDefault,
		0,
		$elm$core$List$maximum(
			$elm$core$Array$toList(
				A2(
					$elm$core$Array$push,
					grabImpact(simulator.transport),
					A2($elm$core$Array$map, grabImpact, simulator.lifeCycle)))));
	var stepBars = A2(
		$elm$core$List$map,
		function (step) {
			return {
				label: A2(
					$elm$html$Html$span,
					_List_Nil,
					_List_fromArray(
						[
							function () {
							var _v3 = _Utils_Tuple2(step.label, simulator.inputs.product.fabric);
							switch (_v3.a.$) {
								case 'Fabric':
									if (_v3.b.$ === 'Knitted') {
										var _v4 = _v3.a;
										return $elm$html$Html$text('Tricotage');
									} else {
										var _v5 = _v3.a;
										var _v6 = _v3.b;
										return $elm$html$Html$text('Tissage');
									}
								case 'Dyeing':
									var _v7 = _v3.a;
									return A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('fw-normal'),
												$elm$html$Html$Attributes$title(
												$author$project$Data$Textile$Step$dyeingWeightingToString(step.dyeingWeighting))
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$strong,
												_List_Nil,
												_List_fromArray(
													[
														$elm$html$Html$text('Teinture')
													])),
												$elm$html$Html$text(' ('),
												A2(
												$elm$html$Html$abbr,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('Abbr')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text(
														A2(
															$author$project$Views$Format$formatInt,
															'%',
															$elm$core$Basics$round(
																$author$project$Data$Unit$ratioToFloat(step.dyeingWeighting) * 100)))
													])),
												$elm$html$Html$text(')')
											]));
								default:
									return $elm$html$Html$text(
										$author$project$Data$Textile$Step$Label$toString(step.label));
							}
						}()
						])),
				percent: (grabImpact(step) / grabImpact(simulator)) * 100,
				score: grabImpact(step),
				width: A3(
					$elm$core$Basics$clamp,
					0,
					100,
					(grabImpact(step) / maxScore) * 100)
			};
		},
		A2(
			$elm$core$List$filter,
			function (_v2) {
				var label = _v2.label;
				return !_Utils_eq(label, $author$project$Data$Textile$Step$Label$Distribution);
			},
			$elm$core$Array$toList(simulator.lifeCycle)));
	var transportBar = {
		label: $elm$html$Html$text('Transport total'),
		percent: (grabImpact(simulator.transport) / grabImpact(simulator)) * 100,
		score: grabImpact(simulator.transport),
		width: A3(
			$elm$core$Basics$clamp,
			0,
			100,
			(grabImpact(simulator.transport) / maxScore) * 100)
	};
	return function (_v1) {
		var a = _v1.a;
		var b = _v1.b;
		return _Utils_ap(
			a,
			A2($elm$core$List$cons, transportBar, b));
	}(
		A2($elm_community$list_extra$List$Extra$splitAt, 4, stepBars));
};
var $author$project$Views$Textile$BarChart$view = function (config) {
	return A2(
		$elm$html$Html$table,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('mb-0')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$tbody,
				_List_Nil,
				A2(
					$elm$core$List$map,
					$author$project$Views$Textile$BarChart$barView(config),
					$author$project$Views$Textile$BarChart$makeBars(config)))
			]));
};
var $terezka$elm_charts$Internal$Svg$Middle = {$: 'Middle'};
var $terezka$elm_charts$Chart$Attributes$alignMiddle = function (config) {
	return _Utils_update(
		config,
		{
			anchor: $elm$core$Maybe$Just($terezka$elm_charts$Internal$Svg$Middle)
		});
};
var $terezka$elm_charts$Chart$Attributes$attrs = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{attrs: v});
	});
var $terezka$elm_charts$Internal$Property$Property = function (a) {
	return {$: 'Property', a: a};
};
var $terezka$elm_charts$Internal$Property$property = F3(
	function (value, inter, attrs) {
		return $terezka$elm_charts$Internal$Property$Property(
			{
				attrs: attrs,
				extra: F5(
					function (_v0, _v1, _v2, _v3, _v4) {
						return _List_Nil;
					}),
				format: A2(
					$elm$core$Basics$composeR,
					value,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$map($elm$core$String$fromFloat),
						$elm$core$Maybe$withDefault('N/A'))),
				inter: inter,
				meta: $elm$core$Maybe$Nothing,
				value: value,
				visual: value
			});
	});
var $terezka$elm_charts$Chart$bar = function (y) {
	return A2(
		$terezka$elm_charts$Internal$Property$property,
		A2($elm$core$Basics$composeR, y, $elm$core$Maybe$Just),
		_List_Nil);
};
var $terezka$elm_charts$Chart$BarsElement = F5(
	function (a, b, c, d, e) {
		return {$: 'BarsElement', a: a, b: b, c: c, d: d, e: e};
	});
var $terezka$elm_charts$Chart$Indexed = function (a) {
	return {$: 'Indexed', a: a};
};
var $terezka$elm_charts$Internal$Many$apply = F2(
	function (_v0, items) {
		var func = _v0.b;
		return func(items);
	});
var $terezka$elm_charts$Chart$Item$apply = $terezka$elm_charts$Internal$Many$apply;
var $terezka$elm_charts$Internal$Helpers$apply = F2(
	function (funcs, _default) {
		var apply_ = F2(
			function (f, a) {
				return f(a);
			});
		return A3($elm$core$List$foldl, apply_, _default, funcs);
	});
var $terezka$elm_charts$Internal$Many$Remodel = F2(
	function (a, b) {
		return {$: 'Remodel', a: a, b: b};
	});
var $terezka$elm_charts$Internal$Item$Rendered = function (a) {
	return {$: 'Rendered', a: a};
};
var $terezka$elm_charts$Internal$Many$editLimits = F2(
	function (edit, _v0) {
		var group_ = _v0.a;
		return $terezka$elm_charts$Internal$Item$Rendered(
			_Utils_update(
				group_,
				{
					toLimits: function (c) {
						return function (_v1) {
							var x = _v1.a;
							var xs = _v1.b;
							return A2(
								edit,
								x,
								group_.toLimits(c));
						}(c.items);
					}
				}));
	});
var $terezka$elm_charts$Internal$Item$getPosition = F2(
	function (plane, _v0) {
		var item = _v0.a;
		return A2(item.toPosition, plane, item.config);
	});
var $terezka$elm_charts$Internal$Item$getX1 = function (_v0) {
	var item = _v0.a;
	return item.config.values.x1;
};
var $terezka$elm_charts$Internal$Item$getX2 = function (_v0) {
	var item = _v0.a;
	return item.config.values.x2;
};
var $elm$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _v0) {
				var trues = _v0.a;
				var falses = _v0.b;
				return pred(x) ? _Utils_Tuple2(
					A2($elm$core$List$cons, x, trues),
					falses) : _Utils_Tuple2(
					trues,
					A2($elm$core$List$cons, x, falses));
			});
		return A3(
			$elm$core$List$foldr,
			step,
			_Utils_Tuple2(_List_Nil, _List_Nil),
			list);
	});
var $terezka$elm_charts$Internal$Helpers$gatherWith = F2(
	function (testFn, list) {
		var helper = F2(
			function (scattered, gathered) {
				if (!scattered.b) {
					return $elm$core$List$reverse(gathered);
				} else {
					var toGather = scattered.a;
					var population = scattered.b;
					var _v1 = A2(
						$elm$core$List$partition,
						testFn(toGather),
						population);
					var gathering = _v1.a;
					var remaining = _v1.b;
					return A2(
						helper,
						remaining,
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(toGather, gathering),
							gathered));
				}
			});
		return A2(helper, list, _List_Nil);
	});
var $elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');
var $terezka$elm_charts$Internal$Coordinates$Position = F4(
	function (x1, x2, y1, y2) {
		return {x1: x1, x2: x2, y1: y1, y2: y2};
	});
var $terezka$elm_charts$Internal$Coordinates$foldPosition = F2(
	function (func, data) {
		var fold = F2(
			function (datum, posM) {
				if (posM.$ === 'Just') {
					var pos = posM.a;
					return $elm$core$Maybe$Just(
						{
							x1: A2(
								$elm$core$Basics$min,
								func(datum).x1,
								pos.x1),
							x2: A2(
								$elm$core$Basics$max,
								func(datum).x2,
								pos.x2),
							y1: A2(
								$elm$core$Basics$min,
								func(datum).y1,
								pos.y1),
							y2: A2(
								$elm$core$Basics$max,
								func(datum).y2,
								pos.y2)
						});
				} else {
					return $elm$core$Maybe$Just(
						func(datum));
				}
			});
		return A2(
			$elm$core$Maybe$withDefault,
			A4($terezka$elm_charts$Internal$Coordinates$Position, 0, 0, 0, 0),
			A3($elm$core$List$foldl, fold, $elm$core$Maybe$Nothing, data));
	});
var $elm$svg$Svg$g = $elm$svg$Svg$trustedNode('g');
var $terezka$elm_charts$Internal$Item$getLimits = function (_v0) {
	var item = _v0.a;
	return item.toLimits(item.config);
};
var $terezka$elm_charts$Internal$Item$toHtml = function (_v0) {
	var item = _v0.a;
	return item.toHtml(item.config);
};
var $terezka$elm_charts$Internal$Item$toSvg = F2(
	function (plane, _v0) {
		var item = _v0.a;
		return A3(
			item.toSvg,
			plane,
			item.config,
			A2(item.toPosition, plane, item.config));
	});
var $terezka$elm_charts$Internal$Many$toGroup = F2(
	function (first, rest) {
		var concatTuple = function (_v1) {
			var x = _v1.a;
			var xs = _v1.b;
			return A2($elm$core$List$cons, x, xs);
		};
		return $terezka$elm_charts$Internal$Item$Rendered(
			{
				config: {
					items: _Utils_Tuple2(first, rest)
				},
				toHtml: function (c) {
					return _List_fromArray(
						[
							A2(
							$elm$html$Html$table,
							_List_Nil,
							A2(
								$elm$core$List$concatMap,
								$terezka$elm_charts$Internal$Item$toHtml,
								concatTuple(c.items)))
						]);
				},
				toLimits: function (c) {
					return A2(
						$terezka$elm_charts$Internal$Coordinates$foldPosition,
						$terezka$elm_charts$Internal$Item$getLimits,
						concatTuple(c.items));
				},
				toPosition: F2(
					function (p, c) {
						return A2(
							$terezka$elm_charts$Internal$Coordinates$foldPosition,
							$terezka$elm_charts$Internal$Item$getPosition(p),
							concatTuple(c.items));
					}),
				toSvg: F3(
					function (p, c, _v0) {
						return A2(
							$elm$svg$Svg$g,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$class('elm-charts__group')
								]),
							A2(
								$elm$core$List$map,
								$terezka$elm_charts$Internal$Item$toSvg(p),
								concatTuple(c.items)));
					})
			});
	});
var $terezka$elm_charts$Internal$Many$groupingHelp = F2(
	function (_v0, items) {
		var shared = _v0.shared;
		var equality = _v0.equality;
		var edits = _v0.edits;
		var toShared = function (_v2) {
			var item = _v2.a;
			return shared(item.config);
		};
		var toNewGroup = function (_v1) {
			var i = _v1.a;
			var is = _v1.b;
			return edits(
				A2($terezka$elm_charts$Internal$Many$toGroup, i, is));
		};
		var toEquality = F2(
			function (aO, bO) {
				return A2(
					equality,
					toShared(aO),
					toShared(bO));
			});
		return A2(
			$elm$core$List$map,
			toNewGroup,
			A2($terezka$elm_charts$Internal$Helpers$gatherWith, toEquality, items));
	});
var $terezka$elm_charts$Internal$Many$bins = A2(
	$terezka$elm_charts$Internal$Many$Remodel,
	$terezka$elm_charts$Internal$Item$getPosition,
	$terezka$elm_charts$Internal$Many$groupingHelp(
		{
			edits: $terezka$elm_charts$Internal$Many$editLimits(
				F2(
					function (item, pos) {
						return _Utils_update(
							pos,
							{
								x1: $terezka$elm_charts$Internal$Item$getX1(item),
								x2: $terezka$elm_charts$Internal$Item$getX2(item)
							});
					})),
			equality: F2(
				function (a, b) {
					return _Utils_eq(a.x1, b.x1) && (_Utils_eq(a.x2, b.x2) && (_Utils_eq(a.elIndex, b.elIndex) && _Utils_eq(a.dataIndex, b.dataIndex)));
				}),
			shared: function (config) {
				return {dataIndex: config.tooltipInfo.data, elIndex: config.tooltipInfo.elIndex, x1: config.values.x1, x2: config.values.x2};
			}
		}));
var $terezka$elm_charts$Chart$Item$bins = $terezka$elm_charts$Internal$Many$bins;
var $terezka$elm_charts$Internal$Produce$defaultBars = {grid: false, grouped: true, margin: 0.1, roundBottom: 0, roundTop: 0, spacing: 0.05, x1: $elm$core$Maybe$Nothing, x2: $elm$core$Maybe$Nothing};
var $terezka$elm_charts$Internal$Item$generalize = F2(
	function (toAny, _v0) {
		var item = _v0.a;
		return $terezka$elm_charts$Internal$Item$Rendered(
			{
				config: {
					product: toAny(item.config.product),
					toAny: $elm$core$Basics$identity,
					tooltipInfo: item.config.tooltipInfo,
					values: item.config.values
				},
				toHtml: function (c) {
					return $terezka$elm_charts$Internal$Item$toHtml(
						$terezka$elm_charts$Internal$Item$Rendered(item));
				},
				toLimits: function (_v1) {
					return item.toLimits(item.config);
				},
				toPosition: F2(
					function (plane, _v2) {
						return A2(item.toPosition, plane, item.config);
					}),
				toSvg: F3(
					function (plane, _v3, _v4) {
						return A2(
							$terezka$elm_charts$Internal$Item$toSvg,
							plane,
							$terezka$elm_charts$Internal$Item$Rendered(item));
					})
			});
	});
var $terezka$elm_charts$Internal$Many$getMembers = function (_v0) {
	var group_ = _v0.a;
	return function (_v1) {
		var x = _v1.a;
		var xs = _v1.b;
		return A2($elm$core$List$cons, x, xs);
	}(group_.config.items);
};
var $terezka$elm_charts$Internal$Many$getGenerals = function (group_) {
	var generalize = function (_v0) {
		var item = _v0.a;
		return A2(
			$terezka$elm_charts$Internal$Item$generalize,
			item.config.toAny,
			$terezka$elm_charts$Internal$Item$Rendered(item));
	};
	return A2(
		$elm$core$List$map,
		generalize,
		$terezka$elm_charts$Internal$Many$getMembers(group_));
};
var $terezka$elm_charts$Chart$Item$getLimits = $terezka$elm_charts$Internal$Item$getLimits;
var $terezka$elm_charts$Internal$Item$map = F2(
	function (func, _v0) {
		var item = _v0.a;
		return $terezka$elm_charts$Internal$Item$Rendered(
			{
				config: {
					product: item.config.product,
					toAny: item.config.toAny,
					tooltipInfo: item.config.tooltipInfo,
					values: {
						datum: func(item.config.values.datum),
						isReal: item.config.values.isReal,
						x1: item.config.values.x1,
						x2: item.config.values.x2,
						y: item.config.values.y
					}
				},
				toHtml: function (_v1) {
					return $terezka$elm_charts$Internal$Item$toHtml(
						$terezka$elm_charts$Internal$Item$Rendered(item));
				},
				toLimits: function (_v2) {
					return item.toLimits(item.config);
				},
				toPosition: F2(
					function (plane, _v3) {
						return A2(item.toPosition, plane, item.config);
					}),
				toSvg: F3(
					function (plane, _v4, _v5) {
						return A2(
							$terezka$elm_charts$Internal$Item$toSvg,
							plane,
							$terezka$elm_charts$Internal$Item$Rendered(item));
					})
			});
	});
var $elm$svg$Svg$map = $elm$virtual_dom$VirtualDom$map;
var $terezka$elm_charts$Internal$Legend$BarLegend = F2(
	function (a, b) {
		return {$: 'BarLegend', a: a, b: b};
	});
var $terezka$elm_charts$Chart$Attributes$border = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{border: v});
	});
var $terezka$elm_charts$Chart$Attributes$color = F2(
	function (v, config) {
		return (v === '') ? config : _Utils_update(
			config,
			{color: v});
	});
var $terezka$elm_charts$Internal$Helpers$pink = '#ea60df';
var $terezka$elm_charts$Internal$Svg$defaultBar = {attrs: _List_Nil, border: 'white', borderWidth: 0, color: $terezka$elm_charts$Internal$Helpers$pink, design: $elm$core$Maybe$Nothing, highlight: 0, highlightColor: '', highlightWidth: 10, opacity: 1, roundBottom: 0, roundTop: 0};
var $terezka$elm_charts$Chart$Attributes$roundBottom = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{roundBottom: v});
	});
var $terezka$elm_charts$Chart$Attributes$roundTop = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{roundTop: v});
	});
var $terezka$elm_charts$Internal$Property$toConfigs = function (prop) {
	if (prop.$ === 'Property') {
		var config = prop.a;
		return _List_fromArray(
			[config]);
	} else {
		var configs = prop.a;
		return configs;
	}
};
var $terezka$elm_charts$Internal$Helpers$blue = '#12A5ED';
var $terezka$elm_charts$Internal$Helpers$brown = '#871c1c';
var $terezka$elm_charts$Internal$Helpers$green = '#71c614';
var $terezka$elm_charts$Internal$Helpers$moss = '#92b42c';
var $terezka$elm_charts$Internal$Helpers$orange = '#FF8400';
var $terezka$elm_charts$Internal$Helpers$purple = '#7b4dff';
var $terezka$elm_charts$Internal$Helpers$red = '#F5325B';
var $terezka$elm_charts$Internal$Helpers$toDefault = F3(
	function (_default, items, index) {
		var dict = $elm$core$Dict$fromList(
			A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, items));
		var numOfItems = $elm$core$Dict$size(dict);
		var itemIndex = index % numOfItems;
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A2($elm$core$Dict$get, itemIndex, dict));
	});
var $terezka$elm_charts$Internal$Helpers$turquoise = '#22d2ba';
var $terezka$elm_charts$Internal$Helpers$yellow = '#FFCA00';
var $terezka$elm_charts$Internal$Helpers$toDefaultColor = A2(
	$terezka$elm_charts$Internal$Helpers$toDefault,
	$terezka$elm_charts$Internal$Helpers$pink,
	_List_fromArray(
		[$terezka$elm_charts$Internal$Helpers$purple, $terezka$elm_charts$Internal$Helpers$pink, $terezka$elm_charts$Internal$Helpers$blue, $terezka$elm_charts$Internal$Helpers$green, $terezka$elm_charts$Internal$Helpers$red, $terezka$elm_charts$Internal$Helpers$yellow, $terezka$elm_charts$Internal$Helpers$turquoise, $terezka$elm_charts$Internal$Helpers$orange, $terezka$elm_charts$Internal$Helpers$moss, $terezka$elm_charts$Internal$Helpers$brown]));
var $terezka$elm_charts$Internal$Legend$toBarLegends = F3(
	function (elIndex, barsAttrs, properties) {
		var toBarConfig = function (attrs) {
			return A2($terezka$elm_charts$Internal$Helpers$apply, attrs, $terezka$elm_charts$Internal$Svg$defaultBar);
		};
		var barsConfig = A2($terezka$elm_charts$Internal$Helpers$apply, barsAttrs, $terezka$elm_charts$Internal$Produce$defaultBars);
		var toBarLegend = F2(
			function (colorIndex, prop) {
				var rounding = A2($elm$core$Basics$max, barsConfig.roundTop, barsConfig.roundBottom);
				var defaultName = 'Property #' + $elm$core$String$fromInt(colorIndex + 1);
				var defaultColor = $terezka$elm_charts$Internal$Helpers$toDefaultColor(colorIndex);
				var defaultAttrs = _List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$roundTop(rounding),
						$terezka$elm_charts$Chart$Attributes$roundBottom(rounding),
						$terezka$elm_charts$Chart$Attributes$color(defaultColor),
						$terezka$elm_charts$Chart$Attributes$border(defaultColor)
					]);
				var attrsOrg = _Utils_ap(defaultAttrs, prop.attrs);
				var productOrg = toBarConfig(attrsOrg);
				var attrs = _Utils_eq(productOrg.border, defaultColor) ? _Utils_ap(
					attrsOrg,
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$border(productOrg.color)
						])) : attrsOrg;
				return A2(
					$terezka$elm_charts$Internal$Legend$BarLegend,
					A2($elm$core$Maybe$withDefault, defaultName, prop.meta),
					attrs);
			});
		return A2(
			$elm$core$List$indexedMap,
			function (propIndex) {
				return toBarLegend(elIndex + propIndex);
			},
			A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Property$toConfigs, properties));
	});
var $terezka$elm_charts$Internal$Item$Bar = function (a) {
	return {$: 'Bar', a: a};
};
var $terezka$elm_charts$Internal$Commands$Arc = F7(
	function (a, b, c, d, e, f, g) {
		return {$: 'Arc', a: a, b: b, c: c, d: d, e: e, f: f, g: g};
	});
var $terezka$elm_charts$Internal$Commands$Line = F2(
	function (a, b) {
		return {$: 'Line', a: a, b: b};
	});
var $terezka$elm_charts$Internal$Commands$Move = F2(
	function (a, b) {
		return {$: 'Move', a: a, b: b};
	});
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $terezka$elm_charts$Internal$Commands$joinCommands = function (commands) {
	return A2($elm$core$String$join, ' ', commands);
};
var $terezka$elm_charts$Internal$Commands$stringBoolInt = function (bool) {
	return bool ? '1' : '0';
};
var $terezka$elm_charts$Internal$Commands$stringPoint = function (_v0) {
	var x = _v0.a;
	var y = _v0.b;
	return $elm$core$String$fromFloat(x) + (' ' + $elm$core$String$fromFloat(y));
};
var $terezka$elm_charts$Internal$Commands$stringPoints = function (points) {
	return A2(
		$elm$core$String$join,
		',',
		A2($elm$core$List$map, $terezka$elm_charts$Internal$Commands$stringPoint, points));
};
var $terezka$elm_charts$Internal$Commands$stringCommand = function (command) {
	switch (command.$) {
		case 'Move':
			var x = command.a;
			var y = command.b;
			return 'M' + $terezka$elm_charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 'Line':
			var x = command.a;
			var y = command.b;
			return 'L' + $terezka$elm_charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 'CubicBeziers':
			var cx1 = command.a;
			var cy1 = command.b;
			var cx2 = command.c;
			var cy2 = command.d;
			var x = command.e;
			var y = command.f;
			return 'C' + $terezka$elm_charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(cx2, cy2),
						_Utils_Tuple2(x, y)
					]));
		case 'CubicBeziersShort':
			var cx1 = command.a;
			var cy1 = command.b;
			var x = command.c;
			var y = command.d;
			return 'Q' + $terezka$elm_charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(x, y)
					]));
		case 'QuadraticBeziers':
			var cx1 = command.a;
			var cy1 = command.b;
			var x = command.c;
			var y = command.d;
			return 'Q' + $terezka$elm_charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(x, y)
					]));
		case 'QuadraticBeziersShort':
			var x = command.a;
			var y = command.b;
			return 'T' + $terezka$elm_charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 'Arc':
			var rx = command.a;
			var ry = command.b;
			var xAxisRotation = command.c;
			var largeArcFlag = command.d;
			var sweepFlag = command.e;
			var x = command.f;
			var y = command.g;
			return 'A ' + $terezka$elm_charts$Internal$Commands$joinCommands(
				_List_fromArray(
					[
						$terezka$elm_charts$Internal$Commands$stringPoint(
						_Utils_Tuple2(rx, ry)),
						$elm$core$String$fromInt(xAxisRotation),
						$terezka$elm_charts$Internal$Commands$stringBoolInt(largeArcFlag),
						$terezka$elm_charts$Internal$Commands$stringBoolInt(sweepFlag),
						$terezka$elm_charts$Internal$Commands$stringPoint(
						_Utils_Tuple2(x, y))
					]));
		default:
			return 'Z';
	}
};
var $terezka$elm_charts$Internal$Commands$Close = {$: 'Close'};
var $terezka$elm_charts$Internal$Commands$CubicBeziers = F6(
	function (a, b, c, d, e, f) {
		return {$: 'CubicBeziers', a: a, b: b, c: c, d: d, e: e, f: f};
	});
var $terezka$elm_charts$Internal$Commands$CubicBeziersShort = F4(
	function (a, b, c, d) {
		return {$: 'CubicBeziersShort', a: a, b: b, c: c, d: d};
	});
var $terezka$elm_charts$Internal$Commands$QuadraticBeziers = F4(
	function (a, b, c, d) {
		return {$: 'QuadraticBeziers', a: a, b: b, c: c, d: d};
	});
var $terezka$elm_charts$Internal$Commands$QuadraticBeziersShort = F2(
	function (a, b) {
		return {$: 'QuadraticBeziersShort', a: a, b: b};
	});
var $terezka$elm_charts$Internal$Coordinates$innerLength = function (axis) {
	return A2($elm$core$Basics$max, 1, (axis.length - axis.marginMin) - axis.marginMax);
};
var $terezka$elm_charts$Internal$Coordinates$innerWidth = function (plane) {
	return $terezka$elm_charts$Internal$Coordinates$innerLength(plane.x);
};
var $terezka$elm_charts$Internal$Coordinates$range = function (axis) {
	var diff = axis.max - axis.min;
	return (diff > 0) ? diff : 1;
};
var $terezka$elm_charts$Internal$Coordinates$scaleSVGX = F2(
	function (plane, value) {
		return (value * $terezka$elm_charts$Internal$Coordinates$innerWidth(plane)) / $terezka$elm_charts$Internal$Coordinates$range(plane.x);
	});
var $terezka$elm_charts$Internal$Coordinates$toSVGX = F2(
	function (plane, value) {
		return A2($terezka$elm_charts$Internal$Coordinates$scaleSVGX, plane, value - plane.x.min) + plane.x.marginMin;
	});
var $terezka$elm_charts$Internal$Coordinates$innerHeight = function (plane) {
	return $terezka$elm_charts$Internal$Coordinates$innerLength(plane.y);
};
var $terezka$elm_charts$Internal$Coordinates$scaleSVGY = F2(
	function (plane, value) {
		return (value * $terezka$elm_charts$Internal$Coordinates$innerHeight(plane)) / $terezka$elm_charts$Internal$Coordinates$range(plane.y);
	});
var $terezka$elm_charts$Internal$Coordinates$toSVGY = F2(
	function (plane, value) {
		return A2($terezka$elm_charts$Internal$Coordinates$scaleSVGY, plane, plane.y.max - value) + plane.y.marginMin;
	});
var $terezka$elm_charts$Internal$Commands$translate = F2(
	function (plane, command) {
		switch (command.$) {
			case 'Move':
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$elm_charts$Internal$Commands$Move,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'Line':
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$elm_charts$Internal$Commands$Line,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'CubicBeziers':
				var cx1 = command.a;
				var cy1 = command.b;
				var cx2 = command.c;
				var cy2 = command.d;
				var x = command.e;
				var y = command.f;
				return A6(
					$terezka$elm_charts$Internal$Commands$CubicBeziers,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, cx2),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, cy2),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'CubicBeziersShort':
				var cx1 = command.a;
				var cy1 = command.b;
				var x = command.c;
				var y = command.d;
				return A4(
					$terezka$elm_charts$Internal$Commands$CubicBeziersShort,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'QuadraticBeziers':
				var cx1 = command.a;
				var cy1 = command.b;
				var x = command.c;
				var y = command.d;
				return A4(
					$terezka$elm_charts$Internal$Commands$QuadraticBeziers,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'QuadraticBeziersShort':
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$elm_charts$Internal$Commands$QuadraticBeziersShort,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'Arc':
				var rx = command.a;
				var ry = command.b;
				var xAxisRotation = command.c;
				var largeArcFlag = command.d;
				var sweepFlag = command.e;
				var x = command.f;
				var y = command.g;
				return A7(
					$terezka$elm_charts$Internal$Commands$Arc,
					rx,
					ry,
					xAxisRotation,
					largeArcFlag,
					sweepFlag,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			default:
				return $terezka$elm_charts$Internal$Commands$Close;
		}
	});
var $terezka$elm_charts$Internal$Commands$description = F2(
	function (plane, commands) {
		return $terezka$elm_charts$Internal$Commands$joinCommands(
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$terezka$elm_charts$Internal$Commands$translate(plane),
					$terezka$elm_charts$Internal$Commands$stringCommand),
				commands));
	});
var $elm$svg$Svg$Attributes$fillOpacity = _VirtualDom_attribute('fill-opacity');
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $terezka$elm_charts$Internal$Coordinates$scaleCartesianX = F2(
	function (plane, value) {
		return (value * $terezka$elm_charts$Internal$Coordinates$range(plane.x)) / $terezka$elm_charts$Internal$Coordinates$innerWidth(plane);
	});
var $terezka$elm_charts$Internal$Coordinates$scaleCartesianY = F2(
	function (plane, value) {
		return (value * $terezka$elm_charts$Internal$Coordinates$range(plane.y)) / $terezka$elm_charts$Internal$Coordinates$innerHeight(plane);
	});
var $elm$svg$Svg$Attributes$strokeOpacity = _VirtualDom_attribute('stroke-opacity');
var $terezka$elm_charts$Internal$Svg$apply = F2(
	function (funcs, _default) {
		var apply_ = F2(
			function (f, a) {
				return f(a);
			});
		return A3($elm$core$List$foldl, apply_, _default, funcs);
	});
var $elm$svg$Svg$defs = $elm$svg$Svg$trustedNode('defs');
var $elm$svg$Svg$Attributes$id = _VirtualDom_attribute('id');
var $elm$svg$Svg$line = $elm$svg$Svg$trustedNode('line');
var $elm$svg$Svg$linearGradient = $elm$svg$Svg$trustedNode('linearGradient');
var $elm$svg$Svg$Attributes$offset = _VirtualDom_attribute('offset');
var $elm$svg$Svg$pattern = $elm$svg$Svg$trustedNode('pattern');
var $elm$svg$Svg$Attributes$patternTransform = _VirtualDom_attribute('patternTransform');
var $elm$svg$Svg$Attributes$patternUnits = _VirtualDom_attribute('patternUnits');
var $elm$svg$Svg$stop = $elm$svg$Svg$trustedNode('stop');
var $elm$svg$Svg$Attributes$stopColor = _VirtualDom_attribute('stop-color');
var $elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute('x1');
var $elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute('x2');
var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var $elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute('y1');
var $elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute('y2');
var $terezka$elm_charts$Internal$Svg$toPattern = F2(
	function (defaultColor, design) {
		var toPatternId = function (props) {
			return A3(
				$elm$core$String$replace,
				'(',
				'-',
				A3(
					$elm$core$String$replace,
					')',
					'-',
					A3(
						$elm$core$String$replace,
						'.',
						'-',
						A3(
							$elm$core$String$replace,
							',',
							'-',
							A3(
								$elm$core$String$replace,
								' ',
								'-',
								A2(
									$elm$core$String$join,
									'-',
									_Utils_ap(
										_List_fromArray(
											[
												'elm-charts__pattern',
												function () {
												switch (design.$) {
													case 'Striped':
														return 'striped';
													case 'Dotted':
														return 'dotted';
													default:
														return 'gradient';
												}
											}()
											]),
										props)))))));
		};
		var toPatternDefs = F4(
			function (id, spacing, rotate, inside) {
				return A2(
					$elm$svg$Svg$defs,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$pattern,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$id(id),
									$elm$svg$Svg$Attributes$patternUnits('userSpaceOnUse'),
									$elm$svg$Svg$Attributes$width(
									$elm$core$String$fromFloat(spacing)),
									$elm$svg$Svg$Attributes$height(
									$elm$core$String$fromFloat(spacing)),
									$elm$svg$Svg$Attributes$patternTransform(
									'rotate(' + ($elm$core$String$fromFloat(rotate) + ')'))
								]),
							_List_fromArray(
								[inside]))
						]));
			});
		var _v0 = function () {
			switch (design.$) {
				case 'Striped':
					var edits = design.a;
					var config = A2(
						$terezka$elm_charts$Internal$Svg$apply,
						edits,
						{color: defaultColor, rotate: 45, spacing: 4, width: 3});
					var theId = toPatternId(
						_List_fromArray(
							[
								config.color,
								$elm$core$String$fromFloat(config.width),
								$elm$core$String$fromFloat(config.spacing),
								$elm$core$String$fromFloat(config.rotate)
							]));
					return _Utils_Tuple2(
						A4(
							toPatternDefs,
							theId,
							config.spacing,
							config.rotate,
							A2(
								$elm$svg$Svg$line,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$x1('0'),
										$elm$svg$Svg$Attributes$y('0'),
										$elm$svg$Svg$Attributes$x2('0'),
										$elm$svg$Svg$Attributes$y2(
										$elm$core$String$fromFloat(config.spacing)),
										$elm$svg$Svg$Attributes$stroke(config.color),
										$elm$svg$Svg$Attributes$strokeWidth(
										$elm$core$String$fromFloat(config.width))
									]),
								_List_Nil)),
						theId);
				case 'Dotted':
					var edits = design.a;
					var config = A2(
						$terezka$elm_charts$Internal$Svg$apply,
						edits,
						{color: defaultColor, rotate: 45, spacing: 4, width: 3});
					var theId = toPatternId(
						_List_fromArray(
							[
								config.color,
								$elm$core$String$fromFloat(config.width),
								$elm$core$String$fromFloat(config.spacing),
								$elm$core$String$fromFloat(config.rotate)
							]));
					return _Utils_Tuple2(
						A4(
							toPatternDefs,
							theId,
							config.spacing,
							config.rotate,
							A2(
								$elm$svg$Svg$circle,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$fill(config.color),
										$elm$svg$Svg$Attributes$cx(
										$elm$core$String$fromFloat(config.width / 3)),
										$elm$svg$Svg$Attributes$cy(
										$elm$core$String$fromFloat(config.width / 3)),
										$elm$svg$Svg$Attributes$r(
										$elm$core$String$fromFloat(config.width / 3))
									]),
								_List_Nil)),
						theId);
				default:
					var edits = design.a;
					var colors = _Utils_eq(edits, _List_Nil) ? _List_fromArray(
						[defaultColor, 'white']) : edits;
					var theId = toPatternId(colors);
					var totalColors = $elm$core$List$length(colors);
					var toPercentage = function (i) {
						return (i * 100) / (totalColors - 1);
					};
					var toStop = F2(
						function (i, c) {
							return A2(
								$elm$svg$Svg$stop,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$offset(
										$elm$core$String$fromFloat(
											toPercentage(i)) + '%'),
										$elm$svg$Svg$Attributes$stopColor(c)
									]),
								_List_Nil);
						});
					return _Utils_Tuple2(
						A2(
							$elm$svg$Svg$defs,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$svg$Svg$linearGradient,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$id(theId),
											$elm$svg$Svg$Attributes$x1('0'),
											$elm$svg$Svg$Attributes$x2('0'),
											$elm$svg$Svg$Attributes$y1('0'),
											$elm$svg$Svg$Attributes$y2('1')
										]),
									A2($elm$core$List$indexedMap, toStop, colors))
								])),
						theId);
			}
		}();
		var patternDefs = _v0.a;
		var patternId = _v0.b;
		return _Utils_Tuple2(patternDefs, 'url(#' + (patternId + ')'));
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $elm$html$Html$Attributes$map = $elm$virtual_dom$VirtualDom$mapAttribute;
var $terezka$elm_charts$Internal$Svg$withAttrs = F3(
	function (attrs, toEl, defaultAttrs) {
		return toEl(
			_Utils_ap(
				defaultAttrs,
				A2(
					$elm$core$List$map,
					$elm$html$Html$Attributes$map($elm$core$Basics$never),
					attrs)));
	});
var $elm$svg$Svg$Attributes$clipPath = _VirtualDom_attribute('clip-path');
var $terezka$elm_charts$Internal$Coordinates$toId = function (plane) {
	var numToStr = A2(
		$elm$core$Basics$composeR,
		$elm$core$String$fromFloat,
		A2($elm$core$String$replace, '.', '-'));
	return A2(
		$elm$core$String$join,
		'_',
		_List_fromArray(
			[
				'elm-charts__id',
				numToStr(plane.x.length),
				numToStr(plane.x.min),
				numToStr(plane.x.max),
				numToStr(plane.x.marginMin),
				numToStr(plane.x.marginMax),
				numToStr(plane.y.length),
				numToStr(plane.y.min),
				numToStr(plane.y.max),
				numToStr(plane.y.marginMin),
				numToStr(plane.y.marginMax)
			]));
};
var $terezka$elm_charts$Internal$Svg$withinChartArea = function (plane) {
	return $elm$svg$Svg$Attributes$clipPath(
		'url(#' + ($terezka$elm_charts$Internal$Coordinates$toId(plane) + ')'));
};
var $terezka$elm_charts$Internal$Svg$bar = F3(
	function (plane, config, point) {
		var viewBar = F6(
			function (fill, fillOpacity, border, borderWidth, strokeOpacity, cmds) {
				return A4(
					$terezka$elm_charts$Internal$Svg$withAttrs,
					config.attrs,
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__bar'),
							$elm$svg$Svg$Attributes$fill(fill),
							$elm$svg$Svg$Attributes$fillOpacity(
							$elm$core$String$fromFloat(fillOpacity)),
							$elm$svg$Svg$Attributes$stroke(border),
							$elm$svg$Svg$Attributes$strokeWidth(
							$elm$core$String$fromFloat(borderWidth)),
							$elm$svg$Svg$Attributes$strokeOpacity(
							$elm$core$String$fromFloat(strokeOpacity)),
							$elm$svg$Svg$Attributes$d(
							A2($terezka$elm_charts$Internal$Commands$description, plane, cmds)),
							$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
						]),
					_List_Nil);
			});
		var highlightColor = (config.highlightColor === '') ? config.color : config.highlightColor;
		var borderWidthCarY = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, config.borderWidth / 2);
		var highlightWidthCarY = borderWidthCarY + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, config.highlightWidth / 2);
		var borderWidthCarX = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, config.borderWidth / 2);
		var highlightWidthCarX = borderWidthCarX + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, config.highlightWidth / 2);
		var pos = {
			x1: A2($elm$core$Basics$min, point.x1, point.x2) + borderWidthCarX,
			x2: A2($elm$core$Basics$max, point.x1, point.x2) - borderWidthCarX,
			y1: A2($elm$core$Basics$min, point.y1, point.y2) + borderWidthCarY,
			y2: A2($elm$core$Basics$max, point.y1, point.y2) - borderWidthCarY
		};
		var height = $elm$core$Basics$abs(pos.y2 - pos.y1);
		var highlightPos = {x1: pos.x1 - highlightWidthCarX, x2: pos.x2 + highlightWidthCarX, y1: pos.y1 - highlightWidthCarY, y2: pos.y2 + highlightWidthCarY};
		var width = $elm$core$Basics$abs(pos.x2 - pos.x1);
		var roundingBottom = (A2($terezka$elm_charts$Internal$Coordinates$scaleSVGX, plane, width) * 0.5) * A3($elm$core$Basics$clamp, 0, 1, config.roundBottom);
		var radiusBottomX = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, roundingBottom);
		var radiusBottomY = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, roundingBottom);
		var roundingTop = (A2($terezka$elm_charts$Internal$Coordinates$scaleSVGX, plane, width) * 0.5) * A3($elm$core$Basics$clamp, 0, 1, config.roundTop);
		var radiusTopX = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, roundingTop);
		var radiusTopY = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, roundingTop);
		var _v0 = ((((height - (radiusTopY * 0.8)) - (radiusBottomY * 0.8)) <= 0) || (((width - (radiusTopX * 0.8)) - (radiusBottomX * 0.8)) <= 0)) ? _Utils_Tuple2(0, 0) : _Utils_Tuple2(config.roundTop, config.roundBottom);
		var roundTop = _v0.a;
		var roundBottom = _v0.b;
		var _v1 = function () {
			if (_Utils_eq(pos.y1, pos.y2)) {
				return _Utils_Tuple2(_List_Nil, _List_Nil);
			} else {
				var _v2 = _Utils_Tuple2(roundTop > 0, roundBottom > 0);
				if (!_v2.a) {
					if (!_v2.b) {
						return _Utils_Tuple2(
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, pos.x1, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y1)
								]),
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, highlightPos.x1, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x1, highlightPos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x2, highlightPos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x2, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y1)
								]));
					} else {
						return _Utils_Tuple2(
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, pos.x1 + radiusBottomX, pos.y1),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.x1, pos.y1 + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y1 + radiusBottomY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.x2 - radiusBottomX, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1 + radiusBottomX, pos.y1)
								]),
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, highlightPos.x1 + radiusBottomX, highlightPos.y1),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.x1, highlightPos.y1 + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x1, highlightPos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x2, highlightPos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x2, highlightPos.y1 + radiusBottomY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.x2 - radiusBottomX, highlightPos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x1 + radiusBottomX, highlightPos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2 - radiusBottomX, pos.y1),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, false, pos.x2, pos.y1 + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y1 + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y1)
								]));
					}
				} else {
					if (!_v2.b) {
						return _Utils_Tuple2(
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, pos.x1, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y2 - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.x1 + radiusTopX, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2 - radiusTopX, pos.y2),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.x2, pos.y2 - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y1)
								]),
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, highlightPos.x1, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x1, highlightPos.y2 - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.x1 + radiusTopX, highlightPos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x2 - radiusTopX, highlightPos.y2),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.x2, highlightPos.y2 - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x2, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y2 - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.x2 - radiusTopX, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1 + radiusTopX, pos.y2),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.x1, pos.y2 - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y1)
								]));
					} else {
						return _Utils_Tuple2(
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, pos.x1 + radiusBottomX, pos.y1),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.x1, pos.y1 + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y2 - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.x1 + radiusTopX, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2 - radiusTopX, pos.y2),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.x2, pos.y2 - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y1 + radiusBottomY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.x2 - radiusBottomX, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1 + radiusBottomX, pos.y1)
								]),
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, highlightPos.x1 + radiusBottomX, highlightPos.y1),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.x1, highlightPos.y1 + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x1, highlightPos.y2 - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.x1 + radiusTopX, highlightPos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x2 - radiusTopX, highlightPos.y2),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.x2, highlightPos.y2 - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x2, highlightPos.y1 + radiusBottomY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.x2 - radiusBottomX, highlightPos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x1 + radiusBottomX, highlightPos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2 - radiusBottomX, pos.y1),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, false, pos.x2, pos.y1 + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y2 - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.x2 - radiusTopX, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1 + radiusTopX, pos.y2),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.x1, pos.y2 - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y1 + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y1)
								]));
					}
				}
			}
		}();
		var commands = _v1.a;
		var highlightCommands = _v1.b;
		var viewAuraBar = function (fill) {
			return (!config.highlight) ? A6(viewBar, fill, config.opacity, config.border, config.borderWidth, 1, commands) : A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__bar-with-highlight')
					]),
				_List_fromArray(
					[
						A6(viewBar, highlightColor, config.highlight, 'transparent', 0, 0, highlightCommands),
						A6(viewBar, fill, config.opacity, config.border, config.borderWidth, 1, commands)
					]));
		};
		var _v3 = config.design;
		if (_v3.$ === 'Nothing') {
			return viewAuraBar(config.color);
		} else {
			var design = _v3.a;
			var _v4 = A2($terezka$elm_charts$Internal$Svg$toPattern, config.color, design);
			var patternDefs = _v4.a;
			var fill = _v4.b;
			return A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__bar-with-pattern')
					]),
				_List_fromArray(
					[
						patternDefs,
						viewAuraBar(fill)
					]));
		}
	});
var $terezka$elm_charts$Internal$Produce$toDefaultName = F2(
	function (index, name) {
		return A2(
			$elm$core$Maybe$withDefault,
			'Property #' + $elm$core$String$fromInt(index + 1),
			name);
	});
var $terezka$elm_charts$Internal$Produce$tooltipRow = F3(
	function (color, title, text) {
		return A2(
			$elm$html$Html$tr,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', color),
							A2($elm$html$Html$Attributes$style, 'padding', '0'),
							A2($elm$html$Html$Attributes$style, 'padding-right', '3px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(title + ':')
						])),
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'text-align', 'right'),
							A2($elm$html$Html$Attributes$style, 'padding', '0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(text)
						]))
				]));
	});
var $terezka$elm_charts$Internal$Helpers$withSurround = F2(
	function (all, func) {
		var fold = F4(
			function (index, prev, acc, list) {
				fold:
				while (true) {
					if (list.b) {
						if (list.b.b) {
							var a = list.a;
							var _v1 = list.b;
							var b = _v1.a;
							var rest = _v1.b;
							var $temp$index = index + 1,
								$temp$prev = $elm$core$Maybe$Just(a),
								$temp$acc = _Utils_ap(
								acc,
								_List_fromArray(
									[
										A4(
										func,
										index,
										prev,
										a,
										$elm$core$Maybe$Just(b))
									])),
								$temp$list = A2($elm$core$List$cons, b, rest);
							index = $temp$index;
							prev = $temp$prev;
							acc = $temp$acc;
							list = $temp$list;
							continue fold;
						} else {
							var a = list.a;
							return _Utils_ap(
								acc,
								_List_fromArray(
									[
										A4(func, index, prev, a, $elm$core$Maybe$Nothing)
									]));
						}
					} else {
						return acc;
					}
				}
			});
		return A4(fold, 0, $elm$core$Maybe$Nothing, _List_Nil, all);
	});
var $terezka$elm_charts$Internal$Produce$toBarSeries = F4(
	function (elIndex, barsAttrs, properties, data) {
		var toBarConfig = function (attrs) {
			return A2($terezka$elm_charts$Internal$Helpers$apply, attrs, $terezka$elm_charts$Internal$Svg$defaultBar);
		};
		var barsConfig = A2($terezka$elm_charts$Internal$Helpers$apply, barsAttrs, $terezka$elm_charts$Internal$Produce$defaultBars);
		var toBarItem = F7(
			function (sections, barIndex, sectionIndex, section, colorIndex, dataIndex, bin) {
				var visual = section.visual(bin.datum);
				var value = section.value(bin.datum);
				var start = bin.start;
				var numOfSections = $elm$core$List$length(sections);
				var numOfBars = barsConfig.grouped ? $elm$core$List$length(properties) : 1;
				var minY = (numOfSections > 1) ? $elm$core$Basics$max(0) : $elm$core$Basics$identity;
				var y1 = minY(
					A2($elm$core$Maybe$withDefault, 0, visual) - A2($elm$core$Maybe$withDefault, 0, value));
				var y2 = minY(
					A2($elm$core$Maybe$withDefault, 0, visual));
				var isSingle = numOfSections === 1;
				var isLast = _Utils_eq(sectionIndex, numOfSections - 1);
				var roundTop = (isSingle || isLast) ? barsConfig.roundTop : 0;
				var isFirst = !sectionIndex;
				var roundBottom = (isSingle || isFirst) ? barsConfig.roundBottom : 0;
				var end = bin.end;
				var length = end - start;
				var margin = length * barsConfig.margin;
				var spacing = length * barsConfig.spacing;
				var width = ((length - (margin * 2)) - ((numOfBars - 1) * spacing)) / numOfBars;
				var offset = barsConfig.grouped ? ((barIndex * width) + (barIndex * spacing)) : 0;
				var x1 = (start + margin) + offset;
				var x2 = ((start + margin) + offset) + width;
				var defaultColor = $terezka$elm_charts$Internal$Helpers$toDefaultColor(colorIndex);
				var defaultAttrs = _List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$roundTop(roundTop),
						$terezka$elm_charts$Chart$Attributes$roundBottom(roundBottom),
						$terezka$elm_charts$Chart$Attributes$color(defaultColor),
						$terezka$elm_charts$Chart$Attributes$border(defaultColor)
					]);
				var attrs = _Utils_ap(
					defaultAttrs,
					_Utils_ap(
						section.attrs,
						A5(section.extra, barIndex, sectionIndex, dataIndex, section.meta, bin.datum)));
				var productOrg = toBarConfig(attrs);
				var product = function (p) {
					return _Utils_eq(p.border, defaultColor) ? _Utils_update(
						p,
						{border: p.color}) : p;
				}(
					function (p) {
						var _v21 = p.design;
						if (((_v21.$ === 'Just') && (_v21.a.$ === 'Gradient')) && _v21.a.a.b) {
							var _v22 = _v21.a.a;
							var color = _v22.a;
							return _Utils_eq(p.color, defaultColor) ? _Utils_update(
								p,
								{color: color}) : p;
						} else {
							return p;
						}
					}(productOrg));
				return $terezka$elm_charts$Internal$Item$Rendered(
					{
						config: {
							product: product,
							toAny: $terezka$elm_charts$Internal$Item$Bar,
							tooltipInfo: {
								border: product.border,
								borderWidth: product.borderWidth,
								color: product.color,
								data: dataIndex,
								elIndex: elIndex,
								formatted: section.format(bin.datum),
								index: colorIndex,
								name: section.meta,
								property: barIndex,
								stack: sectionIndex
							},
							values: {
								datum: bin.datum,
								isReal: function () {
									if (value.$ === 'Just') {
										return true;
									} else {
										return false;
									}
								}(),
								x1: start,
								x2: end,
								y: A2($elm$core$Maybe$withDefault, 0, value)
							}
						},
						toHtml: function (c) {
							return _List_fromArray(
								[
									A3(
									$terezka$elm_charts$Internal$Produce$tooltipRow,
									c.tooltipInfo.color,
									A2($terezka$elm_charts$Internal$Produce$toDefaultName, colorIndex, c.tooltipInfo.name),
									section.format(bin.datum))
								]);
						},
						toLimits: function (config) {
							return {
								x1: x1,
								x2: x2,
								y1: A2($elm$core$Basics$min, y1, y2),
								y2: A2($elm$core$Basics$max, y1, y2)
							};
						},
						toPosition: F2(
							function (_v20, config) {
								return {x1: x1, x2: x2, y1: y1, y2: y2};
							}),
						toSvg: F3(
							function (plane, config, position) {
								return A3($terezka$elm_charts$Internal$Svg$bar, plane, product, position);
							})
					});
			});
		var toSeriesItem = F6(
			function (bins, sections, barIndex, sectionIndex, section, colorIndex) {
				var _v13 = A2(
					$elm$core$List$indexedMap,
					A5(toBarItem, sections, barIndex, sectionIndex, section, colorIndex),
					bins);
				if (!_v13.b) {
					return $elm$core$Maybe$Nothing;
				} else {
					var first = _v13.a;
					var rest = _v13.b;
					return $elm$core$Maybe$Just(
						$terezka$elm_charts$Internal$Item$Rendered(
							{
								config: {
									items: _Utils_Tuple2(first, rest)
								},
								toHtml: function (c) {
									return _List_fromArray(
										[
											A2(
											$elm$html$Html$table,
											_List_fromArray(
												[
													A2($elm$html$Html$Attributes$style, 'margin', '0')
												]),
											A2(
												$elm$core$List$concatMap,
												$terezka$elm_charts$Internal$Item$toHtml,
												function (_v14) {
													var x = _v14.a;
													var xs = _v14.b;
													return A2($elm$core$List$cons, x, xs);
												}(c.items)))
										]);
								},
								toLimits: function (c) {
									return A2(
										$terezka$elm_charts$Internal$Coordinates$foldPosition,
										$terezka$elm_charts$Internal$Item$getLimits,
										function (_v15) {
											var x = _v15.a;
											var xs = _v15.b;
											return A2($elm$core$List$cons, x, xs);
										}(c.items));
								},
								toPosition: F2(
									function (plane, c) {
										return A2(
											$terezka$elm_charts$Internal$Coordinates$foldPosition,
											$terezka$elm_charts$Internal$Item$getPosition(plane),
											function (_v16) {
												var x = _v16.a;
												var xs = _v16.b;
												return A2($elm$core$List$cons, x, xs);
											}(c.items));
									}),
								toSvg: F3(
									function (plane, c, _v17) {
										return A2(
											$elm$svg$Svg$g,
											_List_fromArray(
												[
													$elm$svg$Svg$Attributes$class('elm-charts__bar-series')
												]),
											A2(
												$elm$core$List$map,
												$terezka$elm_charts$Internal$Item$toSvg(plane),
												function (_v18) {
													var x = _v18.a;
													var xs = _v18.b;
													return A2($elm$core$List$cons, x, xs);
												}(c.items)));
									})
							}));
				}
			});
		var toBin = F4(
			function (index, prevM, curr, nextM) {
				var _v0 = _Utils_Tuple2(barsConfig.x1, barsConfig.x2);
				if (_v0.a.$ === 'Nothing') {
					if (_v0.b.$ === 'Nothing') {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						return {datum: curr, end: (index + 1) + 0.5, start: (index + 1) - 0.5};
					} else {
						var _v8 = _v0.a;
						var toEnd = _v0.b.a;
						var _v9 = _Utils_Tuple2(prevM, nextM);
						if (_v9.a.$ === 'Just') {
							var prev = _v9.a.a;
							return {
								datum: curr,
								end: toEnd(curr),
								start: toEnd(prev)
							};
						} else {
							if (_v9.b.$ === 'Just') {
								var _v10 = _v9.a;
								var next = _v9.b.a;
								return {
									datum: curr,
									end: toEnd(curr),
									start: toEnd(curr) - (toEnd(next) - toEnd(curr))
								};
							} else {
								var _v11 = _v9.a;
								var _v12 = _v9.b;
								return {
									datum: curr,
									end: toEnd(curr),
									start: toEnd(curr) - 1
								};
							}
						}
					}
				} else {
					if (_v0.b.$ === 'Nothing') {
						var toStart = _v0.a.a;
						var _v3 = _v0.b;
						var _v4 = _Utils_Tuple2(prevM, nextM);
						if (_v4.b.$ === 'Just') {
							var next = _v4.b.a;
							return {
								datum: curr,
								end: toStart(next),
								start: toStart(curr)
							};
						} else {
							if (_v4.a.$ === 'Just') {
								var prev = _v4.a.a;
								var _v5 = _v4.b;
								return {
									datum: curr,
									end: toStart(curr) + (toStart(curr) - toStart(prev)),
									start: toStart(curr)
								};
							} else {
								var _v6 = _v4.a;
								var _v7 = _v4.b;
								return {
									datum: curr,
									end: toStart(curr) + 1,
									start: toStart(curr)
								};
							}
						}
					} else {
						var toStart = _v0.a.a;
						var toEnd = _v0.b.a;
						return {
							datum: curr,
							end: toEnd(curr),
							start: toStart(curr)
						};
					}
				}
			});
		return function (bins) {
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (propIndex, f) {
							return f(elIndex + propIndex);
						}),
					$elm$core$List$concat(
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (barIndex, stacks) {
									return A2(
										$elm$core$List$indexedMap,
										A3(toSeriesItem, bins, stacks, barIndex),
										$elm$core$List$reverse(stacks));
								}),
							A2($elm$core$List$map, $terezka$elm_charts$Internal$Property$toConfigs, properties)))));
		}(
			A2($terezka$elm_charts$Internal$Helpers$withSurround, data, toBin));
	});
var $terezka$elm_charts$Chart$barsMap = F4(
	function (mapData, edits, properties, data) {
		return $terezka$elm_charts$Chart$Indexed(
			function (index) {
				var legends_ = A3($terezka$elm_charts$Internal$Legend$toBarLegends, index, edits, properties);
				var items = A4($terezka$elm_charts$Internal$Produce$toBarSeries, index, edits, properties, data);
				var generalized = A2(
					$elm$core$List$map,
					$terezka$elm_charts$Internal$Item$map(mapData),
					A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Many$getGenerals, items));
				var bins = A2($terezka$elm_charts$Chart$Item$apply, $terezka$elm_charts$Chart$Item$bins, generalized);
				var toLimits = A2($elm$core$List$map, $terezka$elm_charts$Internal$Item$getLimits, bins);
				var barsConfig = A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Produce$defaultBars);
				var toTicks = F2(
					function (plane, acc) {
						return _Utils_update(
							acc,
							{
								xs: _Utils_ap(
									acc.xs,
									barsConfig.grid ? A2(
										$elm$core$List$concatMap,
										A2(
											$elm$core$Basics$composeR,
											$terezka$elm_charts$Chart$Item$getLimits,
											function (pos) {
												return _List_fromArray(
													[pos.x1, pos.x2]);
											}),
										bins) : _List_Nil)
							});
					});
				return _Utils_Tuple2(
					A5(
						$terezka$elm_charts$Chart$BarsElement,
						toLimits,
						generalized,
						legends_,
						toTicks,
						function (plane) {
							return A2(
								$elm$svg$Svg$map,
								$elm$core$Basics$never,
								A2(
									$elm$svg$Svg$g,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$class('elm-charts__bar-series')
										]),
									A2(
										$elm$core$List$map,
										$terezka$elm_charts$Internal$Item$toSvg(plane),
										items)));
						}),
					index + $elm$core$List$length(
						A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Property$toConfigs, properties)));
			});
	});
var $terezka$elm_charts$Chart$bars = F3(
	function (edits, properties, data) {
		return A4($terezka$elm_charts$Chart$barsMap, $elm$core$Basics$identity, edits, properties, data);
	});
var $terezka$elm_charts$Internal$Many$andThen = F2(
	function (_v0, _v1) {
		var toPos2 = _v0.a;
		var func2 = _v0.b;
		var toPos1 = _v1.a;
		var func1 = _v1.b;
		return A2(
			$terezka$elm_charts$Internal$Many$Remodel,
			toPos2,
			function (items) {
				return func2(
					func1(items));
			});
	});
var $terezka$elm_charts$Chart$Item$andThen = $terezka$elm_charts$Internal$Many$andThen;
var $terezka$elm_charts$Internal$Item$isBar = function (_v0) {
	var item = _v0.a;
	var _v1 = item.config.product;
	if (_v1.$ === 'Bar') {
		var bar = _v1.a;
		return $elm$core$Maybe$Just(
			$terezka$elm_charts$Internal$Item$Rendered(
				{
					config: {product: bar, toAny: $terezka$elm_charts$Internal$Item$Bar, tooltipInfo: item.config.tooltipInfo, values: item.config.values},
					toHtml: function (c) {
						return item.toHtml(item.config);
					},
					toLimits: function (_v2) {
						return item.toLimits(item.config);
					},
					toPosition: F2(
						function (plane, _v3) {
							return A2(item.toPosition, plane, item.config);
						}),
					toSvg: F2(
						function (plane, config) {
							return A2($terezka$elm_charts$Internal$Svg$bar, plane, config.product);
						})
				}));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $terezka$elm_charts$Internal$Many$bars = A2(
	$terezka$elm_charts$Internal$Many$Remodel,
	$terezka$elm_charts$Internal$Item$getPosition,
	$elm$core$List$filterMap($terezka$elm_charts$Internal$Item$isBar));
var $terezka$elm_charts$Chart$Item$bars = $terezka$elm_charts$Internal$Many$bars;
var $terezka$elm_charts$Internal$Svg$defaultLabel = {anchor: $elm$core$Maybe$Nothing, attrs: _List_Nil, border: 'white', borderWidth: 0, color: '#808BAB', ellipsis: $elm$core$Maybe$Nothing, fontSize: $elm$core$Maybe$Nothing, hideOverflow: false, rotate: 0, uppercase: false, xOff: 0, yOff: 0};
var $terezka$elm_charts$Internal$Coordinates$bottom = function (pos) {
	return {x: pos.x1 + ((pos.x2 - pos.x1) / 2), y: pos.y1};
};
var $terezka$elm_charts$Chart$Item$getBottom = function (p) {
	return A2(
		$elm$core$Basics$composeR,
		$terezka$elm_charts$Internal$Item$getPosition(p),
		$terezka$elm_charts$Internal$Coordinates$bottom);
};
var $terezka$elm_charts$Chart$defaultLabel = {anchor: $terezka$elm_charts$Internal$Svg$defaultLabel.anchor, attrs: $terezka$elm_charts$Internal$Svg$defaultLabel.attrs, border: $terezka$elm_charts$Internal$Svg$defaultLabel.border, borderWidth: $terezka$elm_charts$Internal$Svg$defaultLabel.borderWidth, color: $terezka$elm_charts$Internal$Svg$defaultLabel.color, ellipsis: $terezka$elm_charts$Internal$Svg$defaultLabel.ellipsis, fontSize: $terezka$elm_charts$Internal$Svg$defaultLabel.fontSize, format: $elm$core$Maybe$Nothing, hideOverflow: $terezka$elm_charts$Internal$Svg$defaultLabel.hideOverflow, position: $terezka$elm_charts$Chart$Item$getBottom, rotate: $terezka$elm_charts$Internal$Svg$defaultLabel.rotate, uppercase: $terezka$elm_charts$Internal$Svg$defaultLabel.uppercase, xOff: $terezka$elm_charts$Internal$Svg$defaultLabel.xOff, yOff: $terezka$elm_charts$Internal$Svg$defaultLabel.yOff};
var $terezka$elm_charts$Chart$SubElements = function (a) {
	return {$: 'SubElements', a: a};
};
var $terezka$elm_charts$Chart$eachCustom = F2(
	function (grouping, func) {
		return $terezka$elm_charts$Chart$SubElements(
			F2(
				function (p, items) {
					var processed = A2($terezka$elm_charts$Chart$Item$apply, grouping, items);
					return A2(
						$elm$core$List$concatMap,
						func(p),
						processed);
				}));
	});
var $terezka$elm_charts$Internal$Item$getDatum = function (_v0) {
	var item = _v0.a;
	return item.config.values.datum;
};
var $terezka$elm_charts$Internal$Many$getData = function (_v0) {
	var group_ = _v0.a;
	return function (_v1) {
		var x = _v1.a;
		var xs = _v1.b;
		return $terezka$elm_charts$Internal$Item$getDatum(x);
	}(group_.config.items);
};
var $terezka$elm_charts$Chart$Item$getOneData = $terezka$elm_charts$Internal$Many$getData;
var $elm$svg$Svg$foreignObject = $elm$svg$Svg$trustedNode('foreignObject');
var $terezka$elm_charts$Internal$Svg$position = F6(
	function (plane, rotation, x_, y_, xOff_, yOff_) {
		return $elm$svg$Svg$Attributes$transform(
			'translate(' + ($elm$core$String$fromFloat(
				A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x_) + xOff_) + (',' + ($elm$core$String$fromFloat(
				A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y_) + yOff_) + (') rotate(' + ($elm$core$String$fromFloat(rotation) + ')'))))));
	});
var $elm$svg$Svg$Attributes$style = _VirtualDom_attribute('style');
var $elm$svg$Svg$text_ = $elm$svg$Svg$trustedNode('text');
var $elm$svg$Svg$tspan = $elm$svg$Svg$trustedNode('tspan');
var $terezka$elm_charts$Internal$Svg$label = F4(
	function (plane, config, inner, point) {
		var _v0 = config.ellipsis;
		if (_v0.$ === 'Nothing') {
			var withOverflowWrap = function (el) {
				return config.hideOverflow ? A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
						]),
					_List_fromArray(
						[el])) : el;
			};
			var uppercaseStyle = config.uppercase ? 'text-transform: uppercase;' : '';
			var fontStyle = function () {
				var _v5 = config.fontSize;
				if (_v5.$ === 'Just') {
					var size_ = _v5.a;
					return 'font-size: ' + ($elm$core$String$fromInt(size_) + 'px;');
				} else {
					return '';
				}
			}();
			var anchorStyle = function () {
				var _v1 = config.anchor;
				if (_v1.$ === 'Nothing') {
					return 'text-anchor: middle;';
				} else {
					switch (_v1.a.$) {
						case 'End':
							var _v2 = _v1.a;
							return 'text-anchor: end;';
						case 'Start':
							var _v3 = _v1.a;
							return 'text-anchor: start;';
						default:
							var _v4 = _v1.a;
							return 'text-anchor: middle;';
					}
				}
			}();
			return withOverflowWrap(
				A4(
					$terezka$elm_charts$Internal$Svg$withAttrs,
					config.attrs,
					$elm$svg$Svg$text_,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__label'),
							$elm$svg$Svg$Attributes$stroke(config.border),
							$elm$svg$Svg$Attributes$strokeWidth(
							$elm$core$String$fromFloat(config.borderWidth)),
							$elm$svg$Svg$Attributes$fill(config.color),
							A6($terezka$elm_charts$Internal$Svg$position, plane, -config.rotate, point.x, point.y, config.xOff, config.yOff),
							$elm$svg$Svg$Attributes$style(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									['pointer-events: none;', fontStyle, anchorStyle, uppercaseStyle])))
						]),
					_List_fromArray(
						[
							A2($elm$svg$Svg$tspan, _List_Nil, inner)
						])));
		} else {
			var ellipsis = _v0.a;
			var xOffWithAnchor = function () {
				var _v11 = config.anchor;
				if (_v11.$ === 'Nothing') {
					return config.xOff - (ellipsis.width / 2);
				} else {
					switch (_v11.a.$) {
						case 'End':
							var _v12 = _v11.a;
							return config.xOff - ellipsis.width;
						case 'Start':
							var _v13 = _v11.a;
							return config.xOff;
						default:
							var _v14 = _v11.a;
							return config.xOff - (ellipsis.width / 2);
					}
				}
			}();
			var withOverflowWrap = function (el) {
				return config.hideOverflow ? A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
						]),
					_List_fromArray(
						[el])) : el;
			};
			var uppercaseStyle = config.uppercase ? A2($elm$html$Html$Attributes$style, 'text-transform', 'uppercase') : A2($elm$html$Html$Attributes$style, '', '');
			var fontStyle = function () {
				var _v10 = config.fontSize;
				if (_v10.$ === 'Just') {
					var size_ = _v10.a;
					return A2(
						$elm$html$Html$Attributes$style,
						'font-size',
						$elm$core$String$fromInt(size_) + 'px');
				} else {
					return A2($elm$html$Html$Attributes$style, '', '');
				}
			}();
			var anchorStyle = function () {
				var _v6 = config.anchor;
				if (_v6.$ === 'Nothing') {
					return A2($elm$html$Html$Attributes$style, 'text-align', 'center');
				} else {
					switch (_v6.a.$) {
						case 'End':
							var _v7 = _v6.a;
							return A2($elm$html$Html$Attributes$style, 'text-align', 'right');
						case 'Start':
							var _v8 = _v6.a;
							return A2($elm$html$Html$Attributes$style, 'text-align', 'left');
						default:
							var _v9 = _v6.a;
							return A2($elm$html$Html$Attributes$style, 'text-align', 'center');
					}
				}
			}();
			return withOverflowWrap(
				A4(
					$terezka$elm_charts$Internal$Svg$withAttrs,
					config.attrs,
					$elm$svg$Svg$foreignObject,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__label'),
							$elm$svg$Svg$Attributes$class('elm-charts__html-label'),
							$elm$svg$Svg$Attributes$width(
							$elm$core$String$fromFloat(ellipsis.width)),
							$elm$svg$Svg$Attributes$height(
							$elm$core$String$fromFloat(ellipsis.height)),
							A6($terezka$elm_charts$Internal$Svg$position, plane, -config.rotate, point.x, point.y, xOffWithAnchor, config.yOff - 10)
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$attribute, 'xmlns', 'http://www.w3.org/1999/xhtml'),
									A2($elm$html$Html$Attributes$style, 'white-space', 'nowrap'),
									A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
									A2($elm$html$Html$Attributes$style, 'text-overflow', 'ellipsis'),
									A2($elm$html$Html$Attributes$style, 'height', '100%'),
									A2($elm$html$Html$Attributes$style, 'pointer-events', 'none'),
									A2($elm$html$Html$Attributes$style, 'color', config.color),
									fontStyle,
									uppercaseStyle,
									anchorStyle
								]),
							inner)
						])));
		}
	});
var $terezka$elm_charts$Chart$SvgElement = function (a) {
	return {$: 'SvgElement', a: a};
};
var $terezka$elm_charts$Chart$svg = function (func) {
	return $terezka$elm_charts$Chart$SvgElement(
		function (p) {
			return func(p);
		});
};
var $elm$svg$Svg$text = $elm$virtual_dom$VirtualDom$text;
var $terezka$elm_charts$Chart$toLabelFromItemLabel = function (config) {
	return {anchor: config.anchor, attrs: config.attrs, border: config.border, borderWidth: config.borderWidth, color: config.color, ellipsis: config.ellipsis, fontSize: config.fontSize, hideOverflow: config.hideOverflow, rotate: config.rotate, uppercase: config.uppercase, xOff: config.xOff, yOff: config.yOff};
};
var $terezka$elm_charts$Chart$binLabels = F2(
	function (toLabel, edits) {
		return A2(
			$terezka$elm_charts$Chart$eachCustom,
			A2($terezka$elm_charts$Chart$Item$andThen, $terezka$elm_charts$Chart$Item$bins, $terezka$elm_charts$Chart$Item$bars),
			F2(
				function (p, item) {
					var config = A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Chart$defaultLabel);
					var text = function () {
						var _v1 = config.format;
						if (_v1.$ === 'Just') {
							var formatting = _v1.a;
							return formatting(item);
						} else {
							return toLabel(
								$terezka$elm_charts$Chart$Item$getOneData(item));
						}
					}();
					return _List_fromArray(
						[
							$terezka$elm_charts$Chart$svg(
							function (_v0) {
								return A4(
									$terezka$elm_charts$Internal$Svg$label,
									p,
									$terezka$elm_charts$Chart$toLabelFromItemLabel(config),
									_List_fromArray(
										[
											$elm$svg$Svg$text(text)
										]),
									A2(config.position, p, item));
							})
						]);
				}));
	});
var $terezka$elm_charts$Internal$Svg$Event = F2(
	function (name, handler) {
		return {handler: handler, name: name};
	});
var $elm$svg$Svg$clipPath = $elm$svg$Svg$trustedNode('clipPath');
var $debois$elm_dom$DOM$offsetHeight = A2($elm$json$Json$Decode$field, 'offsetHeight', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$offsetWidth = A2($elm$json$Json$Decode$field, 'offsetWidth', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$offsetLeft = A2($elm$json$Json$Decode$field, 'offsetLeft', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$offsetParent = F2(
	function (x, decoder) {
		return $elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$json$Json$Decode$field,
					'offsetParent',
					$elm$json$Json$Decode$null(x)),
					A2($elm$json$Json$Decode$field, 'offsetParent', decoder)
				]));
	});
var $debois$elm_dom$DOM$offsetTop = A2($elm$json$Json$Decode$field, 'offsetTop', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$scrollLeft = A2($elm$json$Json$Decode$field, 'scrollLeft', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$scrollTop = A2($elm$json$Json$Decode$field, 'scrollTop', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$position = F2(
	function (x, y) {
		return A2(
			$elm$json$Json$Decode$andThen,
			function (_v0) {
				var x_ = _v0.a;
				var y_ = _v0.b;
				return A2(
					$debois$elm_dom$DOM$offsetParent,
					_Utils_Tuple2(x_, y_),
					A2($debois$elm_dom$DOM$position, x_, y_));
			},
			A5(
				$elm$json$Json$Decode$map4,
				F4(
					function (scrollLeftP, scrollTopP, offsetLeftP, offsetTopP) {
						return _Utils_Tuple2((x + offsetLeftP) - scrollLeftP, (y + offsetTopP) - scrollTopP);
					}),
				$debois$elm_dom$DOM$scrollLeft,
				$debois$elm_dom$DOM$scrollTop,
				$debois$elm_dom$DOM$offsetLeft,
				$debois$elm_dom$DOM$offsetTop));
	});
var $debois$elm_dom$DOM$boundingClientRect = A4(
	$elm$json$Json$Decode$map3,
	F3(
		function (_v0, width, height) {
			var x = _v0.a;
			var y = _v0.b;
			return {height: height, left: x, top: y, width: width};
		}),
	A2($debois$elm_dom$DOM$position, 0, 0),
	$debois$elm_dom$DOM$offsetWidth,
	$debois$elm_dom$DOM$offsetHeight);
var $elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		$elm$json$Json$Decode$andThen,
		thunk,
		$elm$json$Json$Decode$succeed(_Utils_Tuple0));
};
var $debois$elm_dom$DOM$parentElement = function (decoder) {
	return A2($elm$json$Json$Decode$field, 'parentElement', decoder);
};
function $terezka$elm_charts$Internal$Svg$cyclic$decodePosition() {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$debois$elm_dom$DOM$boundingClientRect,
				$elm$json$Json$Decode$lazy(
				function (_v0) {
					return $debois$elm_dom$DOM$parentElement(
						$terezka$elm_charts$Internal$Svg$cyclic$decodePosition());
				})
			]));
}
try {
	var $terezka$elm_charts$Internal$Svg$decodePosition = $terezka$elm_charts$Internal$Svg$cyclic$decodePosition();
	$terezka$elm_charts$Internal$Svg$cyclic$decodePosition = function () {
		return $terezka$elm_charts$Internal$Svg$decodePosition;
	};
} catch ($) {
	throw 'Some top-level definitions from `Internal.Svg` are causing infinite recursion:\n\n  ┌─────┐\n  │    decodePosition\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $terezka$elm_charts$Internal$Coordinates$toCartesianX = F2(
	function (plane, value) {
		return A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, value - plane.x.marginMin) + plane.x.min;
	});
var $terezka$elm_charts$Internal$Coordinates$toCartesianY = F2(
	function (plane, value) {
		return ($terezka$elm_charts$Internal$Coordinates$range(plane.y) - A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, value - plane.y.marginMin)) + plane.y.min;
	});
var $terezka$elm_charts$Internal$Svg$fromSvg = F2(
	function (plane, point) {
		return {
			x: A2($terezka$elm_charts$Internal$Coordinates$toCartesianX, plane, point.x),
			y: A2($terezka$elm_charts$Internal$Coordinates$toCartesianY, plane, point.y)
		};
	});
var $debois$elm_dom$DOM$target = function (decoder) {
	return A2($elm$json$Json$Decode$field, 'target', decoder);
};
var $terezka$elm_charts$Internal$Svg$decoder = F2(
	function (plane, toMsg) {
		var handle = F3(
			function (mouseX, mouseY, box) {
				var yPrev = plane.y;
				var xPrev = plane.x;
				var widthPercent = box.width / plane.x.length;
				var heightPercent = box.height / plane.y.length;
				var newPlane = _Utils_update(
					plane,
					{
						x: _Utils_update(
							xPrev,
							{length: box.width, marginMax: plane.x.marginMax * widthPercent, marginMin: plane.x.marginMin * widthPercent}),
						y: _Utils_update(
							yPrev,
							{length: box.height, marginMax: plane.y.marginMax * heightPercent, marginMin: plane.y.marginMin * heightPercent})
					});
				var searched = A2(
					$terezka$elm_charts$Internal$Svg$fromSvg,
					newPlane,
					{x: mouseX - box.left, y: mouseY - box.top});
				return A2(toMsg, newPlane, searched);
			});
		return A4(
			$elm$json$Json$Decode$map3,
			handle,
			A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
			A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float),
			$debois$elm_dom$DOM$target($terezka$elm_charts$Internal$Svg$decodePosition));
	});
var $elm$svg$Svg$Events$on = $elm$html$Html$Events$on;
var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode('rect');
var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var $terezka$elm_charts$Internal$Svg$container = F5(
	function (plane, config, below, chartEls, above) {
		var toEvent = function (event) {
			return A2(
				$elm$svg$Svg$Events$on,
				event.name,
				A2($terezka$elm_charts$Internal$Svg$decoder, plane, event.handler));
		};
		var svgAttrsSize = config.responsive ? _List_fromArray(
			[
				$elm$svg$Svg$Attributes$viewBox(
				'0 0 ' + ($elm$core$String$fromFloat(plane.x.length) + (' ' + $elm$core$String$fromFloat(plane.y.length)))),
				A2($elm$html$Html$Attributes$style, 'display', 'block')
			]) : _List_fromArray(
			[
				$elm$svg$Svg$Attributes$width(
				$elm$core$String$fromFloat(plane.x.length)),
				$elm$svg$Svg$Attributes$height(
				$elm$core$String$fromFloat(plane.y.length)),
				A2($elm$html$Html$Attributes$style, 'display', 'block')
			]);
		var htmlAttrsSize = config.responsive ? _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '100%')
			]) : _List_fromArray(
			[
				A2(
				$elm$html$Html$Attributes$style,
				'width',
				$elm$core$String$fromFloat(plane.x.length) + 'px'),
				A2(
				$elm$html$Html$Attributes$style,
				'height',
				$elm$core$String$fromFloat(plane.y.length) + 'px')
			]);
		var htmlAttrsDef = _List_fromArray(
			[
				$elm$html$Html$Attributes$class('elm-charts__container-inner')
			]);
		var htmlAttrs = _Utils_ap(
			config.htmlAttrs,
			_Utils_ap(htmlAttrsDef, htmlAttrsSize));
		var chartPosition = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$x(
				$elm$core$String$fromFloat(plane.x.marginMin)),
				$elm$svg$Svg$Attributes$y(
				$elm$core$String$fromFloat(plane.y.marginMin)),
				$elm$svg$Svg$Attributes$width(
				$elm$core$String$fromFloat(
					$terezka$elm_charts$Internal$Coordinates$innerWidth(plane))),
				$elm$svg$Svg$Attributes$height(
				$elm$core$String$fromFloat(
					$terezka$elm_charts$Internal$Coordinates$innerHeight(plane))),
				$elm$svg$Svg$Attributes$fill('transparent')
			]);
		var clipPathDefs = A2(
			$elm$svg$Svg$defs,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$clipPath,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$id(
							$terezka$elm_charts$Internal$Coordinates$toId(plane))
						]),
					_List_fromArray(
						[
							A2($elm$svg$Svg$rect, chartPosition, _List_Nil)
						]))
				]));
		var catcher = A2(
			$elm$svg$Svg$rect,
			_Utils_ap(
				chartPosition,
				A2($elm$core$List$map, toEvent, config.events)),
			_List_Nil);
		var chart = A2(
			$elm$svg$Svg$svg,
			_Utils_ap(svgAttrsSize, config.attrs),
			_Utils_ap(
				_List_fromArray(
					[clipPathDefs]),
				_Utils_ap(
					chartEls,
					_List_fromArray(
						[catcher]))));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('elm-charts__container'),
					A2($elm$html$Html$Attributes$style, 'position', 'relative')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					htmlAttrs,
					_Utils_ap(
						below,
						_Utils_ap(
							_List_fromArray(
								[chart]),
							above)))
				]));
	});
var $terezka$elm_charts$Chart$Attributes$lowest = F3(
	function (v, edit, b) {
		return _Utils_update(
			b,
			{
				min: A3(edit, v, b.min, b.dataMin)
			});
	});
var $terezka$elm_charts$Chart$Attributes$orLower = F3(
	function (least, real, _v0) {
		return (_Utils_cmp(real, least) > 0) ? least : real;
	});
var $terezka$elm_charts$Chart$definePlane = F2(
	function (config, elements) {
		var width = A2($elm$core$Basics$max, 1, (config.width - config.padding.left) - config.padding.right);
		var toLimit = F5(
			function (length, marginMin, marginMax, min, max) {
				return {dataMax: max, dataMin: min, length: length, marginMax: marginMax, marginMin: marginMin, max: max, min: min};
			});
		var height = A2($elm$core$Basics$max, 1, (config.height - config.padding.bottom) - config.padding.top);
		var fixSingles = function (bs) {
			return _Utils_eq(bs.min, bs.max) ? _Utils_update(
				bs,
				{max: bs.min + 10}) : bs;
		};
		var collectLimits = F2(
			function (el, acc) {
				switch (el.$) {
					case 'Indexed':
						return acc;
					case 'SeriesElement':
						var lims = el.a;
						return _Utils_ap(acc, lims);
					case 'BarsElement':
						var lims = el.a;
						return _Utils_ap(acc, lims);
					case 'CustomElement':
						return acc;
					case 'AxisElement':
						return acc;
					case 'TicksElement':
						return acc;
					case 'TickElement':
						return acc;
					case 'LabelsElement':
						return acc;
					case 'LabelElement':
						return acc;
					case 'GridElement':
						return acc;
					case 'SubElements':
						return acc;
					case 'ListOfElements':
						var subs = el.a;
						return A3($elm$core$List$foldl, collectLimits, acc, subs);
					case 'SvgElement':
						return acc;
					default:
						return acc;
				}
			});
		var limits_ = function (pos) {
			return function (_v3) {
				var x = _v3.x;
				var y = _v3.y;
				return {
					x: fixSingles(x),
					y: fixSingles(y)
				};
			}(
				{
					x: A5(toLimit, width, config.margin.left, config.margin.right, pos.x1, pos.x2),
					y: A5(toLimit, height, config.margin.top, config.margin.bottom, pos.y1, pos.y2)
				});
		}(
			A2(
				$terezka$elm_charts$Internal$Coordinates$foldPosition,
				$elm$core$Basics$identity,
				A3($elm$core$List$foldl, collectLimits, _List_Nil, elements)));
		var calcRange = function () {
			var _v2 = config.range;
			if (!_v2.b) {
				return limits_.x;
			} else {
				var some = _v2;
				return A3(
					$elm$core$List$foldl,
					F2(
						function (f, b) {
							return f(b);
						}),
					limits_.x,
					some);
			}
		}();
		var calcDomain = function () {
			var _v1 = config.domain;
			if (!_v1.b) {
				return A3($terezka$elm_charts$Chart$Attributes$lowest, 0, $terezka$elm_charts$Chart$Attributes$orLower, limits_.y);
			} else {
				var some = _v1;
				return A3(
					$elm$core$List$foldl,
					F2(
						function (f, b) {
							return f(b);
						}),
					limits_.y,
					some);
			}
		}();
		var unpadded = {x: calcRange, y: calcDomain};
		var scalePadX = $terezka$elm_charts$Internal$Coordinates$scaleCartesianX(unpadded);
		var xMax = calcRange.max + scalePadX(config.padding.right);
		var xMin = calcRange.min - scalePadX(config.padding.left);
		var scalePadY = $terezka$elm_charts$Internal$Coordinates$scaleCartesianY(unpadded);
		var yMax = calcDomain.max + scalePadY(config.padding.top);
		var yMin = calcDomain.min - scalePadY(config.padding.bottom);
		return {
			x: _Utils_update(
				calcRange,
				{
					length: config.width,
					max: A2($elm$core$Basics$max, xMin, xMax),
					min: A2($elm$core$Basics$min, xMin, xMax)
				}),
			y: _Utils_update(
				calcDomain,
				{
					length: config.height,
					max: A2($elm$core$Basics$max, yMin, yMax),
					min: A2($elm$core$Basics$min, yMin, yMax)
				})
		};
	});
var $terezka$elm_charts$Chart$getItems = F2(
	function (plane, elements) {
		var toItems = F2(
			function (el, acc) {
				switch (el.$) {
					case 'Indexed':
						return acc;
					case 'SeriesElement':
						var items = el.b;
						return _Utils_ap(acc, items);
					case 'BarsElement':
						var items = el.b;
						return _Utils_ap(acc, items);
					case 'CustomElement':
						var item = el.a;
						return _Utils_ap(
							acc,
							_List_fromArray(
								[item]));
					case 'AxisElement':
						var func = el.a;
						return acc;
					case 'TicksElement':
						return acc;
					case 'TickElement':
						return acc;
					case 'LabelsElement':
						return acc;
					case 'LabelElement':
						return acc;
					case 'GridElement':
						return acc;
					case 'SubElements':
						return acc;
					case 'ListOfElements':
						var subs = el.a;
						return A3($elm$core$List$foldl, toItems, acc, subs);
					case 'SvgElement':
						return acc;
					default:
						return acc;
				}
			});
		return A3($elm$core$List$foldl, toItems, _List_Nil, elements);
	});
var $terezka$elm_charts$Chart$getLegends = function (elements) {
	var toLegends = F2(
		function (el, acc) {
			switch (el.$) {
				case 'Indexed':
					return acc;
				case 'SeriesElement':
					var legends_ = el.c;
					return _Utils_ap(acc, legends_);
				case 'BarsElement':
					var legends_ = el.c;
					return _Utils_ap(acc, legends_);
				case 'CustomElement':
					return acc;
				case 'AxisElement':
					return acc;
				case 'TicksElement':
					return acc;
				case 'TickElement':
					return acc;
				case 'LabelsElement':
					return acc;
				case 'LabelElement':
					return acc;
				case 'GridElement':
					return acc;
				case 'SubElements':
					return acc;
				case 'ListOfElements':
					var subs = el.a;
					return A3($elm$core$List$foldl, toLegends, acc, subs);
				case 'SvgElement':
					return acc;
				default:
					return acc;
			}
		});
	return A3($elm$core$List$foldl, toLegends, _List_Nil, elements);
};
var $terezka$elm_charts$Chart$TickValues = F4(
	function (xAxis, yAxis, xs, ys) {
		return {xAxis: xAxis, xs: xs, yAxis: yAxis, ys: ys};
	});
var $terezka$elm_charts$Chart$getTickValues = F3(
	function (plane, items, elements) {
		var toValues = F2(
			function (el, acc) {
				switch (el.$) {
					case 'Indexed':
						return acc;
					case 'SeriesElement':
						return acc;
					case 'BarsElement':
						var func = el.d;
						return A2(func, plane, acc);
					case 'CustomElement':
						var func = el.b;
						return acc;
					case 'AxisElement':
						var func = el.a;
						return A2(func, plane, acc);
					case 'TicksElement':
						var func = el.a;
						return A2(func, plane, acc);
					case 'TickElement':
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 'LabelsElement':
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 'LabelElement':
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 'SubElements':
						var func = el.a;
						return A3(
							$elm$core$List$foldl,
							toValues,
							acc,
							A2(func, plane, items));
					case 'GridElement':
						return acc;
					case 'ListOfElements':
						var subs = el.a;
						return A3($elm$core$List$foldl, toValues, acc, subs);
					case 'SvgElement':
						return acc;
					default:
						return acc;
				}
			});
		return A3(
			$elm$core$List$foldl,
			toValues,
			A4($terezka$elm_charts$Chart$TickValues, _List_Nil, _List_Nil, _List_Nil, _List_Nil),
			elements);
	});
var $terezka$elm_charts$Chart$GridElement = function (a) {
	return {$: 'GridElement', a: a};
};
var $terezka$elm_charts$Internal$Svg$Circle = {$: 'Circle'};
var $terezka$elm_charts$Chart$Attributes$circle = function (config) {
	return _Utils_update(
		config,
		{
			shape: $elm$core$Maybe$Just($terezka$elm_charts$Internal$Svg$Circle)
		});
};
var $terezka$elm_charts$Internal$Helpers$darkGray = 'rgb(200 200 200)';
var $terezka$elm_charts$Chart$Attributes$dashed = F2(
	function (value, config) {
		return _Utils_update(
			config,
			{dashed: value});
	});
var $terezka$elm_charts$Internal$Svg$defaultDot = {border: '', borderWidth: 0, color: $terezka$elm_charts$Internal$Helpers$pink, hideOverflow: false, highlight: 0, highlightColor: '', highlightWidth: 5, opacity: 1, shape: $elm$core$Maybe$Nothing, size: 6};
var $terezka$elm_charts$Internal$Svg$isWithinPlane = F3(
	function (plane, x, y) {
		return _Utils_eq(
			A3($elm$core$Basics$clamp, plane.x.min, plane.x.max, x),
			x) && _Utils_eq(
			A3($elm$core$Basics$clamp, plane.y.min, plane.y.max, y),
			y);
	});
var $elm$core$Basics$pi = _Basics_pi;
var $elm$core$Basics$sqrt = _Basics_sqrt;
var $terezka$elm_charts$Internal$Svg$plusPath = F4(
	function (area_, off, x_, y_) {
		var side = $elm$core$Basics$sqrt(area_ / 4) + off;
		var r6 = side / 2;
		var r3 = side;
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					'M' + ($elm$core$String$fromFloat(x_ - r6) + (' ' + $elm$core$String$fromFloat(((y_ - r3) - r6) + off))),
					'v' + $elm$core$String$fromFloat(r3 - off),
					'h' + $elm$core$String$fromFloat((-r3) + off),
					'v' + $elm$core$String$fromFloat(r3),
					'h' + $elm$core$String$fromFloat(r3 - off),
					'v' + $elm$core$String$fromFloat(r3 - off),
					'h' + $elm$core$String$fromFloat(r3),
					'v' + $elm$core$String$fromFloat((-r3) + off),
					'h' + $elm$core$String$fromFloat(r3 - off),
					'v' + $elm$core$String$fromFloat(-r3),
					'h' + $elm$core$String$fromFloat((-r3) + off),
					'v' + $elm$core$String$fromFloat((-r3) + off),
					'h' + $elm$core$String$fromFloat(-r3),
					'v' + $elm$core$String$fromFloat(r3 - off)
				]));
	});
var $elm$core$Basics$degrees = function (angleInDegrees) {
	return (angleInDegrees * $elm$core$Basics$pi) / 180;
};
var $elm$core$Basics$tan = _Basics_tan;
var $terezka$elm_charts$Internal$Svg$trianglePath = F4(
	function (area_, off, x_, y_) {
		var side = $elm$core$Basics$sqrt(
			(area_ * 4) / $elm$core$Basics$sqrt(3)) + (off * $elm$core$Basics$sqrt(3));
		var height = ($elm$core$Basics$sqrt(3) * side) / 2;
		var fromMiddle = height - (($elm$core$Basics$tan(
			$elm$core$Basics$degrees(30)) * side) / 2);
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					'M' + ($elm$core$String$fromFloat(x_) + (' ' + $elm$core$String$fromFloat(y_ - fromMiddle))),
					'l' + ($elm$core$String$fromFloat((-side) / 2) + (' ' + $elm$core$String$fromFloat(height))),
					'h' + $elm$core$String$fromFloat(side),
					'z'
				]));
	});
var $terezka$elm_charts$Internal$Svg$dot = F5(
	function (plane, toX, toY, config, datum_) {
		var yOrg = toY(datum_);
		var y_ = A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, yOrg);
		var xOrg = toX(datum_);
		var x_ = A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, xOrg);
		var styleAttrs = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$stroke(
				(config.border === '') ? config.color : config.border),
				$elm$svg$Svg$Attributes$strokeWidth(
				$elm$core$String$fromFloat(config.borderWidth)),
				$elm$svg$Svg$Attributes$fillOpacity(
				$elm$core$String$fromFloat(config.opacity)),
				$elm$svg$Svg$Attributes$fill(config.color),
				$elm$svg$Svg$Attributes$class('elm-charts__dot'),
				config.hideOverflow ? $terezka$elm_charts$Internal$Svg$withinChartArea(plane) : $elm$svg$Svg$Attributes$class('')
			]);
		var showDot = A3($terezka$elm_charts$Internal$Svg$isWithinPlane, plane, xOrg, yOrg) || config.hideOverflow;
		var highlightColor = (config.highlightColor === '') ? config.color : config.highlightColor;
		var highlightAttrs = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$stroke(highlightColor),
				$elm$svg$Svg$Attributes$strokeWidth(
				$elm$core$String$fromFloat(config.highlightWidth)),
				$elm$svg$Svg$Attributes$strokeOpacity(
				$elm$core$String$fromFloat(config.highlight)),
				$elm$svg$Svg$Attributes$fill('transparent'),
				$elm$svg$Svg$Attributes$class('elm-charts__dot-highlight')
			]);
		var view = F3(
			function (toEl, highlightOff, toAttrs) {
				return (config.highlight > 0) ? A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__dot-container')
						]),
					_List_fromArray(
						[
							A2(
							toEl,
							_Utils_ap(
								toAttrs(highlightOff),
								highlightAttrs),
							_List_Nil),
							A2(
							toEl,
							_Utils_ap(
								toAttrs(0),
								styleAttrs),
							_List_Nil)
						])) : A2(
					toEl,
					_Utils_ap(
						toAttrs(0),
						styleAttrs),
					_List_Nil);
			});
		var area_ = (2 * $elm$core$Basics$pi) * config.size;
		if (!showDot) {
			return $elm$svg$Svg$text('');
		} else {
			var _v0 = config.shape;
			if (_v0.$ === 'Nothing') {
				return $elm$svg$Svg$text('');
			} else {
				switch (_v0.a.$) {
					case 'Circle':
						var _v1 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$circle,
							config.highlightWidth / 2,
							function (off) {
								var radius = $elm$core$Basics$sqrt(area_ / $elm$core$Basics$pi);
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$cx(
										$elm$core$String$fromFloat(x_)),
										$elm$svg$Svg$Attributes$cy(
										$elm$core$String$fromFloat(y_)),
										$elm$svg$Svg$Attributes$r(
										$elm$core$String$fromFloat(radius + off))
									]);
							});
					case 'Triangle':
						var _v2 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.highlightWidth,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$elm_charts$Internal$Svg$trianglePath, area_, off, x_, y_))
									]);
							});
					case 'Square':
						var _v3 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$rect,
							config.highlightWidth,
							function (off) {
								var side = $elm$core$Basics$sqrt(area_);
								var sideOff = side + off;
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$x(
										$elm$core$String$fromFloat(x_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$y(
										$elm$core$String$fromFloat(y_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$width(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$height(
										$elm$core$String$fromFloat(sideOff))
									]);
							});
					case 'Diamond':
						var _v4 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$rect,
							config.highlightWidth,
							function (off) {
								var side = $elm$core$Basics$sqrt(area_);
								var sideOff = side + off;
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$x(
										$elm$core$String$fromFloat(x_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$y(
										$elm$core$String$fromFloat(y_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$width(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$height(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$transform(
										'rotate(45 ' + ($elm$core$String$fromFloat(x_) + (' ' + ($elm$core$String$fromFloat(y_) + ')'))))
									]);
							});
					case 'Cross':
						var _v5 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.highlightWidth,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$elm_charts$Internal$Svg$plusPath, area_, off, x_, y_)),
										$elm$svg$Svg$Attributes$transform(
										'rotate(45 ' + ($elm$core$String$fromFloat(x_) + (' ' + ($elm$core$String$fromFloat(y_) + ')'))))
									]);
							});
					default:
						var _v6 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.highlightWidth,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$elm_charts$Internal$Svg$plusPath, area_, off, x_, y_))
									]);
							});
				}
			}
		}
	});
var $terezka$elm_charts$Chart$Svg$dot = F4(
	function (plane, toX, toY, edits) {
		return A4(
			$terezka$elm_charts$Internal$Svg$dot,
			plane,
			toX,
			toY,
			A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Svg$defaultDot));
	});
var $terezka$elm_charts$Internal$Helpers$gray = '#EFF2FA';
var $terezka$elm_charts$Internal$Svg$defaultLine = {attrs: _List_Nil, _break: false, color: 'rgb(210, 210, 210)', dashed: _List_Nil, flip: false, hideOverflow: false, opacity: 1, tickDirection: -90, tickLength: 0, width: 1, x1: $elm$core$Maybe$Nothing, x2: $elm$core$Maybe$Nothing, x2Svg: $elm$core$Maybe$Nothing, xOff: 0, y1: $elm$core$Maybe$Nothing, y2: $elm$core$Maybe$Nothing, y2Svg: $elm$core$Maybe$Nothing, yOff: 0};
var $elm$core$Basics$cos = _Basics_cos;
var $terezka$elm_charts$Internal$Svg$lengthInCartesianX = $terezka$elm_charts$Internal$Coordinates$scaleCartesianX;
var $terezka$elm_charts$Internal$Svg$lengthInCartesianY = $terezka$elm_charts$Internal$Coordinates$scaleCartesianY;
var $elm$core$Basics$sin = _Basics_sin;
var $terezka$elm_charts$Internal$Svg$line = F2(
	function (plane, config) {
		var angle = $elm$core$Basics$degrees(config.tickDirection);
		var _v0 = function () {
			var _v3 = _Utils_Tuple3(
				_Utils_Tuple2(config.x1, config.x2),
				_Utils_Tuple2(config.y1, config.y2),
				_Utils_Tuple2(config.x2Svg, config.y2Svg));
			if (_v3.a.a.$ === 'Just') {
				if (_v3.a.b.$ === 'Just') {
					if (_v3.b.a.$ === 'Nothing') {
						if (_v3.b.b.$ === 'Nothing') {
							var _v4 = _v3.a;
							var a = _v4.a.a;
							var b = _v4.b.a;
							var _v5 = _v3.b;
							var _v6 = _v5.a;
							var _v7 = _v5.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(plane.y.min, plane.y.min));
						} else {
							var _v38 = _v3.a;
							var a = _v38.a.a;
							var b = _v38.b.a;
							var _v39 = _v3.b;
							var _v40 = _v39.a;
							var c = _v39.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(c, c));
						}
					} else {
						if (_v3.b.b.$ === 'Nothing') {
							var _v41 = _v3.a;
							var a = _v41.a.a;
							var b = _v41.b.a;
							var _v42 = _v3.b;
							var c = _v42.a.a;
							var _v43 = _v42.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(c, c));
						} else {
							return _Utils_Tuple2(
								_Utils_Tuple2(
									A2($elm$core$Maybe$withDefault, plane.x.min, config.x1),
									A2($elm$core$Maybe$withDefault, plane.x.max, config.x2)),
								_Utils_Tuple2(
									A2($elm$core$Maybe$withDefault, plane.y.min, config.y1),
									A2($elm$core$Maybe$withDefault, plane.y.max, config.y2)));
						}
					}
				} else {
					if (_v3.b.a.$ === 'Nothing') {
						if (_v3.b.b.$ === 'Nothing') {
							var _v8 = _v3.a;
							var a = _v8.a.a;
							var _v9 = _v8.b;
							var _v10 = _v3.b;
							var _v11 = _v10.a;
							var _v12 = _v10.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, a),
								_Utils_Tuple2(plane.y.min, plane.y.max));
						} else {
							if (_v3.c.a.$ === 'Just') {
								if (_v3.c.b.$ === 'Just') {
									var _v51 = _v3.a;
									var a = _v51.a.a;
									var _v52 = _v51.b;
									var _v53 = _v3.b;
									var _v54 = _v53.a;
									var b = _v53.b.a;
									var _v55 = _v3.c;
									var xOff = _v55.a.a;
									var yOff = _v55.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v56 = _v3.a;
									var a = _v56.a.a;
									var _v57 = _v56.b;
									var _v58 = _v3.b;
									var _v59 = _v58.a;
									var b = _v58.b.a;
									var _v60 = _v3.c;
									var xOff = _v60.a.a;
									var _v61 = _v60.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 'Nothing') {
									var _v44 = _v3.a;
									var a = _v44.a.a;
									var _v45 = _v44.b;
									var _v46 = _v3.b;
									var _v47 = _v46.a;
									var b = _v46.b.a;
									var _v48 = _v3.c;
									var _v49 = _v48.a;
									var _v50 = _v48.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.x.max),
										_Utils_Tuple2(b, b));
								} else {
									var _v62 = _v3.a;
									var a = _v62.a.a;
									var _v63 = _v62.b;
									var _v64 = _v3.b;
									var _v65 = _v64.a;
									var b = _v64.b.a;
									var _v66 = _v3.c;
									var _v67 = _v66.a;
									var yOff = _v66.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					} else {
						if (_v3.b.b.$ === 'Just') {
							var _v35 = _v3.a;
							var c = _v35.a.a;
							var _v36 = _v35.b;
							var _v37 = _v3.b;
							var a = _v37.a.a;
							var b = _v37.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(c, c),
								_Utils_Tuple2(a, b));
						} else {
							if (_v3.c.a.$ === 'Just') {
								if (_v3.c.b.$ === 'Just') {
									var _v75 = _v3.a;
									var a = _v75.a.a;
									var _v76 = _v75.b;
									var _v77 = _v3.b;
									var b = _v77.a.a;
									var _v78 = _v77.b;
									var _v79 = _v3.c;
									var xOff = _v79.a.a;
									var yOff = _v79.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v80 = _v3.a;
									var a = _v80.a.a;
									var _v81 = _v80.b;
									var _v82 = _v3.b;
									var b = _v82.a.a;
									var _v83 = _v82.b;
									var _v84 = _v3.c;
									var xOff = _v84.a.a;
									var _v85 = _v84.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 'Nothing') {
									var _v68 = _v3.a;
									var a = _v68.a.a;
									var _v69 = _v68.b;
									var _v70 = _v3.b;
									var b = _v70.a.a;
									var _v71 = _v70.b;
									var _v72 = _v3.c;
									var _v73 = _v72.a;
									var _v74 = _v72.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.x.max),
										_Utils_Tuple2(b, b));
								} else {
									var _v86 = _v3.a;
									var a = _v86.a.a;
									var _v87 = _v86.b;
									var _v88 = _v3.b;
									var b = _v88.a.a;
									var _v89 = _v88.b;
									var _v90 = _v3.c;
									var _v91 = _v90.a;
									var yOff = _v90.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					}
				}
			} else {
				if (_v3.a.b.$ === 'Just') {
					if (_v3.b.a.$ === 'Nothing') {
						if (_v3.b.b.$ === 'Nothing') {
							var _v13 = _v3.a;
							var _v14 = _v13.a;
							var b = _v13.b.a;
							var _v15 = _v3.b;
							var _v16 = _v15.a;
							var _v17 = _v15.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(b, b),
								_Utils_Tuple2(plane.y.min, plane.y.max));
						} else {
							if (_v3.c.a.$ === 'Just') {
								if (_v3.c.b.$ === 'Just') {
									var _v99 = _v3.a;
									var _v100 = _v99.a;
									var a = _v99.b.a;
									var _v101 = _v3.b;
									var _v102 = _v101.a;
									var b = _v101.b.a;
									var _v103 = _v3.c;
									var xOff = _v103.a.a;
									var yOff = _v103.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v104 = _v3.a;
									var _v105 = _v104.a;
									var a = _v104.b.a;
									var _v106 = _v3.b;
									var _v107 = _v106.a;
									var b = _v106.b.a;
									var _v108 = _v3.c;
									var xOff = _v108.a.a;
									var _v109 = _v108.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 'Nothing') {
									var _v92 = _v3.a;
									var _v93 = _v92.a;
									var a = _v92.b.a;
									var _v94 = _v3.b;
									var _v95 = _v94.a;
									var b = _v94.b.a;
									var _v96 = _v3.c;
									var _v97 = _v96.a;
									var _v98 = _v96.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.x.max),
										_Utils_Tuple2(b, b));
								} else {
									var _v110 = _v3.a;
									var _v111 = _v110.a;
									var a = _v110.b.a;
									var _v112 = _v3.b;
									var _v113 = _v112.a;
									var b = _v112.b.a;
									var _v114 = _v3.c;
									var _v115 = _v114.a;
									var yOff = _v114.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					} else {
						if (_v3.b.b.$ === 'Just') {
							var _v32 = _v3.a;
							var _v33 = _v32.a;
							var c = _v32.b.a;
							var _v34 = _v3.b;
							var a = _v34.a.a;
							var b = _v34.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(c, c),
								_Utils_Tuple2(a, b));
						} else {
							if (_v3.c.a.$ === 'Just') {
								if (_v3.c.b.$ === 'Just') {
									var _v123 = _v3.a;
									var _v124 = _v123.a;
									var a = _v123.b.a;
									var _v125 = _v3.b;
									var b = _v125.a.a;
									var _v126 = _v125.b;
									var _v127 = _v3.c;
									var xOff = _v127.a.a;
									var yOff = _v127.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v128 = _v3.a;
									var _v129 = _v128.a;
									var a = _v128.b.a;
									var _v130 = _v3.b;
									var b = _v130.a.a;
									var _v131 = _v130.b;
									var _v132 = _v3.c;
									var xOff = _v132.a.a;
									var _v133 = _v132.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 'Nothing') {
									var _v116 = _v3.a;
									var _v117 = _v116.a;
									var a = _v116.b.a;
									var _v118 = _v3.b;
									var b = _v118.a.a;
									var _v119 = _v118.b;
									var _v120 = _v3.c;
									var _v121 = _v120.a;
									var _v122 = _v120.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.x.max),
										_Utils_Tuple2(b, b));
								} else {
									var _v134 = _v3.a;
									var _v135 = _v134.a;
									var a = _v134.b.a;
									var _v136 = _v3.b;
									var b = _v136.a.a;
									var _v137 = _v136.b;
									var _v138 = _v3.c;
									var _v139 = _v138.a;
									var yOff = _v138.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					}
				} else {
					if (_v3.b.a.$ === 'Just') {
						if (_v3.b.b.$ === 'Just') {
							var _v18 = _v3.a;
							var _v19 = _v18.a;
							var _v20 = _v18.b;
							var _v21 = _v3.b;
							var a = _v21.a.a;
							var b = _v21.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.x.min, plane.x.min),
								_Utils_Tuple2(a, b));
						} else {
							var _v22 = _v3.a;
							var _v23 = _v22.a;
							var _v24 = _v22.b;
							var _v25 = _v3.b;
							var a = _v25.a.a;
							var _v26 = _v25.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.x.min, plane.x.max),
								_Utils_Tuple2(a, a));
						}
					} else {
						if (_v3.b.b.$ === 'Just') {
							var _v27 = _v3.a;
							var _v28 = _v27.a;
							var _v29 = _v27.b;
							var _v30 = _v3.b;
							var _v31 = _v30.a;
							var b = _v30.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.x.min, plane.x.max),
								_Utils_Tuple2(b, b));
						} else {
							var _v140 = _v3.a;
							var _v141 = _v140.a;
							var _v142 = _v140.b;
							var _v143 = _v3.b;
							var _v144 = _v143.a;
							var _v145 = _v143.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.x.min, plane.x.max),
								_Utils_Tuple2(plane.y.min, plane.y.max));
						}
					}
				}
			}
		}();
		var _v1 = _v0.a;
		var x1 = _v1.a;
		var x2 = _v1.b;
		var _v2 = _v0.b;
		var y1 = _v2.a;
		var y2 = _v2.b;
		var x1_ = x1 + A2($terezka$elm_charts$Internal$Svg$lengthInCartesianX, plane, config.xOff);
		var x2_ = x2 + A2($terezka$elm_charts$Internal$Svg$lengthInCartesianX, plane, config.xOff);
		var y1_ = y1 - A2($terezka$elm_charts$Internal$Svg$lengthInCartesianY, plane, config.yOff);
		var y2_ = y2 - A2($terezka$elm_charts$Internal$Svg$lengthInCartesianY, plane, config.yOff);
		var _v146 = (config.tickLength > 0) ? _Utils_Tuple2(
			A2(
				$terezka$elm_charts$Internal$Svg$lengthInCartesianX,
				plane,
				$elm$core$Basics$cos(angle) * config.tickLength),
			A2(
				$terezka$elm_charts$Internal$Svg$lengthInCartesianY,
				plane,
				$elm$core$Basics$sin(angle) * config.tickLength)) : _Utils_Tuple2(0, 0);
		var tickOffsetX = _v146.a;
		var tickOffsetY = _v146.b;
		var cmds = config.flip ? _Utils_ap(
			(config.tickLength > 0) ? _List_fromArray(
				[
					A2($terezka$elm_charts$Internal$Commands$Move, x2_ + tickOffsetX, y2_ + tickOffsetY),
					A2($terezka$elm_charts$Internal$Commands$Line, x2_, y2_)
				]) : _List_fromArray(
				[
					A2($terezka$elm_charts$Internal$Commands$Move, x2_, y2_)
				]),
			_Utils_ap(
				config._break ? _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x2_, y1_),
						A2($terezka$elm_charts$Internal$Commands$Line, x1_, y1_)
					]) : _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x1_, y1_)
					]),
				(config.tickLength > 0) ? _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x1_ + tickOffsetX, y1_ + tickOffsetY)
					]) : _List_Nil)) : _Utils_ap(
			(config.tickLength > 0) ? _List_fromArray(
				[
					A2($terezka$elm_charts$Internal$Commands$Move, x1_ + tickOffsetX, y1_ + tickOffsetY),
					A2($terezka$elm_charts$Internal$Commands$Line, x1_, y1_)
				]) : _List_fromArray(
				[
					A2($terezka$elm_charts$Internal$Commands$Move, x1_, y1_)
				]),
			_Utils_ap(
				config._break ? _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x1_, y2_),
						A2($terezka$elm_charts$Internal$Commands$Line, x2_, y2_)
					]) : _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x2_, y2_)
					]),
				(config.tickLength > 0) ? _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x2_ + tickOffsetX, y2_ + tickOffsetY)
					]) : _List_Nil));
		return A4(
			$terezka$elm_charts$Internal$Svg$withAttrs,
			config.attrs,
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$class('elm-charts__line'),
					$elm$svg$Svg$Attributes$fill('transparent'),
					$elm$svg$Svg$Attributes$stroke(config.color),
					$elm$svg$Svg$Attributes$strokeWidth(
					$elm$core$String$fromFloat(config.width)),
					$elm$svg$Svg$Attributes$strokeOpacity(
					$elm$core$String$fromFloat(config.opacity)),
					$elm$svg$Svg$Attributes$strokeDasharray(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, $elm$core$String$fromFloat, config.dashed))),
					$elm$svg$Svg$Attributes$d(
					A2($terezka$elm_charts$Internal$Commands$description, plane, cmds)),
					config.hideOverflow ? $terezka$elm_charts$Internal$Svg$withinChartArea(plane) : $elm$svg$Svg$Attributes$class('')
				]),
			_List_Nil);
	});
var $terezka$elm_charts$Chart$Svg$line = F2(
	function (plane, edits) {
		return A2(
			$terezka$elm_charts$Internal$Svg$line,
			plane,
			A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Svg$defaultLine));
	});
var $terezka$elm_charts$Chart$Attributes$size = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{size: v});
	});
var $terezka$elm_charts$Chart$Attributes$width = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{width: v});
	});
var $terezka$elm_charts$Chart$Attributes$x1 = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{
				x1: $elm$core$Maybe$Just(v)
			});
	});
var $terezka$elm_charts$Chart$Attributes$y1 = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{
				y1: $elm$core$Maybe$Just(v)
			});
	});
var $terezka$elm_charts$Chart$grid = function (edits) {
	var config = A2(
		$terezka$elm_charts$Internal$Helpers$apply,
		edits,
		{color: '', dashed: _List_Nil, dotGrid: false, width: 0});
	var width = (!config.width) ? (config.dotGrid ? 0.5 : 1) : config.width;
	var color = $elm$core$String$isEmpty(config.color) ? (config.dotGrid ? $terezka$elm_charts$Internal$Helpers$darkGray : $terezka$elm_charts$Internal$Helpers$gray) : config.color;
	var toDot = F4(
		function (vs, p, x, y) {
			return (A2($elm$core$List$member, x, vs.xAxis) || A2($elm$core$List$member, y, vs.yAxis)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A5(
					$terezka$elm_charts$Chart$Svg$dot,
					p,
					function ($) {
						return $.x;
					},
					function ($) {
						return $.y;
					},
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(color),
							$terezka$elm_charts$Chart$Attributes$size(width),
							$terezka$elm_charts$Chart$Attributes$circle
						]),
					{x: x, y: y}));
		});
	var toXGrid = F3(
		function (vs, p, v) {
			return A2($elm$core$List$member, v, vs.xAxis) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$terezka$elm_charts$Chart$Svg$line,
					p,
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(color),
							$terezka$elm_charts$Chart$Attributes$width(width),
							$terezka$elm_charts$Chart$Attributes$x1(v),
							$terezka$elm_charts$Chart$Attributes$dashed(config.dashed)
						])));
		});
	var toYGrid = F3(
		function (vs, p, v) {
			return A2($elm$core$List$member, v, vs.yAxis) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$terezka$elm_charts$Chart$Svg$line,
					p,
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(color),
							$terezka$elm_charts$Chart$Attributes$width(width),
							$terezka$elm_charts$Chart$Attributes$y1(v),
							$terezka$elm_charts$Chart$Attributes$dashed(config.dashed)
						])));
		});
	return $terezka$elm_charts$Chart$GridElement(
		F2(
			function (p, vs) {
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__grid')
						]),
					config.dotGrid ? A2(
						$elm$core$List$concatMap,
						function (x) {
							return A2(
								$elm$core$List$filterMap,
								A3(toDot, vs, p, x),
								vs.ys);
						},
						vs.xs) : _List_fromArray(
						[
							A2(
							$elm$svg$Svg$g,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$class('elm-charts__x-grid')
								]),
							A2(
								$elm$core$List$filterMap,
								A2(toXGrid, vs, p),
								vs.xs)),
							A2(
							$elm$svg$Svg$g,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$class('elm-charts__y-grid')
								]),
							A2(
								$elm$core$List$filterMap,
								A2(toYGrid, vs, p),
								vs.ys))
						]));
			}));
};
var $terezka$elm_charts$Chart$viewElements = F6(
	function (config, plane, tickValues, allItems, allLegends, elements) {
		var viewOne = F2(
			function (el, _v0) {
				var before = _v0.a;
				var chart_ = _v0.b;
				var after = _v0.c;
				switch (el.$) {
					case 'Indexed':
						return _Utils_Tuple3(before, chart_, after);
					case 'SeriesElement':
						var view = el.d;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'BarsElement':
						var view = el.e;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'CustomElement':
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'AxisElement':
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'TicksElement':
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'TickElement':
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 'LabelsElement':
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 'LabelElement':
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 'GridElement':
						var view = el.a;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(view, plane, tickValues),
								chart_),
							after);
					case 'SubElements':
						var func = el.a;
						return A3(
							$elm$core$List$foldr,
							viewOne,
							_Utils_Tuple3(before, chart_, after),
							A2(func, plane, allItems));
					case 'ListOfElements':
						var els = el.a;
						return A3(
							$elm$core$List$foldr,
							viewOne,
							_Utils_Tuple3(before, chart_, after),
							els);
					case 'SvgElement':
						var view = el.a;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					default:
						var view = el.a;
						return _Utils_Tuple3(
							($elm$core$List$length(chart_) > 0) ? A2(
								$elm$core$List$cons,
								A2(view, plane, allLegends),
								before) : before,
							chart_,
							($elm$core$List$length(chart_) > 0) ? after : A2(
								$elm$core$List$cons,
								A2(view, plane, allLegends),
								after));
				}
			});
		return A3(
			$elm$core$List$foldr,
			viewOne,
			_Utils_Tuple3(_List_Nil, _List_Nil, _List_Nil),
			elements);
	});
var $terezka$elm_charts$Chart$chart = F2(
	function (edits, unindexedElements) {
		var indexedElements = function () {
			var toIndexedEl = F2(
				function (el, _v4) {
					var acc = _v4.a;
					var index = _v4.b;
					switch (el.$) {
						case 'Indexed':
							var toElAndIndex = el.a;
							var _v6 = toElAndIndex(index);
							var newEl = _v6.a;
							var newIndex = _v6.b;
							return _Utils_Tuple2(
								_Utils_ap(
									acc,
									_List_fromArray(
										[newEl])),
								newIndex);
						case 'ListOfElements':
							var els = el.a;
							return A3(
								$elm$core$List$foldl,
								toIndexedEl,
								_Utils_Tuple2(acc, index),
								els);
						default:
							return _Utils_Tuple2(
								_Utils_ap(
									acc,
									_List_fromArray(
										[el])),
								index);
					}
				});
			return A3(
				$elm$core$List$foldl,
				toIndexedEl,
				_Utils_Tuple2(_List_Nil, 0),
				unindexedElements).a;
		}();
		var elements = function () {
			var isGrid = function (el) {
				if (el.$ === 'GridElement') {
					return true;
				} else {
					return false;
				}
			};
			return A2($elm$core$List$any, isGrid, indexedElements) ? indexedElements : A2(
				$elm$core$List$cons,
				$terezka$elm_charts$Chart$grid(_List_Nil),
				indexedElements);
		}();
		var legends_ = $terezka$elm_charts$Chart$getLegends(elements);
		var config = A2(
			$terezka$elm_charts$Internal$Helpers$apply,
			edits,
			{
				attrs: _List_fromArray(
					[
						$elm$svg$Svg$Attributes$style('overflow: visible;')
					]),
				domain: _List_Nil,
				events: _List_Nil,
				height: 300,
				htmlAttrs: _List_Nil,
				margin: {bottom: 0, left: 0, right: 0, top: 0},
				padding: {bottom: 0, left: 0, right: 0, top: 0},
				range: _List_Nil,
				responsive: true,
				width: 300
			});
		var plane = A2($terezka$elm_charts$Chart$definePlane, config, elements);
		var items = A2($terezka$elm_charts$Chart$getItems, plane, elements);
		var toEvent = function (_v2) {
			var event_ = _v2.a;
			var _v1 = event_.decoder;
			var decoder = _v1.a;
			return A2(
				$terezka$elm_charts$Internal$Svg$Event,
				event_.name,
				decoder(items));
		};
		var tickValues = A3($terezka$elm_charts$Chart$getTickValues, plane, items, elements);
		var _v0 = A6($terezka$elm_charts$Chart$viewElements, config, plane, tickValues, items, legends_, elements);
		var beforeEls = _v0.a;
		var chartEls = _v0.b;
		var afterEls = _v0.c;
		return A5(
			$terezka$elm_charts$Internal$Svg$container,
			plane,
			{
				attrs: config.attrs,
				events: A2($elm$core$List$map, toEvent, config.events),
				htmlAttrs: config.htmlAttrs,
				responsive: config.responsive
			},
			beforeEls,
			chartEls,
			afterEls);
	});
var $author$project$Views$Textile$Comparator$chartTextColor = '#5d5b7e';
var $author$project$Views$Textile$Comparator$ellipsis = F2(
	function (n, str) {
		return (_Utils_cmp(
			n,
			$elm$core$String$length(str)) < 0) ? (A3($elm$core$String$slice, 0, n, str) + '…') : str;
	});
var $elm$svg$Svg$Attributes$fontSize = _VirtualDom_attribute('font-size');
var $elm$svg$Svg$Attributes$fontWeight = _VirtualDom_attribute('font-weight');
var $terezka$elm_charts$Chart$Svg$label = F2(
	function (plane, edits) {
		return A2(
			$terezka$elm_charts$Internal$Svg$label,
			plane,
			A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Svg$defaultLabel));
	});
var $terezka$elm_charts$Chart$labelAt = F4(
	function (toX, toY, attrs, inner) {
		return $terezka$elm_charts$Chart$SvgElement(
			function (p) {
				return A4(
					$terezka$elm_charts$Chart$Svg$label,
					p,
					attrs,
					inner,
					{
						x: toX(p.x),
						y: toY(p.y)
					});
			});
	});
var $terezka$elm_charts$Chart$Attributes$percent = F2(
	function (per, b) {
		return b.min + ((b.max - b.min) * (per / 100));
	});
var $terezka$elm_charts$Chart$Attributes$rotate = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{rotate: config.rotate + v});
	});
var $author$project$Views$Textile$Comparator$fillLabels = function (entries) {
	var createLabel = function (_v0) {
		var label = _v0.a.label;
		var highlight = _v0.a.highlight;
		var xPosition = _v0.b;
		return A4(
			$terezka$elm_charts$Chart$labelAt,
			$terezka$elm_charts$Chart$Attributes$percent(xPosition),
			$terezka$elm_charts$Chart$Attributes$percent(0),
			_List_fromArray(
				[
					$terezka$elm_charts$Chart$Attributes$rotate(90),
					$terezka$elm_charts$Chart$Attributes$color($author$project$Views$Textile$Comparator$chartTextColor),
					$terezka$elm_charts$Chart$Attributes$attrs(
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fontSize('14'),
							$elm$svg$Svg$Attributes$style('text-anchor: start'),
							highlight ? $elm$svg$Svg$Attributes$fontWeight('500') : $elm$svg$Svg$Attributes$fontWeight('normal')
						]))
				]),
			_List_fromArray(
				[
					$elm$svg$Svg$text(
					A2($author$project$Views$Textile$Comparator$ellipsis, 58, label))
				]));
	};
	var baseWidth = 100 / A3(
		$elm$core$Basics$clamp,
		1,
		100,
		$elm$core$List$length(entries));
	var leftPadding = baseWidth / 4.5;
	return A2(
		$elm$core$List$map,
		createLabel,
		A2(
			$elm$core$List$indexedMap,
			F2(
				function (i, entry) {
					return _Utils_Tuple2(entry, (i * baseWidth) + leftPadding);
				}),
			entries));
};
var $terezka$elm_charts$Chart$Attributes$fontSize = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{
				fontSize: $elm$core$Maybe$Just(v)
			});
	});
var $terezka$elm_charts$Chart$Attributes$format = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{
				format: $elm$core$Maybe$Just(v)
			});
	});
var $author$project$Views$Textile$Comparator$formatLabel = F4(
	function (funit, _v0, daysOfWear, num) {
		var unit = _v0.unit;
		var inFunctionalUnit = function () {
			if (funit.$ === 'PerDayOfWear') {
				return num / $ianmackenzie$elm_units$Duration$inDays(daysOfWear);
			} else {
				return num;
			}
		}();
		return {
			x: A2($author$project$Views$Format$formatFloat, 2, inFunctionalUnit) + ('\u202F' + unit),
			y: A2($author$project$Views$Format$formatFloat, 2, inFunctionalUnit)
		};
	});
var $terezka$elm_charts$Chart$Attributes$height = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{height: v});
	});
var $terezka$elm_charts$Chart$Attributes$htmlAttrs = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{htmlAttrs: v});
	});
var $terezka$elm_charts$Chart$HtmlElement = function (a) {
	return {$: 'HtmlElement', a: a};
};
var $terezka$elm_charts$Internal$Coordinates$Axis = F7(
	function (length, marginMin, marginMax, dataMin, dataMax, min, max) {
		return {dataMax: dataMax, dataMin: dataMin, length: length, marginMax: marginMax, marginMin: marginMin, max: max, min: min};
	});
var $terezka$elm_charts$Internal$Svg$defaultContainer = {
	attrs: _List_fromArray(
		[
			$elm$svg$Svg$Attributes$style('overflow: visible;')
		]),
	events: _List_Nil,
	htmlAttrs: _List_Nil,
	responsive: true
};
var $terezka$elm_charts$Internal$Svg$barLegend = F2(
	function (config, barConfig) {
		var fontStyle = function () {
			var _v0 = config.fontSize;
			if (_v0.$ === 'Just') {
				var size_ = _v0.a;
				return A2(
					$elm$html$Html$Attributes$style,
					'font-size',
					$elm$core$String$fromInt(size_) + 'px');
			} else {
				return A2($elm$html$Html$Attributes$style, '', '');
			}
		}();
		var fakePlane = {
			x: A7($terezka$elm_charts$Internal$Coordinates$Axis, config.width, 0, 0, 0, 10, 0, 10),
			y: A7($terezka$elm_charts$Internal$Coordinates$Axis, config.height, 0, 0, 0, 10, 0, 10)
		};
		return A2(
			$elm$html$Html$div,
			_Utils_ap(
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elm-charts__legend'),
						A2($elm$html$Html$Attributes$style, 'display', 'flex'),
						A2($elm$html$Html$Attributes$style, 'align-items', 'center')
					]),
				config.htmlAttrs),
			_List_fromArray(
				[
					A5(
					$terezka$elm_charts$Internal$Svg$container,
					fakePlane,
					_Utils_update(
						$terezka$elm_charts$Internal$Svg$defaultContainer,
						{responsive: false}),
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$terezka$elm_charts$Internal$Svg$bar,
							fakePlane,
							barConfig,
							{x1: 0, x2: 10, y1: 0, y2: 10})
						]),
					_List_Nil),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							fontStyle,
							A2(
							$elm$html$Html$Attributes$style,
							'margin-left',
							$elm$core$String$fromFloat(config.spacing) + 'px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(config.title)
						]))
				]));
	});
var $terezka$elm_charts$Internal$Svg$defaultBarLegend = {color: '#808BAB', fontSize: $elm$core$Maybe$Nothing, height: 10, htmlAttrs: _List_Nil, spacing: 10, title: '', width: 10, xOff: 0, yOff: 0};
var $terezka$elm_charts$Chart$Svg$barLegend = F2(
	function (edits, barAttrs) {
		return A2(
			$terezka$elm_charts$Internal$Svg$barLegend,
			A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Svg$defaultBarLegend),
			A2($terezka$elm_charts$Internal$Helpers$apply, barAttrs, $terezka$elm_charts$Internal$Svg$defaultBar));
	});
var $terezka$elm_charts$Internal$Svg$Row = {$: 'Row'};
var $terezka$elm_charts$Internal$Svg$defaultLegends = {alignment: $terezka$elm_charts$Internal$Svg$Row, anchor: $elm$core$Maybe$Nothing, background: '', border: '', borderWidth: 0, htmlAttrs: _List_Nil, spacing: 10, xOff: 0, yOff: 0};
var $terezka$elm_charts$Internal$Svg$positionHtml = F7(
	function (plane, x, y, xOff, yOff, attrs, content) {
		var yPercentage = ((A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y) - yOff) * 100) / plane.y.length;
		var xPercentage = ((A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x) + xOff) * 100) / plane.x.length;
		var posititonStyles = _List_fromArray(
			[
				A2(
				$elm$html$Html$Attributes$style,
				'left',
				$elm$core$String$fromFloat(xPercentage) + '%'),
				A2(
				$elm$html$Html$Attributes$style,
				'top',
				$elm$core$String$fromFloat(yPercentage) + '%'),
				A2($elm$html$Html$Attributes$style, 'margin-right', '-400px'),
				A2($elm$html$Html$Attributes$style, 'position', 'absolute')
			]);
		return A2(
			$elm$html$Html$div,
			_Utils_ap(posititonStyles, attrs),
			content);
	});
var $terezka$elm_charts$Internal$Svg$legendsAt = F5(
	function (plane, x, y, config, children) {
		var otherAttrs = _List_fromArray(
			[
				$elm$html$Html$Attributes$class('elm-charts__legends'),
				A2($elm$html$Html$Attributes$style, 'background', config.background),
				A2($elm$html$Html$Attributes$style, 'border-color', config.border),
				A2(
				$elm$html$Html$Attributes$style,
				'border-width',
				$elm$core$String$fromFloat(config.borderWidth) + 'px'),
				A2($elm$html$Html$Attributes$style, 'border-style', 'solid')
			]);
		var anchorAttrs = function () {
			var _v2 = config.anchor;
			if (_v2.$ === 'Nothing') {
				return _List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'transform', 'translate(-0%, 0%)')
					]);
			} else {
				switch (_v2.a.$) {
					case 'End':
						var _v3 = _v2.a;
						return _List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'transform', 'translate(-100%, 0%)')
							]);
					case 'Start':
						var _v4 = _v2.a;
						return _List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'transform', 'translate(-0%, 0%)')
							]);
					default:
						var _v5 = _v2.a;
						return _List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'transform', 'translate(-50%, 0%)')
							]);
				}
			}
		}();
		var _v0 = function () {
			var _v1 = config.alignment;
			if (_v1.$ === 'Row') {
				return _Utils_Tuple2(
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'display', 'flex'),
							A2($elm$html$Html$Attributes$style, 'align-items', 'center')
						]),
					'right');
			} else {
				return _Utils_Tuple2(
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'display', 'flex'),
							A2($elm$html$Html$Attributes$style, 'flex-direction', 'column'),
							A2($elm$html$Html$Attributes$style, 'align-items', 'baseline')
						]),
					'bottom');
			}
		}();
		var alignmentAttrs = _v0.a;
		var direction = _v0.b;
		var paddingStyle = ' .elm-charts__legends .elm-charts__legend {\n              margin-' + (direction + (':' + ($elm$core$String$fromFloat(config.spacing) + ('px;\n            }\n\n            .elm-charts__legends .elm-charts__legend:last-child {\n              margin-' + (direction + ': 0px;\n            }\n        ')))));
		return A7(
			$terezka$elm_charts$Internal$Svg$positionHtml,
			plane,
			x,
			y,
			config.xOff,
			-config.yOff,
			_Utils_ap(
				anchorAttrs,
				_Utils_ap(
					alignmentAttrs,
					_Utils_ap(otherAttrs, config.htmlAttrs))),
			A2(
				$elm$core$List$cons,
				A3(
					$elm$html$Html$node,
					'style',
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(paddingStyle)
						])),
				children));
	});
var $terezka$elm_charts$Chart$Svg$legendsAt = F4(
	function (plane, x, y, edits) {
		return A4(
			$terezka$elm_charts$Internal$Svg$legendsAt,
			plane,
			x,
			y,
			A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Svg$defaultLegends));
	});
var $terezka$elm_charts$Internal$Svg$defaultInterpolation = {attrs: _List_Nil, color: $terezka$elm_charts$Internal$Helpers$pink, dashed: _List_Nil, design: $elm$core$Maybe$Nothing, method: $elm$core$Maybe$Nothing, opacity: 0, width: 1};
var $terezka$elm_charts$Internal$Svg$defaultLineLegend = {color: '#808BAB', fontSize: $elm$core$Maybe$Nothing, height: 16, htmlAttrs: _List_Nil, spacing: 10, title: '', width: 30, xOff: 0, yOff: 0};
var $terezka$elm_charts$Internal$Svg$Point = F2(
	function (x, y) {
		return {x: x, y: y};
	});
var $elm$svg$Svg$Attributes$fillRule = _VirtualDom_attribute('fill-rule');
var $terezka$elm_charts$Internal$Interpolation$linear = $elm$core$List$map(
	$elm$core$List$map(
		function (_v0) {
			var x = _v0.x;
			var y = _v0.y;
			return A2($terezka$elm_charts$Internal$Commands$Line, x, y);
		}));
var $terezka$elm_charts$Internal$Interpolation$First = {$: 'First'};
var $terezka$elm_charts$Internal$Interpolation$Previous = function (a) {
	return {$: 'Previous', a: a};
};
var $terezka$elm_charts$Internal$Interpolation$monotoneCurve = F4(
	function (point0, point1, tangent0, tangent1) {
		var dx = (point1.x - point0.x) / 3;
		return A6($terezka$elm_charts$Internal$Commands$CubicBeziers, point0.x + dx, point0.y + (dx * tangent0), point1.x - dx, point1.y - (dx * tangent1), point1.x, point1.y);
	});
var $terezka$elm_charts$Internal$Interpolation$slope2 = F3(
	function (point0, point1, t) {
		var h = point1.x - point0.x;
		return (!(!h)) ? ((((3 * (point1.y - point0.y)) / h) - t) / 2) : t;
	});
var $terezka$elm_charts$Internal$Interpolation$sign = function (x) {
	return (x < 0) ? (-1) : 1;
};
var $terezka$elm_charts$Internal$Interpolation$toH = F2(
	function (h0, h1) {
		return (!h0) ? ((h1 < 0) ? (0 * (-1)) : h1) : h0;
	});
var $terezka$elm_charts$Internal$Interpolation$slope3 = F3(
	function (point0, point1, point2) {
		var h1 = point2.x - point1.x;
		var h0 = point1.x - point0.x;
		var s0h = A2($terezka$elm_charts$Internal$Interpolation$toH, h0, h1);
		var s0 = (point1.y - point0.y) / s0h;
		var s1h = A2($terezka$elm_charts$Internal$Interpolation$toH, h1, h0);
		var s1 = (point2.y - point1.y) / s1h;
		var p = ((s0 * h1) + (s1 * h0)) / (h0 + h1);
		var slope = ($terezka$elm_charts$Internal$Interpolation$sign(s0) + $terezka$elm_charts$Internal$Interpolation$sign(s1)) * A2(
			$elm$core$Basics$min,
			A2(
				$elm$core$Basics$min,
				$elm$core$Basics$abs(s0),
				$elm$core$Basics$abs(s1)),
			0.5 * $elm$core$Basics$abs(p));
		return $elm$core$Basics$isNaN(slope) ? 0 : slope;
	});
var $terezka$elm_charts$Internal$Interpolation$monotonePart = F2(
	function (points, _v0) {
		var tangent = _v0.a;
		var commands = _v0.b;
		var _v1 = _Utils_Tuple2(tangent, points);
		_v1$4:
		while (true) {
			if (_v1.a.$ === 'First') {
				if (_v1.b.b && _v1.b.b.b) {
					if (_v1.b.b.b.b) {
						var _v2 = _v1.a;
						var _v3 = _v1.b;
						var p0 = _v3.a;
						var _v4 = _v3.b;
						var p1 = _v4.a;
						var _v5 = _v4.b;
						var p2 = _v5.a;
						var rest = _v5.b;
						var t1 = A3($terezka$elm_charts$Internal$Interpolation$slope3, p0, p1, p2);
						var t0 = A3($terezka$elm_charts$Internal$Interpolation$slope2, p0, p1, t1);
						return A2(
							$terezka$elm_charts$Internal$Interpolation$monotonePart,
							A2(
								$elm$core$List$cons,
								p1,
								A2($elm$core$List$cons, p2, rest)),
							_Utils_Tuple2(
								$terezka$elm_charts$Internal$Interpolation$Previous(t1),
								_Utils_ap(
									commands,
									_List_fromArray(
										[
											A4($terezka$elm_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1)
										]))));
					} else {
						var _v9 = _v1.a;
						var _v10 = _v1.b;
						var p0 = _v10.a;
						var _v11 = _v10.b;
						var p1 = _v11.a;
						var t1 = A3($terezka$elm_charts$Internal$Interpolation$slope3, p0, p1, p1);
						return _Utils_Tuple2(
							$terezka$elm_charts$Internal$Interpolation$Previous(t1),
							_Utils_ap(
								commands,
								_List_fromArray(
									[
										A4($terezka$elm_charts$Internal$Interpolation$monotoneCurve, p0, p1, t1, t1),
										A2($terezka$elm_charts$Internal$Commands$Line, p1.x, p1.y)
									])));
					}
				} else {
					break _v1$4;
				}
			} else {
				if (_v1.b.b && _v1.b.b.b) {
					if (_v1.b.b.b.b) {
						var t0 = _v1.a.a;
						var _v6 = _v1.b;
						var p0 = _v6.a;
						var _v7 = _v6.b;
						var p1 = _v7.a;
						var _v8 = _v7.b;
						var p2 = _v8.a;
						var rest = _v8.b;
						var t1 = A3($terezka$elm_charts$Internal$Interpolation$slope3, p0, p1, p2);
						return A2(
							$terezka$elm_charts$Internal$Interpolation$monotonePart,
							A2(
								$elm$core$List$cons,
								p1,
								A2($elm$core$List$cons, p2, rest)),
							_Utils_Tuple2(
								$terezka$elm_charts$Internal$Interpolation$Previous(t1),
								_Utils_ap(
									commands,
									_List_fromArray(
										[
											A4($terezka$elm_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1)
										]))));
					} else {
						var t0 = _v1.a.a;
						var _v12 = _v1.b;
						var p0 = _v12.a;
						var _v13 = _v12.b;
						var p1 = _v13.a;
						var t1 = A3($terezka$elm_charts$Internal$Interpolation$slope3, p0, p1, p1);
						return _Utils_Tuple2(
							$terezka$elm_charts$Internal$Interpolation$Previous(t1),
							_Utils_ap(
								commands,
								_List_fromArray(
									[
										A4($terezka$elm_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1),
										A2($terezka$elm_charts$Internal$Commands$Line, p1.x, p1.y)
									])));
					}
				} else {
					break _v1$4;
				}
			}
		}
		return _Utils_Tuple2(tangent, commands);
	});
var $terezka$elm_charts$Internal$Interpolation$monotoneSection = F2(
	function (points, _v0) {
		var tangent = _v0.a;
		var acc = _v0.b;
		var _v1 = function () {
			if (points.b) {
				var p0 = points.a;
				var rest = points.b;
				return A2(
					$terezka$elm_charts$Internal$Interpolation$monotonePart,
					A2($elm$core$List$cons, p0, rest),
					_Utils_Tuple2(
						tangent,
						_List_fromArray(
							[
								A2($terezka$elm_charts$Internal$Commands$Line, p0.x, p0.y)
							])));
			} else {
				return _Utils_Tuple2(tangent, _List_Nil);
			}
		}();
		var t0 = _v1.a;
		var commands = _v1.b;
		return _Utils_Tuple2(
			t0,
			A2($elm$core$List$cons, commands, acc));
	});
var $terezka$elm_charts$Internal$Interpolation$monotone = function (sections) {
	return A3(
		$elm$core$List$foldr,
		$terezka$elm_charts$Internal$Interpolation$monotoneSection,
		_Utils_Tuple2($terezka$elm_charts$Internal$Interpolation$First, _List_Nil),
		sections).b;
};
var $terezka$elm_charts$Internal$Interpolation$Point = F2(
	function (x, y) {
		return {x: x, y: y};
	});
var $terezka$elm_charts$Internal$Interpolation$after = F2(
	function (a, b) {
		return _List_fromArray(
			[
				a,
				A2($terezka$elm_charts$Internal$Interpolation$Point, b.x, a.y),
				b
			]);
	});
var $terezka$elm_charts$Internal$Interpolation$stepped = function (sections) {
	var expand = F2(
		function (result, section) {
			expand:
			while (true) {
				if (section.b) {
					if (section.b.b) {
						var a = section.a;
						var _v1 = section.b;
						var b = _v1.a;
						var rest = _v1.b;
						var $temp$result = _Utils_ap(
							result,
							A2($terezka$elm_charts$Internal$Interpolation$after, a, b)),
							$temp$section = A2($elm$core$List$cons, b, rest);
						result = $temp$result;
						section = $temp$section;
						continue expand;
					} else {
						var last = section.a;
						return result;
					}
				} else {
					return result;
				}
			}
		});
	return A2(
		$elm$core$List$map,
		A2(
			$elm$core$Basics$composeR,
			expand(_List_Nil),
			$elm$core$List$map(
				function (_v2) {
					var x = _v2.x;
					var y = _v2.y;
					return A2($terezka$elm_charts$Internal$Commands$Line, x, y);
				})),
		sections);
};
var $terezka$elm_charts$Internal$Svg$last = function (list) {
	return $elm$core$List$head(
		A2(
			$elm$core$List$drop,
			$elm$core$List$length(list) - 1,
			list));
};
var $terezka$elm_charts$Internal$Svg$withBorder = F2(
	function (stuff, func) {
		if (stuff.b) {
			var first = stuff.a;
			var rest = stuff.b;
			return $elm$core$Maybe$Just(
				A2(
					func,
					first,
					A2(
						$elm$core$Maybe$withDefault,
						first,
						$terezka$elm_charts$Internal$Svg$last(rest))));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $terezka$elm_charts$Internal$Svg$toCommands = F4(
	function (method, toX, toY, data) {
		var toSets = F2(
			function (ps, cmds) {
				return A2(
					$terezka$elm_charts$Internal$Svg$withBorder,
					ps,
					F2(
						function (first, last_) {
							return _Utils_Tuple3(first, cmds, last_);
						}));
			});
		var fold = F2(
			function (datum_, acc) {
				var _v1 = toY(datum_);
				if (_v1.$ === 'Just') {
					var y_ = _v1.a;
					if (acc.b) {
						var latest = acc.a;
						var rest = acc.b;
						return A2(
							$elm$core$List$cons,
							_Utils_ap(
								latest,
								_List_fromArray(
									[
										{
										x: toX(datum_),
										y: y_
									}
									])),
							rest);
					} else {
						return A2(
							$elm$core$List$cons,
							_List_fromArray(
								[
									{
									x: toX(datum_),
									y: y_
								}
								]),
							acc);
					}
				} else {
					return A2($elm$core$List$cons, _List_Nil, acc);
				}
			});
		var points = $elm$core$List$reverse(
			A3($elm$core$List$foldl, fold, _List_Nil, data));
		var commands = function () {
			switch (method.$) {
				case 'Linear':
					return $terezka$elm_charts$Internal$Interpolation$linear(points);
				case 'Monotone':
					return $terezka$elm_charts$Internal$Interpolation$monotone(points);
				default:
					return $terezka$elm_charts$Internal$Interpolation$stepped(points);
			}
		}();
		return A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A3($elm$core$List$map2, toSets, points, commands));
	});
var $terezka$elm_charts$Internal$Svg$area = F6(
	function (plane, toX, toY2M, toY, config, data) {
		var _v0 = function () {
			var _v1 = config.design;
			if (_v1.$ === 'Nothing') {
				return _Utils_Tuple2(
					$elm$svg$Svg$text(''),
					config.color);
			} else {
				var design = _v1.a;
				return A2($terezka$elm_charts$Internal$Svg$toPattern, config.color, design);
			}
		}();
		var patternDefs = _v0.a;
		var fill = _v0.b;
		var view = function (cmds) {
			return A4(
				$terezka$elm_charts$Internal$Svg$withAttrs,
				config.attrs,
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__area-section'),
						$elm$svg$Svg$Attributes$fill(fill),
						$elm$svg$Svg$Attributes$fillOpacity(
						$elm$core$String$fromFloat(config.opacity)),
						$elm$svg$Svg$Attributes$strokeWidth('0'),
						$elm$svg$Svg$Attributes$fillRule('evenodd'),
						$elm$svg$Svg$Attributes$d(
						A2($terezka$elm_charts$Internal$Commands$description, plane, cmds)),
						$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
					]),
				_List_Nil);
		};
		var withUnder = F2(
			function (_v5, _v6) {
				var firstBottom = _v5.a;
				var cmdsBottom = _v5.b;
				var endBottom = _v5.c;
				var firstTop = _v6.a;
				var cmdsTop = _v6.b;
				var endTop = _v6.c;
				return view(
					_Utils_ap(
						_List_fromArray(
							[
								A2($terezka$elm_charts$Internal$Commands$Move, firstBottom.x, firstBottom.y),
								A2($terezka$elm_charts$Internal$Commands$Line, firstTop.x, firstTop.y)
							]),
						_Utils_ap(
							cmdsTop,
							_Utils_ap(
								_List_fromArray(
									[
										A2($terezka$elm_charts$Internal$Commands$Move, firstBottom.x, firstBottom.y)
									]),
								_Utils_ap(
									cmdsBottom,
									_List_fromArray(
										[
											A2($terezka$elm_charts$Internal$Commands$Line, endTop.x, endTop.y)
										]))))));
			});
		var withoutUnder = function (_v4) {
			var first = _v4.a;
			var cmds = _v4.b;
			var end = _v4.c;
			return view(
				_Utils_ap(
					_List_fromArray(
						[
							A2($terezka$elm_charts$Internal$Commands$Move, first.x, 0),
							A2($terezka$elm_charts$Internal$Commands$Line, first.x, first.y)
						]),
					_Utils_ap(
						cmds,
						_List_fromArray(
							[
								A2($terezka$elm_charts$Internal$Commands$Line, end.x, 0)
							]))));
		};
		if (config.opacity <= 0) {
			return $elm$svg$Svg$text('');
		} else {
			var _v2 = config.method;
			if (_v2.$ === 'Nothing') {
				return $elm$svg$Svg$text('');
			} else {
				var method = _v2.a;
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__area-sections')
						]),
					function () {
						if (toY2M.$ === 'Nothing') {
							return A2(
								$elm$core$List$cons,
								patternDefs,
								A2(
									$elm$core$List$map,
									withoutUnder,
									A4($terezka$elm_charts$Internal$Svg$toCommands, method, toX, toY, data)));
						} else {
							var toY2 = toY2M.a;
							return A2(
								$elm$core$List$cons,
								patternDefs,
								A3(
									$elm$core$List$map2,
									withUnder,
									A4($terezka$elm_charts$Internal$Svg$toCommands, method, toX, toY2, data),
									A4($terezka$elm_charts$Internal$Svg$toCommands, method, toX, toY, data)));
						}
					}());
			}
		}
	});
var $terezka$elm_charts$Internal$Svg$interpolation = F5(
	function (plane, toX, toY, config, data) {
		var view = function (_v1) {
			var first = _v1.a;
			var cmds = _v1.b;
			return A4(
				$terezka$elm_charts$Internal$Svg$withAttrs,
				config.attrs,
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__interpolation-section'),
						$elm$svg$Svg$Attributes$fill('transparent'),
						$elm$svg$Svg$Attributes$stroke(config.color),
						$elm$svg$Svg$Attributes$strokeDasharray(
						A2(
							$elm$core$String$join,
							' ',
							A2($elm$core$List$map, $elm$core$String$fromFloat, config.dashed))),
						$elm$svg$Svg$Attributes$strokeWidth(
						$elm$core$String$fromFloat(config.width)),
						$elm$svg$Svg$Attributes$d(
						A2(
							$terezka$elm_charts$Internal$Commands$description,
							plane,
							A2(
								$elm$core$List$cons,
								A2($terezka$elm_charts$Internal$Commands$Move, first.x, first.y),
								cmds))),
						$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
					]),
				_List_Nil);
		};
		var _v0 = config.method;
		if (_v0.$ === 'Nothing') {
			return $elm$svg$Svg$text('');
		} else {
			var method = _v0.a;
			return A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__interpolation-sections')
					]),
				A2(
					$elm$core$List$map,
					view,
					A4($terezka$elm_charts$Internal$Svg$toCommands, method, toX, toY, data)));
		}
	});
var $terezka$elm_charts$Internal$Svg$toRadius = F2(
	function (size_, shape) {
		var area_ = (2 * $elm$core$Basics$pi) * size_;
		switch (shape.$) {
			case 'Circle':
				return $elm$core$Basics$sqrt(area_ / $elm$core$Basics$pi);
			case 'Triangle':
				var side = $elm$core$Basics$sqrt(
					(area_ * 4) / $elm$core$Basics$sqrt(3));
				return $elm$core$Basics$sqrt(3) * side;
			case 'Square':
				return $elm$core$Basics$sqrt(area_) / 2;
			case 'Diamond':
				return $elm$core$Basics$sqrt(area_) / 2;
			case 'Cross':
				return $elm$core$Basics$sqrt(area_ / 4);
			default:
				return $elm$core$Basics$sqrt(area_ / 4);
		}
	});
var $terezka$elm_charts$Internal$Svg$lineLegend = F3(
	function (config, interConfig, dotConfig) {
		var topMargin = function () {
			var _v1 = dotConfig.shape;
			if (_v1.$ === 'Just') {
				var shape = _v1.a;
				return A2($terezka$elm_charts$Internal$Svg$toRadius, dotConfig.size, shape);
			} else {
				return 0;
			}
		}();
		var fontStyle = function () {
			var _v0 = config.fontSize;
			if (_v0.$ === 'Just') {
				var size_ = _v0.a;
				return A2(
					$elm$html$Html$Attributes$style,
					'font-size',
					$elm$core$String$fromInt(size_) + 'px');
			} else {
				return A2($elm$html$Html$Attributes$style, '', '');
			}
		}();
		var fakePlane = {
			x: A7($terezka$elm_charts$Internal$Coordinates$Axis, config.width, 0, 0, 0, 10, 0, 10),
			y: A7($terezka$elm_charts$Internal$Coordinates$Axis, config.height, 0, 0, 0, 10, 0, 10)
		};
		var bottomMargin = (!interConfig.opacity) ? topMargin : 0;
		return A2(
			$elm$html$Html$div,
			_Utils_ap(
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elm-charts__legend'),
						A2($elm$html$Html$Attributes$style, 'display', 'flex'),
						A2($elm$html$Html$Attributes$style, 'align-items', 'center')
					]),
				config.htmlAttrs),
			_List_fromArray(
				[
					A5(
					$terezka$elm_charts$Internal$Svg$container,
					fakePlane,
					_Utils_update(
						$terezka$elm_charts$Internal$Svg$defaultContainer,
						{responsive: false}),
					_List_Nil,
					_List_fromArray(
						[
							A5(
							$terezka$elm_charts$Internal$Svg$interpolation,
							fakePlane,
							function ($) {
								return $.x;
							},
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.y;
								},
								$elm$core$Maybe$Just),
							interConfig,
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Svg$Point, 0, 5),
									A2($terezka$elm_charts$Internal$Svg$Point, 10, 5)
								])),
							A6(
							$terezka$elm_charts$Internal$Svg$area,
							fakePlane,
							function ($) {
								return $.x;
							},
							$elm$core$Maybe$Nothing,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.y;
								},
								$elm$core$Maybe$Just),
							interConfig,
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Svg$Point, 0, 5),
									A2($terezka$elm_charts$Internal$Svg$Point, 10, 5)
								])),
							A5(
							$terezka$elm_charts$Internal$Svg$dot,
							fakePlane,
							function ($) {
								return $.x;
							},
							function ($) {
								return $.y;
							},
							dotConfig,
							A2($terezka$elm_charts$Internal$Svg$Point, 5, 5))
						]),
					_List_Nil),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							fontStyle,
							A2(
							$elm$html$Html$Attributes$style,
							'margin-left',
							$elm$core$String$fromFloat(config.spacing) + 'px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(config.title)
						]))
				]));
	});
var $terezka$elm_charts$Internal$Svg$Linear = {$: 'Linear'};
var $terezka$elm_charts$Chart$Attributes$linear = function (config) {
	return _Utils_update(
		config,
		{
			method: $elm$core$Maybe$Just($terezka$elm_charts$Internal$Svg$Linear)
		});
};
var $terezka$elm_charts$Chart$Attributes$opacity = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{opacity: v});
	});
var $terezka$elm_charts$Chart$Svg$lineLegend = F3(
	function (edits, interAttrsOrg, dotAttrsOrg) {
		var interpolationConfigOrg = A2($terezka$elm_charts$Internal$Helpers$apply, interAttrsOrg, $terezka$elm_charts$Internal$Svg$defaultInterpolation);
		var dotConfigOrg = A2($terezka$elm_charts$Internal$Helpers$apply, dotAttrsOrg, $terezka$elm_charts$Internal$Svg$defaultDot);
		var adjustWidth = function (config) {
			return _Utils_update(
				config,
				{width: 10});
		};
		var _v0 = function () {
			var _v1 = _Utils_Tuple2(interpolationConfigOrg.method, dotConfigOrg.shape);
			if (_v1.a.$ === 'Just') {
				if (_v1.b.$ === 'Nothing') {
					var _v2 = _v1.b;
					return _Utils_Tuple3(
						dotAttrsOrg,
						interAttrsOrg,
						A2(
							$elm$core$List$cons,
							$terezka$elm_charts$Chart$Attributes$width(10),
							edits));
				} else {
					return _Utils_Tuple3(
						dotAttrsOrg,
						A2(
							$elm$core$List$cons,
							$terezka$elm_charts$Chart$Attributes$opacity(0),
							interAttrsOrg),
						edits);
				}
			} else {
				if (_v1.b.$ === 'Nothing') {
					var _v3 = _v1.a;
					var _v4 = _v1.b;
					return _Utils_Tuple3(
						A2($elm$core$List$cons, $terezka$elm_charts$Chart$Attributes$circle, dotAttrsOrg),
						A2($elm$core$List$cons, $terezka$elm_charts$Chart$Attributes$linear, interAttrsOrg),
						A2(
							$elm$core$List$cons,
							$terezka$elm_charts$Chart$Attributes$width(10),
							edits));
				} else {
					var _v5 = _v1.a;
					return _Utils_Tuple3(
						A2($elm$core$List$cons, $terezka$elm_charts$Chart$Attributes$circle, dotAttrsOrg),
						interAttrsOrg,
						A2(
							$elm$core$List$cons,
							$terezka$elm_charts$Chart$Attributes$width(10),
							edits));
				}
			}
		}();
		var dotAttrs = _v0.a;
		var interAttrs = _v0.b;
		var lineLegendAttrs = _v0.c;
		return A3(
			$terezka$elm_charts$Internal$Svg$lineLegend,
			A2($terezka$elm_charts$Internal$Helpers$apply, lineLegendAttrs, $terezka$elm_charts$Internal$Svg$defaultLineLegend),
			A2($terezka$elm_charts$Internal$Helpers$apply, interAttrs, $terezka$elm_charts$Internal$Svg$defaultInterpolation),
			A2($terezka$elm_charts$Internal$Helpers$apply, dotAttrs, $terezka$elm_charts$Internal$Svg$defaultDot));
	});
var $terezka$elm_charts$Chart$Attributes$title = F2(
	function (value, config) {
		return _Utils_update(
			config,
			{title: value});
	});
var $terezka$elm_charts$Chart$legendsAt = F4(
	function (toX, toY, attrs, children) {
		return $terezka$elm_charts$Chart$HtmlElement(
			F2(
				function (p, legends_) {
					var viewLegend = function (legend) {
						if (legend.$ === 'BarLegend') {
							var name = legend.a;
							var barAttrs = legend.b;
							return A2(
								$terezka$elm_charts$Chart$Svg$barLegend,
								A2(
									$elm$core$List$cons,
									$terezka$elm_charts$Chart$Attributes$title(name),
									children),
								barAttrs);
						} else {
							var name = legend.a;
							var interAttrs = legend.b;
							var dotAttrs = legend.c;
							return A3(
								$terezka$elm_charts$Chart$Svg$lineLegend,
								A2(
									$elm$core$List$cons,
									$terezka$elm_charts$Chart$Attributes$title(name),
									children),
								interAttrs,
								dotAttrs);
						}
					};
					return A5(
						$terezka$elm_charts$Chart$Svg$legendsAt,
						p,
						toX(p.x),
						toY(p.y),
						attrs,
						A2($elm$core$List$map, viewLegend, legends_));
				}));
	});
var $terezka$elm_charts$Chart$Attributes$margin = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{margin: v});
	});
var $terezka$elm_charts$Chart$Attributes$moveDown = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{yOff: config.yOff + v});
	});
var $terezka$elm_charts$Internal$Property$Stacked = function (a) {
	return {$: 'Stacked', a: a};
};
var $terezka$elm_charts$Internal$Property$meta = F2(
	function (value, prop) {
		if (prop.$ === 'Property') {
			var con = prop.a;
			return $terezka$elm_charts$Internal$Property$Property(
				_Utils_update(
					con,
					{
						meta: $elm$core$Maybe$Just(value)
					}));
		} else {
			var cons = prop.a;
			return $terezka$elm_charts$Internal$Property$Stacked(
				A2(
					$elm$core$List$map,
					function (con) {
						return _Utils_update(
							con,
							{
								meta: $elm$core$Maybe$Just(value)
							});
					},
					cons));
		}
	});
var $terezka$elm_charts$Chart$named = function (name) {
	return $terezka$elm_charts$Internal$Property$meta(name);
};
var $terezka$elm_charts$Chart$Attributes$spacing = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{spacing: v});
	});
var $terezka$elm_charts$Internal$Property$stacked = function (properties) {
	var toVisual = F2(
		function (toYs_, datum) {
			var vs = A2(
				$elm$core$List$filterMap,
				function (toY) {
					return toY(datum);
				},
				toYs_);
			return (!_Utils_eq(
				$elm$core$List$length(vs),
				$elm$core$List$length(toYs_))) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				$elm$core$List$sum(vs));
		});
	var stack = F3(
		function (list, prev, result) {
			stack:
			while (true) {
				if (list.b) {
					var one = list.a;
					var rest = list.b;
					var toYs_ = A2($elm$core$List$cons, one.value, prev);
					var $temp$list = rest,
						$temp$prev = toYs_,
						$temp$result = A2(
						$elm$core$List$cons,
						_Utils_update(
							one,
							{
								visual: toVisual(toYs_)
							}),
						result);
					list = $temp$list;
					prev = $temp$prev;
					result = $temp$result;
					continue stack;
				} else {
					return result;
				}
			}
		});
	var configs = A2(
		$elm$core$List$concatMap,
		$terezka$elm_charts$Internal$Property$toConfigs,
		$elm$core$List$reverse(properties));
	return $terezka$elm_charts$Internal$Property$Stacked(
		A3(stack, configs, _List_Nil, _List_Nil));
};
var $terezka$elm_charts$Chart$stacked = $terezka$elm_charts$Internal$Property$stacked;
var $elm_community$list_extra$List$Extra$zip = $elm$core$List$map2($elm$core$Tuple$pair);
var $author$project$Views$Dataviz$stepsLegendData = function (_v0) {
	var knitted = _v0.knitted;
	return A2(
		$elm_community$list_extra$List$Extra$zip,
		$elm$core$List$reverse(
			_List_fromArray(
				[
					function ($) {
					return $.material;
				},
					function ($) {
					return $.spinning;
				},
					function ($) {
					return $.weavingKnitting;
				},
					function ($) {
					return $.dyeing;
				},
					function ($) {
					return $.making;
				},
					function ($) {
					return $.transport;
				},
					function ($) {
					return $.use;
				},
					function ($) {
					return $.endOfLife;
				}
				])),
		_List_fromArray(
			[
				'Matière',
				'Filature',
				knitted ? 'Tricotage' : 'Tissage',
				'Teinture',
				'Confection',
				'Transport',
				'Utilisation',
				'Fin de vie'
			]));
};
var $terezka$elm_charts$Internal$Property$variation = F2(
	function (attrs, prop) {
		if (prop.$ === 'Property') {
			var c = prop.a;
			return $terezka$elm_charts$Internal$Property$Property(
				_Utils_update(
					c,
					{
						extra: F5(
							function (p, s, i, m, d) {
								return _Utils_ap(
									A5(c.extra, p, s, i, m, d),
									A5(attrs, p, s, i, m, d));
							})
					}));
		} else {
			var cs = prop.a;
			return $terezka$elm_charts$Internal$Property$Stacked(
				A2(
					$elm$core$List$map,
					function (c) {
						return _Utils_update(
							c,
							{
								extra: F5(
									function (p, s, i, m, d) {
										return _Utils_ap(
											A5(c.extra, p, s, i, m, d),
											A5(attrs, p, s, i, m, d));
									})
							});
					},
					cs));
		}
	});
var $terezka$elm_charts$Chart$variation = function (func) {
	return $terezka$elm_charts$Internal$Property$variation(
		F5(
			function (_v0, _v1, index, _v2, datum) {
				return A2(func, index, datum);
			}));
};
var $terezka$elm_charts$Chart$Attributes$withGrid = function (config) {
	return _Utils_update(
		config,
		{grid: true});
};
var $terezka$elm_charts$Internal$Svg$End = {$: 'End'};
var $terezka$elm_charts$Internal$Svg$Floats = {$: 'Floats'};
var $terezka$elm_charts$Chart$LabelsElement = F3(
	function (a, b, c) {
		return {$: 'LabelsElement', a: a, b: b, c: c};
	});
var $terezka$elm_charts$Internal$Svg$Start = {$: 'Start'};
var $terezka$elm_charts$Internal$Svg$Generator = function (a) {
	return {$: 'Generator', a: a};
};
var $terezka$intervals$Intervals$Around = function (a) {
	return {$: 'Around', a: a};
};
var $terezka$intervals$Intervals$around = $terezka$intervals$Intervals$Around;
var $terezka$intervals$Intervals$ceilingTo = F2(
	function (prec, number) {
		return prec * $elm$core$Basics$ceiling(number / prec);
	});
var $terezka$intervals$Intervals$getBeginning = F2(
	function (min, interval) {
		var multiple = min / interval;
		return _Utils_eq(
			multiple,
			$elm$core$Basics$round(multiple)) ? min : A2($terezka$intervals$Intervals$ceilingTo, interval, min);
	});
var $terezka$intervals$Intervals$correctFloat = function (prec) {
	return A2(
		$elm$core$Basics$composeR,
		$myrho$elm_round$Round$round(prec),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$String$toFloat,
			$elm$core$Maybe$withDefault(0)));
};
var $terezka$intervals$Intervals$getMultiples = F3(
	function (magnitude, allowDecimals, hasTickAmount) {
		var defaults = hasTickAmount ? _List_fromArray(
			[1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10]) : _List_fromArray(
			[1, 2, 2.5, 5, 10]);
		return allowDecimals ? defaults : ((magnitude === 1) ? A2(
			$elm$core$List$filter,
			function (n) {
				return _Utils_eq(
					$elm$core$Basics$round(n),
					n);
			},
			defaults) : ((magnitude <= 0.1) ? _List_fromArray(
			[1 / magnitude]) : defaults));
	});
var $terezka$intervals$Intervals$getPrecision = function (number) {
	var _v0 = A2(
		$elm$core$String$split,
		'e',
		$elm$core$String$fromFloat(number));
	if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
		var before = _v0.a;
		var _v1 = _v0.b;
		var after = _v1.a;
		return $elm$core$Basics$abs(
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(after)));
	} else {
		var _v2 = A2(
			$elm$core$String$split,
			'.',
			$elm$core$String$fromFloat(number));
		if ((_v2.b && _v2.b.b) && (!_v2.b.b.b)) {
			var before = _v2.a;
			var _v3 = _v2.b;
			var after = _v3.a;
			return $elm$core$String$length(after);
		} else {
			return 0;
		}
	}
};
var $elm$core$Basics$e = _Basics_e;
var $terezka$intervals$Intervals$toMagnitude = function (num) {
	return A2(
		$elm$core$Basics$pow,
		10,
		$elm$core$Basics$floor(
			A2($elm$core$Basics$logBase, $elm$core$Basics$e, num) / A2($elm$core$Basics$logBase, $elm$core$Basics$e, 10)));
};
var $terezka$intervals$Intervals$getInterval = F3(
	function (intervalRaw, allowDecimals, hasTickAmount) {
		var magnitude = $terezka$intervals$Intervals$toMagnitude(intervalRaw);
		var multiples = A3($terezka$intervals$Intervals$getMultiples, magnitude, allowDecimals, hasTickAmount);
		var normalized = intervalRaw / magnitude;
		var findMultipleExact = function (multiples_) {
			findMultipleExact:
			while (true) {
				if (multiples_.b) {
					var m1 = multiples_.a;
					var rest = multiples_.b;
					if (_Utils_cmp(m1 * magnitude, intervalRaw) > -1) {
						return m1;
					} else {
						var $temp$multiples_ = rest;
						multiples_ = $temp$multiples_;
						continue findMultipleExact;
					}
				} else {
					return 1;
				}
			}
		};
		var findMultiple = function (multiples_) {
			findMultiple:
			while (true) {
				if (multiples_.b) {
					if (multiples_.b.b) {
						var m1 = multiples_.a;
						var _v2 = multiples_.b;
						var m2 = _v2.a;
						var rest = _v2.b;
						if (_Utils_cmp(normalized, (m1 + m2) / 2) < 1) {
							return m1;
						} else {
							var $temp$multiples_ = A2($elm$core$List$cons, m2, rest);
							multiples_ = $temp$multiples_;
							continue findMultiple;
						}
					} else {
						var m1 = multiples_.a;
						var rest = multiples_.b;
						if (_Utils_cmp(normalized, m1) < 1) {
							return m1;
						} else {
							var $temp$multiples_ = rest;
							multiples_ = $temp$multiples_;
							continue findMultiple;
						}
					}
				} else {
					return 1;
				}
			}
		};
		var multiple = hasTickAmount ? findMultipleExact(multiples) : findMultiple(multiples);
		var precision = $terezka$intervals$Intervals$getPrecision(magnitude) + $terezka$intervals$Intervals$getPrecision(multiple);
		return A2($terezka$intervals$Intervals$correctFloat, precision, multiple * magnitude);
	});
var $terezka$intervals$Intervals$positions = F5(
	function (range, beginning, interval, m, acc) {
		positions:
		while (true) {
			var nextPosition = A2(
				$terezka$intervals$Intervals$correctFloat,
				$terezka$intervals$Intervals$getPrecision(interval),
				beginning + (m * interval));
			if (_Utils_cmp(nextPosition, range.max) > 0) {
				return acc;
			} else {
				var $temp$range = range,
					$temp$beginning = beginning,
					$temp$interval = interval,
					$temp$m = m + 1,
					$temp$acc = _Utils_ap(
					acc,
					_List_fromArray(
						[nextPosition]));
				range = $temp$range;
				beginning = $temp$beginning;
				interval = $temp$interval;
				m = $temp$m;
				acc = $temp$acc;
				continue positions;
			}
		}
	});
var $terezka$intervals$Intervals$values = F4(
	function (allowDecimals, exact, amountRough, range) {
		var intervalRough = (range.max - range.min) / amountRough;
		var interval = A3($terezka$intervals$Intervals$getInterval, intervalRough, allowDecimals, exact);
		var intervalSafe = (!interval) ? 1 : interval;
		var beginning = A2($terezka$intervals$Intervals$getBeginning, range.min, intervalSafe);
		var amountRoughSafe = (!amountRough) ? 1 : amountRough;
		return A5($terezka$intervals$Intervals$positions, range, beginning, intervalSafe, 0, _List_Nil);
	});
var $terezka$intervals$Intervals$floats = function (amount) {
	if (amount.$ === 'Exactly') {
		var number = amount.a;
		return A3($terezka$intervals$Intervals$values, true, true, number);
	} else {
		var number = amount.a;
		return A3($terezka$intervals$Intervals$values, true, false, number);
	}
};
var $terezka$elm_charts$Internal$Svg$floats = $terezka$elm_charts$Internal$Svg$Generator(
	F2(
		function (i, b) {
			return A2(
				$terezka$intervals$Intervals$floats,
				$terezka$intervals$Intervals$around(i),
				{max: b.max, min: b.min});
		}));
var $terezka$elm_charts$Chart$Svg$floats = $terezka$elm_charts$Internal$Svg$floats;
var $ryannhg$date_format$DateFormat$Language$Language = F6(
	function (toMonthName, toMonthAbbreviation, toWeekdayName, toWeekdayAbbreviation, toAmPm, toOrdinalSuffix) {
		return {toAmPm: toAmPm, toMonthAbbreviation: toMonthAbbreviation, toMonthName: toMonthName, toOrdinalSuffix: toOrdinalSuffix, toWeekdayAbbreviation: toWeekdayAbbreviation, toWeekdayName: toWeekdayName};
	});
var $ryannhg$date_format$DateFormat$Language$toEnglishAmPm = function (hour) {
	return (hour > 11) ? 'pm' : 'am';
};
var $ryannhg$date_format$DateFormat$Language$toEnglishMonthName = function (month) {
	switch (month.$) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var $ryannhg$date_format$DateFormat$Language$toEnglishSuffix = function (num) {
	var _v0 = A2($elm$core$Basics$modBy, 100, num);
	switch (_v0) {
		case 11:
			return 'th';
		case 12:
			return 'th';
		case 13:
			return 'th';
		default:
			var _v1 = A2($elm$core$Basics$modBy, 10, num);
			switch (_v1) {
				case 1:
					return 'st';
				case 2:
					return 'nd';
				case 3:
					return 'rd';
				default:
					return 'th';
			}
	}
};
var $ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName = function (weekday) {
	switch (weekday.$) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var $ryannhg$date_format$DateFormat$Language$english = A6(
	$ryannhg$date_format$DateFormat$Language$Language,
	$ryannhg$date_format$DateFormat$Language$toEnglishMonthName,
	A2(
		$elm$core$Basics$composeR,
		$ryannhg$date_format$DateFormat$Language$toEnglishMonthName,
		$elm$core$String$left(3)),
	$ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName,
	A2(
		$elm$core$Basics$composeR,
		$ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName,
		$elm$core$String$left(3)),
	$ryannhg$date_format$DateFormat$Language$toEnglishAmPm,
	$ryannhg$date_format$DateFormat$Language$toEnglishSuffix);
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.start, posixMinutes) < 0) {
					return posixMinutes + era.offset;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			24,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var $ryannhg$date_format$DateFormat$amPm = F3(
	function (language, zone, posix) {
		return language.toAmPm(
			A2($elm$time$Time$toHour, zone, posix));
	});
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		day: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		month: month,
		year: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).day;
	});
var $ryannhg$date_format$DateFormat$dayOfMonth = $elm$time$Time$toDay;
var $elm$time$Time$Sun = {$: 'Sun'};
var $elm$time$Time$Fri = {$: 'Fri'};
var $elm$time$Time$Mon = {$: 'Mon'};
var $elm$time$Time$Sat = {$: 'Sat'};
var $elm$time$Time$Thu = {$: 'Thu'};
var $elm$time$Time$Tue = {$: 'Tue'};
var $elm$time$Time$Wed = {$: 'Wed'};
var $ryannhg$date_format$DateFormat$days = _List_fromArray(
	[$elm$time$Time$Sun, $elm$time$Time$Mon, $elm$time$Time$Tue, $elm$time$Time$Wed, $elm$time$Time$Thu, $elm$time$Time$Fri, $elm$time$Time$Sat]);
var $elm$time$Time$toWeekday = F2(
	function (zone, time) {
		var _v0 = A2(
			$elm$core$Basics$modBy,
			7,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60 * 24));
		switch (_v0) {
			case 0:
				return $elm$time$Time$Thu;
			case 1:
				return $elm$time$Time$Fri;
			case 2:
				return $elm$time$Time$Sat;
			case 3:
				return $elm$time$Time$Sun;
			case 4:
				return $elm$time$Time$Mon;
			case 5:
				return $elm$time$Time$Tue;
			default:
				return $elm$time$Time$Wed;
		}
	});
var $ryannhg$date_format$DateFormat$dayOfWeek = F2(
	function (zone, posix) {
		return function (_v1) {
			var i = _v1.a;
			return i;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				_Utils_Tuple2(0, $elm$time$Time$Sun),
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (_v0) {
							var day = _v0.b;
							return _Utils_eq(
								day,
								A2($elm$time$Time$toWeekday, zone, posix));
						},
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, day) {
									return _Utils_Tuple2(i, day);
								}),
							$ryannhg$date_format$DateFormat$days)))));
	});
var $ryannhg$date_format$DateFormat$isLeapYear = function (year_) {
	return (!(!A2($elm$core$Basics$modBy, 4, year_))) ? false : ((!(!A2($elm$core$Basics$modBy, 100, year_))) ? true : ((!(!A2($elm$core$Basics$modBy, 400, year_))) ? false : true));
};
var $ryannhg$date_format$DateFormat$daysInMonth = F2(
	function (year_, month) {
		switch (month.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $ryannhg$date_format$DateFormat$isLeapYear(year_) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $elm$time$Time$Jan = {$: 'Jan'};
var $elm$time$Time$Apr = {$: 'Apr'};
var $elm$time$Time$Aug = {$: 'Aug'};
var $elm$time$Time$Dec = {$: 'Dec'};
var $elm$time$Time$Feb = {$: 'Feb'};
var $elm$time$Time$Jul = {$: 'Jul'};
var $elm$time$Time$Jun = {$: 'Jun'};
var $elm$time$Time$Mar = {$: 'Mar'};
var $elm$time$Time$May = {$: 'May'};
var $elm$time$Time$Nov = {$: 'Nov'};
var $elm$time$Time$Oct = {$: 'Oct'};
var $elm$time$Time$Sep = {$: 'Sep'};
var $ryannhg$date_format$DateFormat$months = _List_fromArray(
	[$elm$time$Time$Jan, $elm$time$Time$Feb, $elm$time$Time$Mar, $elm$time$Time$Apr, $elm$time$Time$May, $elm$time$Time$Jun, $elm$time$Time$Jul, $elm$time$Time$Aug, $elm$time$Time$Sep, $elm$time$Time$Oct, $elm$time$Time$Nov, $elm$time$Time$Dec]);
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).month;
		switch (_v0) {
			case 1:
				return $elm$time$Time$Jan;
			case 2:
				return $elm$time$Time$Feb;
			case 3:
				return $elm$time$Time$Mar;
			case 4:
				return $elm$time$Time$Apr;
			case 5:
				return $elm$time$Time$May;
			case 6:
				return $elm$time$Time$Jun;
			case 7:
				return $elm$time$Time$Jul;
			case 8:
				return $elm$time$Time$Aug;
			case 9:
				return $elm$time$Time$Sep;
			case 10:
				return $elm$time$Time$Oct;
			case 11:
				return $elm$time$Time$Nov;
			default:
				return $elm$time$Time$Dec;
		}
	});
var $ryannhg$date_format$DateFormat$monthPair = F2(
	function (zone, posix) {
		return A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2(0, $elm$time$Time$Jan),
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (_v0) {
						var i = _v0.a;
						var m = _v0.b;
						return _Utils_eq(
							m,
							A2($elm$time$Time$toMonth, zone, posix));
					},
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (a, b) {
								return _Utils_Tuple2(a, b);
							}),
						$ryannhg$date_format$DateFormat$months))));
	});
var $ryannhg$date_format$DateFormat$monthNumber_ = F2(
	function (zone, posix) {
		return 1 + function (_v0) {
			var i = _v0.a;
			var m = _v0.b;
			return i;
		}(
			A2($ryannhg$date_format$DateFormat$monthPair, zone, posix));
	});
var $elm$time$Time$toYear = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).year;
	});
var $ryannhg$date_format$DateFormat$dayOfYear = F2(
	function (zone, posix) {
		var monthsBeforeThisOne = A2(
			$elm$core$List$take,
			A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix) - 1,
			$ryannhg$date_format$DateFormat$months);
		var daysBeforeThisMonth = $elm$core$List$sum(
			A2(
				$elm$core$List$map,
				$ryannhg$date_format$DateFormat$daysInMonth(
					A2($elm$time$Time$toYear, zone, posix)),
				monthsBeforeThisOne));
		return daysBeforeThisMonth + A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix);
	});
var $ryannhg$date_format$DateFormat$quarter = F2(
	function (zone, posix) {
		return (A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix) / 4) | 0;
	});
var $ryannhg$date_format$DateFormat$toFixedLength = F2(
	function (totalChars, num) {
		var numStr = $elm$core$String$fromInt(num);
		var numZerosNeeded = totalChars - $elm$core$String$length(numStr);
		var zeros = A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				function (_v0) {
					return '0';
				},
				A2($elm$core$List$range, 1, numZerosNeeded)));
		return _Utils_ap(zeros, numStr);
	});
var $elm$time$Time$toMillis = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			1000,
			$elm$time$Time$posixToMillis(time));
	});
var $elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2($elm$time$Time$toAdjustedMinutes, zone, time));
	});
var $ryannhg$date_format$DateFormat$toNonMilitary = function (num) {
	return (!num) ? 12 : ((num <= 12) ? num : (num - 12));
};
var $elm$time$Time$toSecond = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				1000));
	});
var $elm$core$String$toUpper = _String_toUpper;
var $ryannhg$date_format$DateFormat$millisecondsPerYear = $elm$core$Basics$round((((1000 * 60) * 60) * 24) * 365.25);
var $ryannhg$date_format$DateFormat$firstDayOfYear = F2(
	function (zone, time) {
		return $elm$time$Time$millisToPosix(
			$ryannhg$date_format$DateFormat$millisecondsPerYear * A2($elm$time$Time$toYear, zone, time));
	});
var $ryannhg$date_format$DateFormat$weekOfYear = F2(
	function (zone, posix) {
		var firstDay = A2($ryannhg$date_format$DateFormat$firstDayOfYear, zone, posix);
		var firstDayOffset = A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, firstDay);
		var daysSoFar = A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix);
		return (((daysSoFar + firstDayOffset) / 7) | 0) + 1;
	});
var $ryannhg$date_format$DateFormat$year = F2(
	function (zone, time) {
		return $elm$core$String$fromInt(
			A2($elm$time$Time$toYear, zone, time));
	});
var $ryannhg$date_format$DateFormat$piece = F4(
	function (language, zone, posix, token) {
		switch (token.$) {
			case 'MonthNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthNameAbbreviated':
				return language.toMonthAbbreviation(
					A2($elm$time$Time$toMonth, zone, posix));
			case 'MonthNameFull':
				return language.toMonthName(
					A2($elm$time$Time$toMonth, zone, posix));
			case 'QuarterNumber':
				return $elm$core$String$fromInt(
					1 + A2($ryannhg$date_format$DateFormat$quarter, zone, posix));
			case 'QuarterSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					1 + A2($ryannhg$date_format$DateFormat$quarter, zone, posix));
			case 'DayOfMonthNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfMonthSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfMonthFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfYearNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfYearSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfYearFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					3,
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfWeekNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, posix));
			case 'DayOfWeekSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, posix));
			case 'DayOfWeekNameAbbreviated':
				return language.toWeekdayAbbreviation(
					A2($elm$time$Time$toWeekday, zone, posix));
			case 'DayOfWeekNameFull':
				return language.toWeekdayName(
					A2($elm$time$Time$toWeekday, zone, posix));
			case 'WeekOfYearNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 'WeekOfYearSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 'WeekOfYearFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 'YearNumberLastTwo':
				return A2(
					$elm$core$String$right,
					2,
					A2($ryannhg$date_format$DateFormat$year, zone, posix));
			case 'YearNumber':
				return A2($ryannhg$date_format$DateFormat$year, zone, posix);
			case 'AmPmUppercase':
				return $elm$core$String$toUpper(
					A3($ryannhg$date_format$DateFormat$amPm, language, zone, posix));
			case 'AmPmLowercase':
				return $elm$core$String$toLower(
					A3($ryannhg$date_format$DateFormat$amPm, language, zone, posix));
			case 'HourMilitaryNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toHour, zone, posix));
			case 'HourMilitaryFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toHour, zone, posix));
			case 'HourNumber':
				return $elm$core$String$fromInt(
					$ryannhg$date_format$DateFormat$toNonMilitary(
						A2($elm$time$Time$toHour, zone, posix)));
			case 'HourFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					$ryannhg$date_format$DateFormat$toNonMilitary(
						A2($elm$time$Time$toHour, zone, posix)));
			case 'HourMilitaryFromOneNumber':
				return $elm$core$String$fromInt(
					1 + A2($elm$time$Time$toHour, zone, posix));
			case 'HourMilitaryFromOneFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					1 + A2($elm$time$Time$toHour, zone, posix));
			case 'MinuteNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toMinute, zone, posix));
			case 'MinuteFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toMinute, zone, posix));
			case 'SecondNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toSecond, zone, posix));
			case 'SecondFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toSecond, zone, posix));
			case 'MillisecondNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toMillis, zone, posix));
			case 'MillisecondFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					3,
					A2($elm$time$Time$toMillis, zone, posix));
			default:
				var string = token.a;
				return string;
		}
	});
var $ryannhg$date_format$DateFormat$formatWithLanguage = F4(
	function (language, tokens, zone, time) {
		return A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				A3($ryannhg$date_format$DateFormat$piece, language, zone, time),
				tokens));
	});
var $ryannhg$date_format$DateFormat$format = $ryannhg$date_format$DateFormat$formatWithLanguage($ryannhg$date_format$DateFormat$Language$english);
var $ryannhg$date_format$DateFormat$HourMilitaryFixed = {$: 'HourMilitaryFixed'};
var $ryannhg$date_format$DateFormat$hourMilitaryFixed = $ryannhg$date_format$DateFormat$HourMilitaryFixed;
var $ryannhg$date_format$DateFormat$MinuteFixed = {$: 'MinuteFixed'};
var $ryannhg$date_format$DateFormat$minuteFixed = $ryannhg$date_format$DateFormat$MinuteFixed;
var $ryannhg$date_format$DateFormat$Text = function (a) {
	return {$: 'Text', a: a};
};
var $ryannhg$date_format$DateFormat$text = $ryannhg$date_format$DateFormat$Text;
var $terezka$elm_charts$Internal$Svg$formatClock = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$hourMilitaryFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$minuteFixed
		]));
var $ryannhg$date_format$DateFormat$MillisecondFixed = {$: 'MillisecondFixed'};
var $ryannhg$date_format$DateFormat$millisecondFixed = $ryannhg$date_format$DateFormat$MillisecondFixed;
var $ryannhg$date_format$DateFormat$SecondFixed = {$: 'SecondFixed'};
var $ryannhg$date_format$DateFormat$secondFixed = $ryannhg$date_format$DateFormat$SecondFixed;
var $terezka$elm_charts$Internal$Svg$formatClockMillis = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$hourMilitaryFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$minuteFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$secondFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$millisecondFixed
		]));
var $terezka$elm_charts$Internal$Svg$formatClockSecond = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$hourMilitaryFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$minuteFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$secondFixed
		]));
var $ryannhg$date_format$DateFormat$DayOfMonthNumber = {$: 'DayOfMonthNumber'};
var $ryannhg$date_format$DateFormat$dayOfMonthNumber = $ryannhg$date_format$DateFormat$DayOfMonthNumber;
var $ryannhg$date_format$DateFormat$MonthNumber = {$: 'MonthNumber'};
var $ryannhg$date_format$DateFormat$monthNumber = $ryannhg$date_format$DateFormat$MonthNumber;
var $terezka$elm_charts$Internal$Svg$formatDate = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$monthNumber,
			$ryannhg$date_format$DateFormat$text('/'),
			$ryannhg$date_format$DateFormat$dayOfMonthNumber
		]));
var $ryannhg$date_format$DateFormat$MonthNameAbbreviated = {$: 'MonthNameAbbreviated'};
var $ryannhg$date_format$DateFormat$monthNameAbbreviated = $ryannhg$date_format$DateFormat$MonthNameAbbreviated;
var $terezka$elm_charts$Internal$Svg$formatMonth = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[$ryannhg$date_format$DateFormat$monthNameAbbreviated]));
var $ryannhg$date_format$DateFormat$DayOfWeekNameFull = {$: 'DayOfWeekNameFull'};
var $ryannhg$date_format$DateFormat$dayOfWeekNameFull = $ryannhg$date_format$DateFormat$DayOfWeekNameFull;
var $terezka$elm_charts$Internal$Svg$formatWeekday = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[$ryannhg$date_format$DateFormat$dayOfWeekNameFull]));
var $ryannhg$date_format$DateFormat$YearNumber = {$: 'YearNumber'};
var $ryannhg$date_format$DateFormat$yearNumber = $ryannhg$date_format$DateFormat$YearNumber;
var $terezka$elm_charts$Internal$Svg$formatYear = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[$ryannhg$date_format$DateFormat$yearNumber]));
var $terezka$elm_charts$Internal$Svg$formatTime = F2(
	function (zone, time) {
		var _v0 = A2($elm$core$Maybe$withDefault, time.unit, time.change);
		switch (_v0.$) {
			case 'Millisecond':
				return A2($terezka$elm_charts$Internal$Svg$formatClockMillis, zone, time.timestamp);
			case 'Second':
				return A2($terezka$elm_charts$Internal$Svg$formatClockSecond, zone, time.timestamp);
			case 'Minute':
				return A2($terezka$elm_charts$Internal$Svg$formatClock, zone, time.timestamp);
			case 'Hour':
				return A2($terezka$elm_charts$Internal$Svg$formatClock, zone, time.timestamp);
			case 'Day':
				return (time.multiple === 7) ? A2($terezka$elm_charts$Internal$Svg$formatWeekday, zone, time.timestamp) : A2($terezka$elm_charts$Internal$Svg$formatDate, zone, time.timestamp);
			case 'Month':
				return A2($terezka$elm_charts$Internal$Svg$formatMonth, zone, time.timestamp);
			default:
				return A2($terezka$elm_charts$Internal$Svg$formatYear, zone, time.timestamp);
		}
	});
var $terezka$elm_charts$Chart$Svg$formatTime = $terezka$elm_charts$Internal$Svg$formatTime;
var $terezka$elm_charts$Internal$Svg$generate = F3(
	function (amount, _v0, limits) {
		var func = _v0.a;
		return A2(func, amount, limits);
	});
var $terezka$elm_charts$Chart$Svg$generate = $terezka$elm_charts$Internal$Svg$generate;
var $terezka$intervals$Intervals$ints = F2(
	function (amount, range) {
		return A2(
			$elm$core$List$map,
			$elm$core$Basics$round,
			function () {
				if (amount.$ === 'Exactly') {
					var number = amount.a;
					return A4($terezka$intervals$Intervals$values, false, true, number, range);
				} else {
					var number = amount.a;
					return A4($terezka$intervals$Intervals$values, false, false, number, range);
				}
			}());
	});
var $terezka$elm_charts$Internal$Svg$ints = $terezka$elm_charts$Internal$Svg$Generator(
	F2(
		function (i, b) {
			return A2(
				$terezka$intervals$Intervals$ints,
				$terezka$intervals$Intervals$around(i),
				{max: b.max, min: b.min});
		}));
var $terezka$elm_charts$Chart$Svg$ints = $terezka$elm_charts$Internal$Svg$ints;
var $terezka$intervals$Intervals$Day = {$: 'Day'};
var $terezka$intervals$Intervals$Hour = {$: 'Hour'};
var $terezka$intervals$Intervals$Millisecond = {$: 'Millisecond'};
var $terezka$intervals$Intervals$Minute = {$: 'Minute'};
var $terezka$intervals$Intervals$Month = {$: 'Month'};
var $terezka$intervals$Intervals$Second = {$: 'Second'};
var $terezka$intervals$Intervals$Year = {$: 'Year'};
var $justinmimbs$time_extra$Time$Extra$Day = {$: 'Day'};
var $justinmimbs$date$Date$Days = {$: 'Days'};
var $justinmimbs$time_extra$Time$Extra$Millisecond = {$: 'Millisecond'};
var $justinmimbs$time_extra$Time$Extra$Month = {$: 'Month'};
var $justinmimbs$date$Date$Months = {$: 'Months'};
var $justinmimbs$date$Date$RD = function (a) {
	return {$: 'RD', a: a};
};
var $justinmimbs$date$Date$isLeapYear = function (y) {
	return ((!A2($elm$core$Basics$modBy, 4, y)) && (!(!A2($elm$core$Basics$modBy, 100, y)))) || (!A2($elm$core$Basics$modBy, 400, y));
};
var $justinmimbs$date$Date$daysBeforeMonth = F2(
	function (y, m) {
		var leapDays = $justinmimbs$date$Date$isLeapYear(y) ? 1 : 0;
		switch (m.$) {
			case 'Jan':
				return 0;
			case 'Feb':
				return 31;
			case 'Mar':
				return 59 + leapDays;
			case 'Apr':
				return 90 + leapDays;
			case 'May':
				return 120 + leapDays;
			case 'Jun':
				return 151 + leapDays;
			case 'Jul':
				return 181 + leapDays;
			case 'Aug':
				return 212 + leapDays;
			case 'Sep':
				return 243 + leapDays;
			case 'Oct':
				return 273 + leapDays;
			case 'Nov':
				return 304 + leapDays;
			default:
				return 334 + leapDays;
		}
	});
var $justinmimbs$date$Date$floorDiv = F2(
	function (a, b) {
		return $elm$core$Basics$floor(a / b);
	});
var $justinmimbs$date$Date$daysBeforeYear = function (y1) {
	var y = y1 - 1;
	var leapYears = (A2($justinmimbs$date$Date$floorDiv, y, 4) - A2($justinmimbs$date$Date$floorDiv, y, 100)) + A2($justinmimbs$date$Date$floorDiv, y, 400);
	return (365 * y) + leapYears;
};
var $justinmimbs$date$Date$daysInMonth = F2(
	function (y, m) {
		switch (m.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $justinmimbs$date$Date$isLeapYear(y) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $justinmimbs$date$Date$monthToNumber = function (m) {
	switch (m.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $justinmimbs$date$Date$numberToMonth = function (mn) {
	var _v0 = A2($elm$core$Basics$max, 1, mn);
	switch (_v0) {
		case 1:
			return $elm$time$Time$Jan;
		case 2:
			return $elm$time$Time$Feb;
		case 3:
			return $elm$time$Time$Mar;
		case 4:
			return $elm$time$Time$Apr;
		case 5:
			return $elm$time$Time$May;
		case 6:
			return $elm$time$Time$Jun;
		case 7:
			return $elm$time$Time$Jul;
		case 8:
			return $elm$time$Time$Aug;
		case 9:
			return $elm$time$Time$Sep;
		case 10:
			return $elm$time$Time$Oct;
		case 11:
			return $elm$time$Time$Nov;
		default:
			return $elm$time$Time$Dec;
	}
};
var $justinmimbs$date$Date$toCalendarDateHelp = F3(
	function (y, m, d) {
		toCalendarDateHelp:
		while (true) {
			var monthDays = A2($justinmimbs$date$Date$daysInMonth, y, m);
			var mn = $justinmimbs$date$Date$monthToNumber(m);
			if ((mn < 12) && (_Utils_cmp(d, monthDays) > 0)) {
				var $temp$y = y,
					$temp$m = $justinmimbs$date$Date$numberToMonth(mn + 1),
					$temp$d = d - monthDays;
				y = $temp$y;
				m = $temp$m;
				d = $temp$d;
				continue toCalendarDateHelp;
			} else {
				return {day: d, month: m, year: y};
			}
		}
	});
var $justinmimbs$date$Date$divWithRemainder = F2(
	function (a, b) {
		return _Utils_Tuple2(
			A2($justinmimbs$date$Date$floorDiv, a, b),
			A2($elm$core$Basics$modBy, b, a));
	});
var $justinmimbs$date$Date$year = function (_v0) {
	var rd = _v0.a;
	var _v1 = A2($justinmimbs$date$Date$divWithRemainder, rd, 146097);
	var n400 = _v1.a;
	var r400 = _v1.b;
	var _v2 = A2($justinmimbs$date$Date$divWithRemainder, r400, 36524);
	var n100 = _v2.a;
	var r100 = _v2.b;
	var _v3 = A2($justinmimbs$date$Date$divWithRemainder, r100, 1461);
	var n4 = _v3.a;
	var r4 = _v3.b;
	var _v4 = A2($justinmimbs$date$Date$divWithRemainder, r4, 365);
	var n1 = _v4.a;
	var r1 = _v4.b;
	var n = (!r1) ? 0 : 1;
	return ((((n400 * 400) + (n100 * 100)) + (n4 * 4)) + n1) + n;
};
var $justinmimbs$date$Date$toOrdinalDate = function (_v0) {
	var rd = _v0.a;
	var y = $justinmimbs$date$Date$year(
		$justinmimbs$date$Date$RD(rd));
	return {
		ordinalDay: rd - $justinmimbs$date$Date$daysBeforeYear(y),
		year: y
	};
};
var $justinmimbs$date$Date$toCalendarDate = function (_v0) {
	var rd = _v0.a;
	var date = $justinmimbs$date$Date$toOrdinalDate(
		$justinmimbs$date$Date$RD(rd));
	return A3($justinmimbs$date$Date$toCalendarDateHelp, date.year, $elm$time$Time$Jan, date.ordinalDay);
};
var $justinmimbs$date$Date$add = F3(
	function (unit, n, _v0) {
		var rd = _v0.a;
		switch (unit.$) {
			case 'Years':
				return A3(
					$justinmimbs$date$Date$add,
					$justinmimbs$date$Date$Months,
					12 * n,
					$justinmimbs$date$Date$RD(rd));
			case 'Months':
				var date = $justinmimbs$date$Date$toCalendarDate(
					$justinmimbs$date$Date$RD(rd));
				var wholeMonths = ((12 * (date.year - 1)) + ($justinmimbs$date$Date$monthToNumber(date.month) - 1)) + n;
				var m = $justinmimbs$date$Date$numberToMonth(
					A2($elm$core$Basics$modBy, 12, wholeMonths) + 1);
				var y = A2($justinmimbs$date$Date$floorDiv, wholeMonths, 12) + 1;
				return $justinmimbs$date$Date$RD(
					($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + A2(
						$elm$core$Basics$min,
						date.day,
						A2($justinmimbs$date$Date$daysInMonth, y, m)));
			case 'Weeks':
				return $justinmimbs$date$Date$RD(rd + (7 * n));
			default:
				return $justinmimbs$date$Date$RD(rd + n);
		}
	});
var $justinmimbs$date$Date$fromCalendarDate = F3(
	function (y, m, d) {
		return $justinmimbs$date$Date$RD(
			($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + A3(
				$elm$core$Basics$clamp,
				1,
				A2($justinmimbs$date$Date$daysInMonth, y, m),
				d));
	});
var $justinmimbs$date$Date$fromPosix = F2(
	function (zone, posix) {
		return A3(
			$justinmimbs$date$Date$fromCalendarDate,
			A2($elm$time$Time$toYear, zone, posix),
			A2($elm$time$Time$toMonth, zone, posix),
			A2($elm$time$Time$toDay, zone, posix));
	});
var $justinmimbs$date$Date$toRataDie = function (_v0) {
	var rd = _v0.a;
	return rd;
};
var $justinmimbs$time_extra$Time$Extra$dateToMillis = function (date) {
	var daysSinceEpoch = $justinmimbs$date$Date$toRataDie(date) - 719163;
	return daysSinceEpoch * 86400000;
};
var $justinmimbs$time_extra$Time$Extra$timeFromClock = F4(
	function (hour, minute, second, millisecond) {
		return (((hour * 3600000) + (minute * 60000)) + (second * 1000)) + millisecond;
	});
var $justinmimbs$time_extra$Time$Extra$timeFromPosix = F2(
	function (zone, posix) {
		return A4(
			$justinmimbs$time_extra$Time$Extra$timeFromClock,
			A2($elm$time$Time$toHour, zone, posix),
			A2($elm$time$Time$toMinute, zone, posix),
			A2($elm$time$Time$toSecond, zone, posix),
			A2($elm$time$Time$toMillis, zone, posix));
	});
var $justinmimbs$time_extra$Time$Extra$toOffset = F2(
	function (zone, posix) {
		var millis = $elm$time$Time$posixToMillis(posix);
		var localMillis = $justinmimbs$time_extra$Time$Extra$dateToMillis(
			A2($justinmimbs$date$Date$fromPosix, zone, posix)) + A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix);
		return ((localMillis - millis) / 60000) | 0;
	});
var $justinmimbs$time_extra$Time$Extra$posixFromDateTime = F3(
	function (zone, date, time) {
		var millis = $justinmimbs$time_extra$Time$Extra$dateToMillis(date) + time;
		var offset0 = A2(
			$justinmimbs$time_extra$Time$Extra$toOffset,
			zone,
			$elm$time$Time$millisToPosix(millis));
		var posix1 = $elm$time$Time$millisToPosix(millis - (offset0 * 60000));
		var offset1 = A2($justinmimbs$time_extra$Time$Extra$toOffset, zone, posix1);
		if (_Utils_eq(offset0, offset1)) {
			return posix1;
		} else {
			var posix2 = $elm$time$Time$millisToPosix(millis - (offset1 * 60000));
			var offset2 = A2($justinmimbs$time_extra$Time$Extra$toOffset, zone, posix2);
			return _Utils_eq(offset1, offset2) ? posix2 : posix1;
		}
	});
var $justinmimbs$time_extra$Time$Extra$add = F4(
	function (interval, n, zone, posix) {
		add:
		while (true) {
			switch (interval.$) {
				case 'Millisecond':
					return $elm$time$Time$millisToPosix(
						$elm$time$Time$posixToMillis(posix) + n);
				case 'Second':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Millisecond,
						$temp$n = n * 1000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Minute':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Millisecond,
						$temp$n = n * 60000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Hour':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Millisecond,
						$temp$n = n * 3600000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Day':
					return A3(
						$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
						zone,
						A3(
							$justinmimbs$date$Date$add,
							$justinmimbs$date$Date$Days,
							n,
							A2($justinmimbs$date$Date$fromPosix, zone, posix)),
						A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix));
				case 'Month':
					return A3(
						$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
						zone,
						A3(
							$justinmimbs$date$Date$add,
							$justinmimbs$date$Date$Months,
							n,
							A2($justinmimbs$date$Date$fromPosix, zone, posix)),
						A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix));
				case 'Year':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Month,
						$temp$n = n * 12,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Quarter':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Month,
						$temp$n = n * 3,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Week':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Day,
						$temp$n = n * 7,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				default:
					var weekday = interval;
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Day,
						$temp$n = n * 7,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
			}
		}
	});
var $justinmimbs$time_extra$Time$Extra$Week = {$: 'Week'};
var $justinmimbs$date$Date$Day = {$: 'Day'};
var $justinmimbs$date$Date$Friday = {$: 'Friday'};
var $justinmimbs$date$Date$Monday = {$: 'Monday'};
var $justinmimbs$date$Date$Month = {$: 'Month'};
var $justinmimbs$date$Date$Quarter = {$: 'Quarter'};
var $justinmimbs$date$Date$Saturday = {$: 'Saturday'};
var $justinmimbs$date$Date$Sunday = {$: 'Sunday'};
var $justinmimbs$date$Date$Thursday = {$: 'Thursday'};
var $justinmimbs$date$Date$Tuesday = {$: 'Tuesday'};
var $justinmimbs$date$Date$Wednesday = {$: 'Wednesday'};
var $justinmimbs$date$Date$Week = {$: 'Week'};
var $justinmimbs$date$Date$Year = {$: 'Year'};
var $justinmimbs$date$Date$weekdayNumber = function (_v0) {
	var rd = _v0.a;
	var _v1 = A2($elm$core$Basics$modBy, 7, rd);
	if (!_v1) {
		return 7;
	} else {
		var n = _v1;
		return n;
	}
};
var $justinmimbs$date$Date$weekdayToNumber = function (wd) {
	switch (wd.$) {
		case 'Mon':
			return 1;
		case 'Tue':
			return 2;
		case 'Wed':
			return 3;
		case 'Thu':
			return 4;
		case 'Fri':
			return 5;
		case 'Sat':
			return 6;
		default:
			return 7;
	}
};
var $justinmimbs$date$Date$daysSincePreviousWeekday = F2(
	function (wd, date) {
		return A2(
			$elm$core$Basics$modBy,
			7,
			($justinmimbs$date$Date$weekdayNumber(date) + 7) - $justinmimbs$date$Date$weekdayToNumber(wd));
	});
var $justinmimbs$date$Date$firstOfMonth = F2(
	function (y, m) {
		return $justinmimbs$date$Date$RD(
			($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + 1);
	});
var $justinmimbs$date$Date$firstOfYear = function (y) {
	return $justinmimbs$date$Date$RD(
		$justinmimbs$date$Date$daysBeforeYear(y) + 1);
};
var $justinmimbs$date$Date$month = A2(
	$elm$core$Basics$composeR,
	$justinmimbs$date$Date$toCalendarDate,
	function ($) {
		return $.month;
	});
var $justinmimbs$date$Date$monthToQuarter = function (m) {
	return (($justinmimbs$date$Date$monthToNumber(m) + 2) / 3) | 0;
};
var $justinmimbs$date$Date$quarter = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$month, $justinmimbs$date$Date$monthToQuarter);
var $justinmimbs$date$Date$quarterToMonth = function (q) {
	return $justinmimbs$date$Date$numberToMonth((q * 3) - 2);
};
var $justinmimbs$date$Date$floor = F2(
	function (interval, date) {
		var rd = date.a;
		switch (interval.$) {
			case 'Year':
				return $justinmimbs$date$Date$firstOfYear(
					$justinmimbs$date$Date$year(date));
			case 'Quarter':
				return A2(
					$justinmimbs$date$Date$firstOfMonth,
					$justinmimbs$date$Date$year(date),
					$justinmimbs$date$Date$quarterToMonth(
						$justinmimbs$date$Date$quarter(date)));
			case 'Month':
				return A2(
					$justinmimbs$date$Date$firstOfMonth,
					$justinmimbs$date$Date$year(date),
					$justinmimbs$date$Date$month(date));
			case 'Week':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Mon, date));
			case 'Monday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Mon, date));
			case 'Tuesday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Tue, date));
			case 'Wednesday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Wed, date));
			case 'Thursday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Thu, date));
			case 'Friday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Fri, date));
			case 'Saturday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Sat, date));
			case 'Sunday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Sun, date));
			default:
				return date;
		}
	});
var $justinmimbs$time_extra$Time$Extra$floorDate = F3(
	function (dateInterval, zone, posix) {
		return A3(
			$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
			zone,
			A2(
				$justinmimbs$date$Date$floor,
				dateInterval,
				A2($justinmimbs$date$Date$fromPosix, zone, posix)),
			0);
	});
var $justinmimbs$time_extra$Time$Extra$floor = F3(
	function (interval, zone, posix) {
		switch (interval.$) {
			case 'Millisecond':
				return posix;
			case 'Second':
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						A2($elm$time$Time$toMinute, zone, posix),
						A2($elm$time$Time$toSecond, zone, posix),
						0));
			case 'Minute':
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						A2($elm$time$Time$toMinute, zone, posix),
						0,
						0));
			case 'Hour':
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						0,
						0,
						0));
			case 'Day':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Day, zone, posix);
			case 'Month':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Month, zone, posix);
			case 'Year':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Year, zone, posix);
			case 'Quarter':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Quarter, zone, posix);
			case 'Week':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Week, zone, posix);
			case 'Monday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Monday, zone, posix);
			case 'Tuesday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Tuesday, zone, posix);
			case 'Wednesday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Wednesday, zone, posix);
			case 'Thursday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Thursday, zone, posix);
			case 'Friday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Friday, zone, posix);
			case 'Saturday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Saturday, zone, posix);
			default:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Sunday, zone, posix);
		}
	});
var $justinmimbs$time_extra$Time$Extra$ceiling = F3(
	function (interval, zone, posix) {
		var floored = A3($justinmimbs$time_extra$Time$Extra$floor, interval, zone, posix);
		return _Utils_eq(floored, posix) ? posix : A4($justinmimbs$time_extra$Time$Extra$add, interval, 1, zone, floored);
	});
var $terezka$intervals$Intervals$Time$ceilingDay = F3(
	function (zone, mult, stamp) {
		return (mult === 7) ? A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Week, zone, stamp) : A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Day, zone, stamp);
	});
var $justinmimbs$time_extra$Time$Extra$Hour = {$: 'Hour'};
var $justinmimbs$time_extra$Time$Extra$partsToPosix = F2(
	function (zone, _v0) {
		var year = _v0.year;
		var month = _v0.month;
		var day = _v0.day;
		var hour = _v0.hour;
		var minute = _v0.minute;
		var second = _v0.second;
		var millisecond = _v0.millisecond;
		return A3(
			$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
			zone,
			A3($justinmimbs$date$Date$fromCalendarDate, year, month, day),
			A4(
				$justinmimbs$time_extra$Time$Extra$timeFromClock,
				A3($elm$core$Basics$clamp, 0, 23, hour),
				A3($elm$core$Basics$clamp, 0, 59, minute),
				A3($elm$core$Basics$clamp, 0, 59, second),
				A3($elm$core$Basics$clamp, 0, 999, millisecond)));
	});
var $justinmimbs$time_extra$Time$Extra$posixToParts = F2(
	function (zone, posix) {
		return {
			day: A2($elm$time$Time$toDay, zone, posix),
			hour: A2($elm$time$Time$toHour, zone, posix),
			millisecond: A2($elm$time$Time$toMillis, zone, posix),
			minute: A2($elm$time$Time$toMinute, zone, posix),
			month: A2($elm$time$Time$toMonth, zone, posix),
			second: A2($elm$time$Time$toSecond, zone, posix),
			year: A2($elm$time$Time$toYear, zone, posix)
		};
	});
var $terezka$intervals$Intervals$Time$ceilingHour = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Hour, zone, stamp));
		var rem = parts.hour % mult;
		var _new = A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts);
		return (!rem) ? _new : A4($justinmimbs$time_extra$Time$Extra$add, $justinmimbs$time_extra$Time$Extra$Hour, mult - rem, zone, _new);
	});
var $justinmimbs$time_extra$Time$Extra$Minute = {$: 'Minute'};
var $terezka$intervals$Intervals$Time$ceilingMinute = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Minute, zone, stamp));
		var rem = parts.minute % mult;
		var _new = A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts);
		return (!rem) ? _new : A4($justinmimbs$time_extra$Time$Extra$add, $justinmimbs$time_extra$Time$Extra$Minute, mult - rem, zone, _new);
	});
var $terezka$intervals$Intervals$Time$intAsMonth = function (_int) {
	switch (_int) {
		case 1:
			return $elm$time$Time$Jan;
		case 2:
			return $elm$time$Time$Feb;
		case 3:
			return $elm$time$Time$Mar;
		case 4:
			return $elm$time$Time$Apr;
		case 5:
			return $elm$time$Time$May;
		case 6:
			return $elm$time$Time$Jun;
		case 7:
			return $elm$time$Time$Jul;
		case 8:
			return $elm$time$Time$Aug;
		case 9:
			return $elm$time$Time$Sep;
		case 10:
			return $elm$time$Time$Oct;
		case 11:
			return $elm$time$Time$Nov;
		case 12:
			return $elm$time$Time$Dec;
		default:
			return $elm$time$Time$Dec;
	}
};
var $terezka$intervals$Intervals$Time$monthAsInt = function (month) {
	switch (month.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $terezka$intervals$Intervals$Time$ceilingMonth = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Month, zone, stamp));
		var monthInt = $terezka$intervals$Intervals$Time$monthAsInt(parts.month);
		var rem = (monthInt - 1) % mult;
		var newMonth = (!rem) ? monthInt : ((monthInt - rem) + mult);
		return A2(
			$justinmimbs$time_extra$Time$Extra$partsToPosix,
			zone,
			(newMonth > 12) ? _Utils_update(
				parts,
				{
					month: $terezka$intervals$Intervals$Time$intAsMonth(newMonth - 12),
					year: parts.year + 1
				}) : _Utils_update(
				parts,
				{
					month: $terezka$intervals$Intervals$Time$intAsMonth(newMonth)
				}));
	});
var $terezka$intervals$Intervals$Time$ceilingMs = F3(
	function (zone, mult, stamp) {
		var parts = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, stamp);
		var rem = parts.millisecond % mult;
		return (!rem) ? A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts) : A4($justinmimbs$time_extra$Time$Extra$add, $justinmimbs$time_extra$Time$Extra$Millisecond, mult - rem, zone, stamp);
	});
var $justinmimbs$time_extra$Time$Extra$Second = {$: 'Second'};
var $terezka$intervals$Intervals$Time$ceilingSecond = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Second, zone, stamp));
		var rem = parts.second % mult;
		var _new = A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts);
		return (!rem) ? _new : A4($justinmimbs$time_extra$Time$Extra$add, $justinmimbs$time_extra$Time$Extra$Second, mult - rem, zone, _new);
	});
var $justinmimbs$time_extra$Time$Extra$Year = {$: 'Year'};
var $terezka$intervals$Intervals$Time$ceilingYear = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Year, zone, stamp));
		var rem = parts.year % mult;
		var newYear = (!rem) ? parts.year : ((parts.year - rem) + mult);
		return A2(
			$justinmimbs$time_extra$Time$Extra$partsToPosix,
			zone,
			_Utils_update(
				parts,
				{year: newYear}));
	});
var $terezka$intervals$Intervals$Time$ceilingUnit = F3(
	function (zone, unit, mult) {
		switch (unit.$) {
			case 'Millisecond':
				return A2($terezka$intervals$Intervals$Time$ceilingMs, zone, mult);
			case 'Second':
				return A2($terezka$intervals$Intervals$Time$ceilingSecond, zone, mult);
			case 'Minute':
				return A2($terezka$intervals$Intervals$Time$ceilingMinute, zone, mult);
			case 'Hour':
				return A2($terezka$intervals$Intervals$Time$ceilingHour, zone, mult);
			case 'Day':
				return A2($terezka$intervals$Intervals$Time$ceilingDay, zone, mult);
			case 'Month':
				return A2($terezka$intervals$Intervals$Time$ceilingMonth, zone, mult);
			default:
				return A2($terezka$intervals$Intervals$Time$ceilingYear, zone, mult);
		}
	});
var $terezka$intervals$Intervals$Time$Day = {$: 'Day'};
var $terezka$intervals$Intervals$Time$Hour = {$: 'Hour'};
var $terezka$intervals$Intervals$Time$Millisecond = {$: 'Millisecond'};
var $terezka$intervals$Intervals$Time$Minute = {$: 'Minute'};
var $terezka$intervals$Intervals$Time$Month = {$: 'Month'};
var $terezka$intervals$Intervals$Time$Second = {$: 'Second'};
var $terezka$intervals$Intervals$Time$Year = {$: 'Year'};
var $terezka$intervals$Intervals$Time$getChange = F3(
	function (zone, a, b) {
		var bP = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b);
		var aP = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a);
		return (!_Utils_eq(aP.year, bP.year)) ? $terezka$intervals$Intervals$Time$Year : ((!_Utils_eq(aP.month, bP.month)) ? $terezka$intervals$Intervals$Time$Month : ((!_Utils_eq(aP.day, bP.day)) ? $terezka$intervals$Intervals$Time$Day : ((!_Utils_eq(aP.hour, bP.hour)) ? $terezka$intervals$Intervals$Time$Hour : ((!_Utils_eq(aP.minute, bP.minute)) ? $terezka$intervals$Intervals$Time$Minute : ((!_Utils_eq(aP.second, bP.second)) ? $terezka$intervals$Intervals$Time$Second : $terezka$intervals$Intervals$Time$Millisecond)))));
	});
var $danhandrea$elm_time_extra$Util$isLeapYear = function (year) {
	return (!A2($elm$core$Basics$modBy, 400, year)) || ((!(!A2($elm$core$Basics$modBy, 100, year))) && (!A2($elm$core$Basics$modBy, 4, year)));
};
var $danhandrea$elm_time_extra$Month$days = F2(
	function (year, month) {
		switch (month.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $danhandrea$elm_time_extra$Util$isLeapYear(year) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $danhandrea$elm_time_extra$TimeExtra$daysInMonth = $danhandrea$elm_time_extra$Month$days;
var $terezka$intervals$Intervals$Time$toMs = $elm$time$Time$posixToMillis;
var $terezka$intervals$Intervals$Time$getDiff = F3(
	function (zone, a, b) {
		var _v0 = (_Utils_cmp(
			$terezka$intervals$Intervals$Time$toMs(a),
			$terezka$intervals$Intervals$Time$toMs(b)) < 0) ? _Utils_Tuple2(
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a),
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b)) : _Utils_Tuple2(
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b),
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a));
		var aP = _v0.a;
		var bP = _v0.b;
		var dMsX = bP.millisecond - aP.millisecond;
		var dMs = (dMsX < 0) ? (1000 + dMsX) : dMsX;
		var dSecondX = (bP.second - aP.second) + ((dMsX < 0) ? (-1) : 0);
		var dMinuteX = (bP.minute - aP.minute) + ((dSecondX < 0) ? (-1) : 0);
		var dHourX = (bP.hour - aP.hour) + ((dMinuteX < 0) ? (-1) : 0);
		var dDayX = (bP.day - aP.day) + ((dHourX < 0) ? (-1) : 0);
		var dDay = (dDayX < 0) ? (A2($danhandrea$elm_time_extra$TimeExtra$daysInMonth, bP.year, bP.month) + dDayX) : dDayX;
		var dMonthX = ($terezka$intervals$Intervals$Time$monthAsInt(bP.month) - $terezka$intervals$Intervals$Time$monthAsInt(aP.month)) + ((dDayX < 0) ? (-1) : 0);
		var dMonth = (dMonthX < 0) ? (12 + dMonthX) : dMonthX;
		var dHour = (dHourX < 0) ? (24 + dHourX) : dHourX;
		var dMinute = (dMinuteX < 0) ? (60 + dMinuteX) : dMinuteX;
		var dSecond = (dSecondX < 0) ? (60 + dSecondX) : dSecondX;
		var dYearX = (bP.year - aP.year) + ((dMonthX < 0) ? (-1) : 0);
		var dYear = (dYearX < 0) ? ($terezka$intervals$Intervals$Time$monthAsInt(bP.month) + dYearX) : dYearX;
		return {day: dDay, hour: dHour, millisecond: dMs, minute: dMinute, month: dMonth, second: dSecond, year: dYear};
	});
var $terezka$intervals$Intervals$Time$oneSecond = 1000;
var $terezka$intervals$Intervals$Time$oneMinute = $terezka$intervals$Intervals$Time$oneSecond * 60;
var $terezka$intervals$Intervals$Time$oneHour = $terezka$intervals$Intervals$Time$oneMinute * 60;
var $terezka$intervals$Intervals$Time$oneDay = $terezka$intervals$Intervals$Time$oneHour * 24;
var $terezka$intervals$Intervals$Time$oneMs = 1;
var $terezka$intervals$Intervals$Time$getNumOfTicks = F5(
	function (zone, unit, mult, a, b) {
		var div = F2(
			function (n1, n2) {
				return $elm$core$Basics$floor(n1 / n2);
			});
		var timeDiff = function (ms) {
			var ceiled = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, a);
			return (_Utils_cmp(
				$terezka$intervals$Intervals$Time$toMs(ceiled),
				$terezka$intervals$Intervals$Time$toMs(b)) > 0) ? (-1) : A2(
				div,
				A2(
					div,
					$terezka$intervals$Intervals$Time$toMs(b) - $terezka$intervals$Intervals$Time$toMs(ceiled),
					ms),
				mult);
		};
		var diff = function (property) {
			var ceiled = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, a);
			return (_Utils_cmp(
				$terezka$intervals$Intervals$Time$toMs(ceiled),
				$terezka$intervals$Intervals$Time$toMs(b)) > 0) ? (-1) : A2(
				div,
				property(
					A3($terezka$intervals$Intervals$Time$getDiff, zone, ceiled, b)),
				mult);
		};
		switch (unit.$) {
			case 'Millisecond':
				return timeDiff($terezka$intervals$Intervals$Time$oneMs) + 1;
			case 'Second':
				return timeDiff($terezka$intervals$Intervals$Time$oneSecond) + 1;
			case 'Minute':
				return timeDiff($terezka$intervals$Intervals$Time$oneMinute) + 1;
			case 'Hour':
				return timeDiff($terezka$intervals$Intervals$Time$oneHour) + 1;
			case 'Day':
				return timeDiff($terezka$intervals$Intervals$Time$oneDay) + 1;
			case 'Month':
				return diff(
					function (d) {
						return d.month + (d.year * 12);
					}) + 1;
			default:
				return diff(
					function ($) {
						return $.year;
					}) + 1;
		}
	});
var $terezka$intervals$Intervals$Time$largerUnit = function (unit) {
	switch (unit.$) {
		case 'Millisecond':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Second);
		case 'Second':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Minute);
		case 'Minute':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Hour);
		case 'Hour':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Day);
		case 'Day':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Month);
		case 'Month':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Year);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $terezka$intervals$Intervals$Time$niceMultiples = function (unit) {
	switch (unit.$) {
		case 'Millisecond':
			return _List_fromArray(
				[1, 2, 5, 10, 20, 25, 50, 100, 200, 500]);
		case 'Second':
			return _List_fromArray(
				[1, 2, 5, 10, 15, 30]);
		case 'Minute':
			return _List_fromArray(
				[1, 2, 5, 10, 15, 30]);
		case 'Hour':
			return _List_fromArray(
				[1, 2, 3, 4, 6, 8, 12]);
		case 'Day':
			return _List_fromArray(
				[1, 2, 3, 7, 14]);
		case 'Month':
			return _List_fromArray(
				[1, 2, 3, 4, 6]);
		default:
			return _List_fromArray(
				[1, 2, 5, 10, 20, 25, 50, 100, 200, 500, 1000, 10000, 1000000, 10000000]);
	}
};
var $terezka$intervals$Intervals$Time$toBestUnit = F4(
	function (zone, amount, min, max) {
		var toNice = function (unit) {
			toNice:
			while (true) {
				var niceNums = $terezka$intervals$Intervals$Time$niceMultiples(unit);
				var maybeNiceNum = A2(
					$elm$core$List$filter,
					function (n) {
						return _Utils_cmp(
							A5($terezka$intervals$Intervals$Time$getNumOfTicks, zone, unit, n, min, max),
							amount) < 1;
					},
					niceNums);
				var div = F2(
					function (n1, n2) {
						return $elm$core$Basics$ceiling(n1 / n2);
					});
				var _v0 = $elm$core$List$head(maybeNiceNum);
				if (_v0.$ === 'Just') {
					var niceNum = _v0.a;
					return _Utils_Tuple2(unit, niceNum);
				} else {
					var _v1 = $terezka$intervals$Intervals$Time$largerUnit(unit);
					if (_v1.$ === 'Just') {
						var larger = _v1.a;
						var $temp$unit = larger;
						unit = $temp$unit;
						continue toNice;
					} else {
						return _Utils_Tuple2($terezka$intervals$Intervals$Time$Year, 100000000);
					}
				}
			}
		};
		return toNice($terezka$intervals$Intervals$Time$Millisecond);
	});
var $terezka$intervals$Intervals$Time$toExtraUnit = function (unit) {
	switch (unit.$) {
		case 'Millisecond':
			return $justinmimbs$time_extra$Time$Extra$Millisecond;
		case 'Second':
			return $justinmimbs$time_extra$Time$Extra$Second;
		case 'Minute':
			return $justinmimbs$time_extra$Time$Extra$Minute;
		case 'Hour':
			return $justinmimbs$time_extra$Time$Extra$Hour;
		case 'Day':
			return $justinmimbs$time_extra$Time$Extra$Day;
		case 'Month':
			return $justinmimbs$time_extra$Time$Extra$Month;
		default:
			return $justinmimbs$time_extra$Time$Extra$Year;
	}
};
var $terezka$intervals$Intervals$Time$unitToInt = function (unit) {
	switch (unit.$) {
		case 'Millisecond':
			return 0;
		case 'Second':
			return 1;
		case 'Minute':
			return 2;
		case 'Hour':
			return 3;
		case 'Day':
			return 4;
		case 'Month':
			return 5;
		default:
			return 6;
	}
};
var $terezka$intervals$Intervals$Time$values = F4(
	function (zone, maxMmount, min, max) {
		var _v0 = A4($terezka$intervals$Intervals$Time$toBestUnit, zone, maxMmount, min, max);
		var unit = _v0.a;
		var mult = _v0.b;
		var amount = A5($terezka$intervals$Intervals$Time$getNumOfTicks, zone, unit, mult, min, max);
		var initial = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, min);
		var tUnit = $terezka$intervals$Intervals$Time$toExtraUnit(unit);
		var toTick = F3(
			function (x, timestamp, change) {
				return {
					change: (_Utils_cmp(
						$terezka$intervals$Intervals$Time$unitToInt(change),
						$terezka$intervals$Intervals$Time$unitToInt(unit)) > 0) ? $elm$core$Maybe$Just(change) : $elm$core$Maybe$Nothing,
					isFirst: !x,
					multiple: mult,
					timestamp: timestamp,
					unit: unit,
					zone: zone
				};
			});
		var toTicks = F2(
			function (xs, acc) {
				toTicks:
				while (true) {
					if (xs.b) {
						var x = xs.a;
						var rest = xs.b;
						var prev = A4($justinmimbs$time_extra$Time$Extra$add, tUnit, (x - 1) * mult, zone, initial);
						var curr = A4($justinmimbs$time_extra$Time$Extra$add, tUnit, x * mult, zone, initial);
						var change = A3($terezka$intervals$Intervals$Time$getChange, zone, prev, curr);
						var $temp$xs = rest,
							$temp$acc = A2(
							$elm$core$List$cons,
							A3(toTick, x, curr, change),
							acc);
						xs = $temp$xs;
						acc = $temp$acc;
						continue toTicks;
					} else {
						return acc;
					}
				}
			});
		return $elm$core$List$reverse(
			A2(
				toTicks,
				A2($elm$core$List$range, 0, amount - 1),
				_List_Nil));
	});
var $terezka$intervals$Intervals$times = F3(
	function (zone, amount, range) {
		var toUnit = function (unit) {
			switch (unit.$) {
				case 'Millisecond':
					return $terezka$intervals$Intervals$Millisecond;
				case 'Second':
					return $terezka$intervals$Intervals$Second;
				case 'Minute':
					return $terezka$intervals$Intervals$Minute;
				case 'Hour':
					return $terezka$intervals$Intervals$Hour;
				case 'Day':
					return $terezka$intervals$Intervals$Day;
				case 'Month':
					return $terezka$intervals$Intervals$Month;
				default:
					return $terezka$intervals$Intervals$Year;
			}
		};
		var translateUnit = function (time) {
			return {
				change: A2($elm$core$Maybe$map, toUnit, time.change),
				isFirst: time.isFirst,
				multiple: time.multiple,
				timestamp: time.timestamp,
				unit: toUnit(time.unit),
				zone: time.zone
			};
		};
		var fromMs = function (ts) {
			return $elm$time$Time$millisToPosix(
				$elm$core$Basics$round(ts));
		};
		return A2(
			$elm$core$List$map,
			translateUnit,
			A4(
				$terezka$intervals$Intervals$Time$values,
				zone,
				amount,
				fromMs(range.min),
				fromMs(range.max)));
	});
var $terezka$elm_charts$Internal$Svg$times = function (zone) {
	return $terezka$elm_charts$Internal$Svg$Generator(
		F2(
			function (i, b) {
				return A3(
					$terezka$intervals$Intervals$times,
					zone,
					i,
					{max: b.max, min: b.min});
			}));
};
var $terezka$elm_charts$Chart$Svg$times = $terezka$elm_charts$Internal$Svg$times;
var $terezka$elm_charts$Chart$generateValues = F4(
	function (amount, tick, maybeFormat, axis) {
		var toTickValues = F2(
			function (toValue, toString) {
				return $elm$core$List$map(
					function (i) {
						return {
							label: function () {
								if (maybeFormat.$ === 'Just') {
									var formatter = maybeFormat.a;
									return formatter(
										toValue(i));
								} else {
									return toString(i);
								}
							}(),
							value: toValue(i)
						};
					});
			});
		switch (tick.$) {
			case 'Floats':
				return A3(
					toTickValues,
					$elm$core$Basics$identity,
					$elm$core$String$fromFloat,
					A3($terezka$elm_charts$Chart$Svg$generate, amount, $terezka$elm_charts$Chart$Svg$floats, axis));
			case 'Ints':
				return A3(
					toTickValues,
					$elm$core$Basics$toFloat,
					$elm$core$String$fromInt,
					A3($terezka$elm_charts$Chart$Svg$generate, amount, $terezka$elm_charts$Chart$Svg$ints, axis));
			default:
				var zone = tick.a;
				return A3(
					toTickValues,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Basics$toFloat, $elm$time$Time$posixToMillis),
						function ($) {
							return $.timestamp;
						}),
					$terezka$elm_charts$Chart$Svg$formatTime(zone),
					A3(
						$terezka$elm_charts$Chart$Svg$generate,
						amount,
						$terezka$elm_charts$Chart$Svg$times(zone),
						axis));
		}
	});
var $terezka$elm_charts$Chart$Attributes$zero = function (b) {
	return A3($elm$core$Basics$clamp, b.min, b.max, 0);
};
var $terezka$elm_charts$Chart$yLabels = function (edits) {
	var toTicks = F2(
		function (p, config) {
			return A4(
				$terezka$elm_charts$Chart$generateValues,
				config.amount,
				config.generate,
				config.format,
				A3(
					$elm$core$List$foldl,
					F2(
						function (f, y) {
							return f(y);
						}),
					p.y,
					config.limits));
		});
	var toTickValues = F3(
		function (p, config, ts) {
			return (!config.grid) ? ts : _Utils_update(
				ts,
				{
					ys: _Utils_ap(
						ts.ys,
						A2(
							$elm$core$List$map,
							function ($) {
								return $.value;
							},
							A2(toTicks, p, config)))
				});
		});
	var toConfig = function (p) {
		return A2(
			$terezka$elm_charts$Internal$Helpers$apply,
			edits,
			{amount: 5, anchor: $elm$core$Maybe$Nothing, attrs: _List_Nil, color: '#808BAB', ellipsis: $elm$core$Maybe$Nothing, flip: false, fontSize: $elm$core$Maybe$Nothing, format: $elm$core$Maybe$Nothing, generate: $terezka$elm_charts$Internal$Svg$Floats, grid: false, hideOverflow: false, limits: _List_Nil, pinned: $terezka$elm_charts$Chart$Attributes$zero, rotate: 0, uppercase: false, xOff: -10, yOff: 3});
	};
	return A3(
		$terezka$elm_charts$Chart$LabelsElement,
		toConfig,
		toTickValues,
		F2(
			function (p, config) {
				var _default = $terezka$elm_charts$Internal$Svg$defaultLabel;
				var toLabel = function (item) {
					return A4(
						$terezka$elm_charts$Internal$Svg$label,
						p,
						_Utils_update(
							_default,
							{
								anchor: function () {
									var _v0 = config.anchor;
									if (_v0.$ === 'Nothing') {
										return $elm$core$Maybe$Just(
											config.flip ? $terezka$elm_charts$Internal$Svg$Start : $terezka$elm_charts$Internal$Svg$End);
									} else {
										var anchor = _v0.a;
										return $elm$core$Maybe$Just(anchor);
									}
								}(),
								attrs: config.attrs,
								color: config.color,
								ellipsis: config.ellipsis,
								fontSize: config.fontSize,
								hideOverflow: config.hideOverflow,
								rotate: config.rotate,
								uppercase: config.uppercase,
								xOff: config.flip ? (-config.xOff) : config.xOff,
								yOff: config.yOff
							}),
						_List_fromArray(
							[
								$elm$svg$Svg$text(item.label)
							]),
						{
							x: config.pinned(p.x),
							y: item.value
						});
				};
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__y-labels')
						]),
					A2(
						$elm$core$List$map,
						toLabel,
						A2(toTicks, p, config)));
			}));
};
var $author$project$Views$Textile$Comparator$chart = F2(
	function (_v0, entries) {
		var funit = _v0.funit;
		var impact = _v0.impact;
		var daysOfWear = _v0.daysOfWear;
		var size = _v0.size;
		var margins = _v0.margins;
		var yLabels = _List_fromArray(
			[
				$terezka$elm_charts$Chart$yLabels(
				_List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$withGrid,
						$terezka$elm_charts$Chart$Attributes$fontSize(11),
						$terezka$elm_charts$Chart$Attributes$color($author$project$Views$Textile$Comparator$chartTextColor),
						$terezka$elm_charts$Chart$Attributes$format(
						A2(
							$elm$core$Basics$composeR,
							A3($author$project$Views$Textile$Comparator$formatLabel, funit, impact, daysOfWear),
							function ($) {
								return $.y;
							}))
					]))
			]);
		var xLabels = _List_fromArray(
			[
				A2(
				$terezka$elm_charts$Chart$binLabels,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.score;
					},
					A2(
						$elm$core$Basics$composeR,
						A3($author$project$Views$Textile$Comparator$formatLabel, funit, impact, daysOfWear),
						function ($) {
							return $.x;
						})),
				_List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$moveDown(23),
						$terezka$elm_charts$Chart$Attributes$color($author$project$Views$Textile$Comparator$chartTextColor),
						$terezka$elm_charts$Chart$Attributes$rotate(12),
						$terezka$elm_charts$Chart$Attributes$attrs(
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$fontSize('12')
							]))
					]))
			]);
		var verticalLabels = $author$project$Views$Textile$Comparator$fillLabels(entries);
		var legends = _List_fromArray(
			[
				A4(
				$terezka$elm_charts$Chart$legendsAt,
				function ($) {
					return $.min;
				},
				function ($) {
					return $.max;
				},
				_List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$alignMiddle,
						$terezka$elm_charts$Chart$Attributes$htmlAttrs(
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('ComparatorChartLegends')
							])),
						$terezka$elm_charts$Chart$Attributes$moveDown(20)
					]),
				_List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$spacing(3),
						$terezka$elm_charts$Chart$Attributes$fontSize(12),
						$terezka$elm_charts$Chart$Attributes$htmlAttrs(
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('ComparatorChartLegend')
							]))
					]))
			]);
		var knitted = A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.knitted;
				},
				$elm$core$List$head(entries)));
		var barStyleVariation = F2(
			function (_v2, _v3) {
				var highlight = _v3.highlight;
				return (!highlight) ? _List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$opacity(0.35)
					]) : _List_Nil;
			});
		var bars = _List_fromArray(
			[
				A3(
				$terezka$elm_charts$Chart$bars,
				_List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$margin(0.28)
					]),
				_List_fromArray(
					[
						$terezka$elm_charts$Chart$stacked(
						A2(
							$elm$core$List$map,
							function (_v1) {
								var getter = _v1.a;
								var label = _v1.b;
								return A2(
									$terezka$elm_charts$Chart$variation,
									barStyleVariation,
									A2(
										$terezka$elm_charts$Chart$named,
										label,
										A2($terezka$elm_charts$Chart$bar, getter, _List_Nil)));
							},
							$author$project$Views$Dataviz$stepsLegendData(
								{knitted: knitted})))
					]),
				entries)
			]);
		return A2(
			$terezka$elm_charts$Chart$chart,
			_List_fromArray(
				[
					$terezka$elm_charts$Chart$Attributes$width(
					A2(
						$elm$core$Maybe$withDefault,
						550,
						A2($elm$core$Maybe$map, $elm$core$Tuple$first, size))),
					$terezka$elm_charts$Chart$Attributes$height(
					A2(
						$elm$core$Maybe$withDefault,
						250,
						A2($elm$core$Maybe$map, $elm$core$Tuple$second, size))),
					$terezka$elm_charts$Chart$Attributes$margin(
					A2(
						$elm$core$Maybe$withDefault,
						{bottom: 10, left: 40, right: 0, top: 22},
						margins)),
					$terezka$elm_charts$Chart$Attributes$htmlAttrs(
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('ComparatorChart')
						]))
				]),
			$elm$core$List$concat(
				_List_fromArray(
					[xLabels, yLabels, bars, legends, verticalLabels])));
	});
var $author$project$Data$Textile$Product$isKnitted = function (_v0) {
	var fabric = _v0.fabric;
	if (fabric.$ === 'Knitted') {
		return true;
	} else {
		return false;
	}
};
var $author$project$Views$Textile$Comparator$createEntry = F5(
	function (db, funit, _v0, _v1, query) {
		var trigram = _v0.trigram;
		var highlight = _v1.highlight;
		var label = _v1.label;
		return A2(
			$elm$core$Result$map,
			function (simulator) {
				var lifeCycle = simulator.lifeCycle;
				var inputs = simulator.inputs;
				var daysOfWear = simulator.daysOfWear;
				var transport = simulator.transport;
				var stepScore = function (stepLabel) {
					return $author$project$Data$Unit$impactToFloat(
						A3(
							$author$project$Data$Unit$inFunctionalUnit,
							funit,
							daysOfWear,
							A4(
								$author$project$Data$Textile$LifeCycle$getStepProp,
								stepLabel,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.impacts;
									},
									$author$project$Data$Impact$getImpact(trigram)),
								$ianmackenzie$elm_units$Quantity$zero,
								lifeCycle)));
				};
				return {
					dyeing: stepScore($author$project$Data$Textile$Step$Label$Dyeing),
					endOfLife: stepScore($author$project$Data$Textile$Step$Label$EndOfLife),
					highlight: highlight,
					knitted: $author$project$Data$Textile$Product$isKnitted(inputs.product),
					label: label,
					making: stepScore($author$project$Data$Textile$Step$Label$Making),
					material: stepScore($author$project$Data$Textile$Step$Label$Material),
					score: A4($author$project$Data$Impact$grabImpactFloat, funit, daysOfWear, trigram, simulator),
					spinning: stepScore($author$project$Data$Textile$Step$Label$Spinning),
					transport: A4($author$project$Data$Impact$grabImpactFloat, funit, daysOfWear, trigram, transport),
					use: stepScore($author$project$Data$Textile$Step$Label$Use),
					weavingKnitting: stepScore($author$project$Data$Textile$Step$Label$Fabric)
				};
			},
			A2($author$project$Data$Textile$Simulator$compute, db, query));
	});
var $author$project$Views$Textile$Comparator$fromUserQuery = function (query) {
	return _Utils_update(
		query,
		{
			airTransportRatio: $elm$core$Maybe$Nothing,
			disabledFading: $elm$core$Maybe$Nothing,
			disabledSteps: _List_Nil,
			dyeingWeighting: $elm$core$Maybe$Nothing,
			makingWaste: $elm$core$Maybe$Nothing,
			picking: $elm$core$Maybe$Nothing,
			quality: $elm$core$Maybe$Just($author$project$Data$Unit$standardQuality),
			reparability: $elm$core$Maybe$Just($author$project$Data$Unit$standardReparability),
			surfaceMass: $elm$core$Maybe$Nothing
		});
};
var $author$project$Views$Textile$Comparator$toCountry = F2(
	function (code, query) {
		return _Utils_update(
			query,
			{countryDyeing: code, countryFabric: code, countryMaking: code});
	});
var $author$project$Views$Textile$Comparator$getEntries = F4(
	function (db, funit, impact, inputs) {
		var query = $author$project$Data$Textile$Inputs$toQuery(inputs);
		var currentName = 'Votre simulation, Q=' + ($elm$core$String$fromFloat(
			$author$project$Data$Unit$qualityToFloat(
				A2($elm$core$Maybe$withDefault, $author$project$Data$Unit$standardQuality, query.quality))) + (', R=' + $elm$core$String$fromFloat(
			$author$project$Data$Unit$reparabilityToFloat(
				A2($elm$core$Maybe$withDefault, $author$project$Data$Unit$standardReparability, query.reparability)))));
		var createEntry_ = A3($author$project$Views$Textile$Comparator$createEntry, db, funit, impact);
		var entries = _List_fromArray(
			[
				A2(
				createEntry_,
				{highlight: true, label: currentName},
				query),
				A2(
				createEntry_,
				{highlight: false, label: 'France, Q=1'},
				A2(
					$author$project$Views$Textile$Comparator$toCountry,
					$author$project$Data$Country$Code('FR'),
					$author$project$Views$Textile$Comparator$fromUserQuery(query))),
				A2(
				createEntry_,
				{highlight: false, label: 'Portugal, Q=1'},
				A2(
					$author$project$Views$Textile$Comparator$toCountry,
					$author$project$Data$Country$Code('PT'),
					$author$project$Views$Textile$Comparator$fromUserQuery(query))),
				A2(
				createEntry_,
				{highlight: false, label: 'Inde, Q=1'},
				A2(
					$author$project$Views$Textile$Comparator$toCountry,
					$author$project$Data$Country$Code('IN'),
					$author$project$Views$Textile$Comparator$fromUserQuery(query)))
			]);
		return A2(
			$elm$core$Result$map,
			$elm$core$List$sortBy(
				function ($) {
					return $.score;
				}),
			$elm_community$result_extra$Result$Extra$combine(entries));
	});
var $author$project$Views$Textile$Comparator$view = function (_v0) {
	var session = _v0.session;
	var impact = _v0.impact;
	var funit = _v0.funit;
	var simulator = _v0.simulator;
	var _v1 = A4($author$project$Views$Textile$Comparator$getEntries, session.db, funit, impact, simulator.inputs);
	if (_v1.$ === 'Ok') {
		var entries = _v1.a;
		return A2(
			$author$project$Views$Textile$Comparator$chart,
			{daysOfWear: simulator.daysOfWear, funit: funit, impact: impact, margins: $elm$core$Maybe$Nothing, size: $elm$core$Maybe$Nothing},
			entries);
	} else {
		var error = _v1.a;
		return $author$project$Views$Alert$simple(
			{
				close: $elm$core$Maybe$Nothing,
				content: _List_fromArray(
					[
						$elm$html$Html$text(error)
					]),
				level: $author$project$Views$Alert$Danger,
				title: $elm$core$Maybe$Just('Erreur')
			});
	}
};
var $author$project$Views$Textile$Summary$summaryChartsView = F2(
	function (_v0, simulator) {
		var session = _v0.session;
		var impact = _v0.impact;
		var funit = _v0.funit;
		var reusable = _v0.reusable;
		var inputs = simulator.inputs;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('card shadow-sm')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$details,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('card-body p-2 border-bottom')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$summary,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('text-muted fs-7')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Détails des postes')
								])),
							$author$project$Views$Textile$BarChart$view(
							{funit: funit, impact: impact, simulator: simulator})
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('d-none d-sm-block card-body'),
							$elm$html$Html$Attributes$title(
							$author$project$Data$Textile$Inputs$toString(simulator.inputs))
						]),
					_List_fromArray(
						[
							$author$project$Views$Textile$Comparator$view(
							{funit: funit, impact: impact, session: session, simulator: simulator})
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('d-none d-sm-block card-body text-center text-muted fs-7 px-2 py-2')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_Nil,
							A2(
								$elm$core$List$intersperse,
								$elm$html$Html$text(' '),
								_List_fromArray(
									[
										$elm$html$Html$text('Comparaison pour'),
										$elm$html$Html$text(simulator.inputs.product.name + ', '),
										$author$project$Views$Textile$Summary$viewMaterials(simulator.inputs.materials),
										$elm$html$Html$text('de'),
										$author$project$Views$Format$kg(simulator.inputs.mass),
										A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('text-nowrap')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(
												$author$project$Data$Unit$functionalToString(funit)),
												A2(
												$author$project$Views$Link$smallPillExternal,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('ms-0'),
														$elm$html$Html$Attributes$title('Accéder à la documentation'),
														$elm$html$Html$Attributes$href($author$project$Data$Env$gitbookUrl + '/methodologie/echelle-comparative')
													]),
												_List_fromArray(
													[$author$project$Views$Icon$info]))
											]))
									])))
						])),
					reusable ? A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('card-footer text-center')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$a,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('btn btn-primary'),
									$author$project$Route$href(
									A4(
										$author$project$Route$TextileSimulator,
										$author$project$Data$Impact$defaultTrigram,
										$author$project$Data$Unit$PerItem,
										$author$project$Page$Textile$Simulator$ViewMode$Simple,
										$elm$core$Maybe$Just(
											$author$project$Data$Textile$Inputs$toQuery(inputs))))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Reprendre cette simulation')
								]))
						])) : $elm$html$Html$text('')
				]));
	});
var $author$project$Views$Textile$Summary$view = F2(
	function (config, result) {
		if (result.$ === 'Ok') {
			var simulator = result.a;
			return A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('stacked-card')
					]),
				_List_fromArray(
					[
						A2($author$project$Views$Textile$Summary$mainSummaryView, config, simulator),
						A2($author$project$Views$Textile$Summary$summaryChartsView, config, simulator)
					]));
		} else {
			var error = result.a;
			return $author$project$Views$Alert$simple(
				{
					close: $elm$core$Maybe$Nothing,
					content: _List_fromArray(
						[
							$elm$html$Html$text(error)
						]),
					level: $author$project$Views$Alert$Info,
					title: $elm$core$Maybe$Just('Impossible de charger l\'exemple')
				});
		}
	});
var $author$project$Page$Home$viewHero = function (session) {
	return A2(
		$author$project$Views$Container$centered,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('pb-5')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('row align-items-center'),
						A2($elm$html$Html$Attributes$style, 'min-height', '57vh')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('col-lg-7 text-center')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$h2,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('display-5')
									]),
								_List_fromArray(
									[
										A2($author$project$Views$Markdown$simple, _List_Nil, 'Accélérer la mise en place de l’affichage environnemental')
									])),
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('fs-4 text-muted mt-4 mb-5')
									]),
								_List_fromArray(
									[
										A2($author$project$Views$Markdown$simple, _List_Nil, 'autour d’un calculateur pédagogique et collaboratif')
									])),
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('row mb-4')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('col-md-6 text-center text-md-end py-2')
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$a,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('btn btn-lg btn-primary'),
														$author$project$Route$href(
														A4($author$project$Route$TextileSimulator, $author$project$Data$Impact$defaultTrigram, $author$project$Data$Unit$PerItem, $author$project$Page$Textile$Simulator$ViewMode$Simple, $elm$core$Maybe$Nothing))
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('Faire une simulation')
													]))
											])),
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('col-md-6 text-center text-md-start py-2')
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$a,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('btn btn-lg btn-secondary'),
														$author$project$Route$href($author$project$Route$TextileExamples)
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('voir des exemples')
													]))
											]))
									]))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('col-lg-5')
							]),
						_List_fromArray(
							[
								A2(
								$author$project$Views$Textile$Summary$view,
								{
									funit: $author$project$Data$Unit$PerItem,
									impact: A2(
										$elm$core$Result$withDefault,
										$author$project$Data$Impact$invalid,
										A2(
											$author$project$Data$Impact$getDefinition,
											$author$project$Data$Impact$trg('pef'),
											session.db.impacts)),
									reusable: false,
									session: session
								},
								A2($author$project$Data$Textile$Simulator$compute, session.db, $author$project$Data$Textile$Inputs$tShirtCotonFrance))
							]))
					]))
			]));
};
var $author$project$Views$Container$full = function (attrs) {
	return $elm$html$Html$div(attrs);
};
var $author$project$Page$Home$ToggleIsIsntIndex = function (a) {
	return {$: 'ToggleIsIsntIndex', a: a};
};
var $author$project$Views$Icon$check = $author$project$Views$Icon$icon('check');
var $author$project$Views$Icon$times = $author$project$Views$Icon$icon('times');
var $author$project$Page$Home$viewIsIsntColumn = F3(
	function (positive, isIsntSectionIndex, _v0) {
		var title = _v0.a;
		var sections = _v0.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-3')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h2,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('h3 fw-light text-light text-center mb-3')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('text-white me-1')
								]),
							_List_fromArray(
								[
									positive ? $author$project$Views$Icon$check : $author$project$Views$Icon$times
								])),
							$elm$html$Html$text(title)
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('accordion')
						]),
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (index, _v1) {
								var sectionTitle = _v1.a;
								var markdown = _v1.b;
								return A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('accordion-item')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$h3,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('accordion-header')
												]),
											_List_fromArray(
												[
													A2(
													$elm$html$Html$button,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$type_('button'),
															$elm$html$Html$Attributes$class('AccordionButton accordion-button fw-bold py-0'),
															$elm$html$Html$Attributes$classList(
															_List_fromArray(
																[
																	_Utils_Tuple2(
																	'collapsed',
																	!_Utils_eq(
																		isIsntSectionIndex,
																		$elm$core$Maybe$Just(index)))
																])),
															$elm$html$Html$Events$onClick(
															$author$project$Page$Home$ToggleIsIsntIndex(index))
														]),
													_List_fromArray(
														[
															A2(
															$elm$html$Html$span,
															_List_fromArray(
																[
																	$elm$html$Html$Attributes$class('d-flex align-items-start lh-base')
																]),
															_List_fromArray(
																[
																	positive ? A2(
																	$elm$html$Html$span,
																	_List_fromArray(
																		[
																			$elm$html$Html$Attributes$class('text-success me-1')
																		]),
																	_List_fromArray(
																		[$author$project$Views$Icon$check])) : A2(
																	$elm$html$Html$span,
																	_List_fromArray(
																		[
																			$elm$html$Html$Attributes$class('text-danger me-1')
																		]),
																	_List_fromArray(
																		[$author$project$Views$Icon$times])),
																	A2(
																	$author$project$Views$Markdown$simple,
																	_List_fromArray(
																		[
																			$elm$html$Html$Attributes$class('fw-normal inline-paragraphs')
																		]),
																	sectionTitle)
																]))
														]))
												])),
											A2(
											$author$project$Views$Markdown$simple,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('accordion-collapse collapse p-3'),
													$elm$html$Html$Attributes$classList(
													_List_fromArray(
														[
															_Utils_Tuple2(
															'show',
															_Utils_eq(
																isIsntSectionIndex,
																$elm$core$Maybe$Just(index)))
														]))
												]),
											markdown)
										]));
							}),
						sections))
				]));
	});
var $author$project$Page$Home$viewIsIsnt = F2(
	function (isIsntSectionIndex, _v0) {
		var is = _v0.is;
		var isnt = _v0.isnt;
		return A2(
			$author$project$Views$Container$full,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('bg-info shadow pt-3 pb-5')
				]),
			_List_fromArray(
				[
					A2(
					$author$project$Views$Container$centered,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('row')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('col-sm-6')
										]),
									_List_fromArray(
										[
											A3($author$project$Page$Home$viewIsIsntColumn, true, isIsntSectionIndex, is)
										])),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('col-sm-6')
										]),
									_List_fromArray(
										[
											A3($author$project$Page$Home$viewIsIsntColumn, false, isIsntSectionIndex, isnt)
										]))
								]))
						]))
				]));
	});
var $krisajenkins$remotedata$RemoteData$withDefault = F2(
	function (_default, data) {
		if (data.$ === 'Success') {
			var x = data.a;
			return x;
		} else {
			return _default;
		}
	});
var $author$project$Page$Home$view = F2(
	function (session, _v0) {
		var content = _v0.content;
		var isIsntSectionIndex = _v0.isIsntSectionIndex;
		return _Utils_Tuple2(
			'Accueil',
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('d-flex flex-column')
						]),
					_List_fromArray(
						[
							$author$project$Page$Home$viewHero(session),
							A2(
							$krisajenkins$remotedata$RemoteData$withDefault,
							$elm$html$Html$text(''),
							A2(
								$krisajenkins$remotedata$RemoteData$map,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.markdown;
									},
									A2(
										$elm$core$Basics$composeR,
										$author$project$Data$Gitbook$parseIsIsnt,
										A2(
											$elm$core$Basics$composeR,
											$elm$core$Maybe$map(
												$author$project$Page$Home$viewIsIsnt(isIsntSectionIndex)),
											$elm$core$Maybe$withDefault(
												$elm$html$Html$text(''))))),
								content))
						]))
				]));
	});
var $author$project$Page$Stats$Advanced = {$: 'Advanced'};
var $author$project$Page$Stats$ToggleMode = function (a) {
	return {$: 'ToggleMode', a: a};
};
var $elm$html$Html$iframe = _VirtualDom_node('iframe');
var $author$project$Data$Matomo$encodeStats = function (stats) {
	return A2(
		$elm$json$Json$Encode$encode,
		0,
		A2(
			$elm$json$Json$Encode$list,
			function (_v0) {
				var time = _v0.time;
				var hits = _v0.hits;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$json$Json$Encode$int,
					_List_fromArray(
						[
							$elm$time$Time$posixToMillis(time),
							hits
						]));
			},
			stats));
};
var $author$project$Page$Stats$viewStats = F2(
	function (_v0, webData) {
		var heading = _v0.heading;
		var unit = _v0.unit;
		switch (webData.$) {
			case 'NotAsked':
				return $elm$html$Html$text('');
			case 'Loading':
				return $author$project$Views$Spinner$view;
			case 'Failure':
				var err = webData.a;
				return $author$project$Views$Alert$httpError(err);
			default:
				var stats = webData.a;
				return A3(
					$elm$html$Html$node,
					'chart-stats',
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$attribute, 'heading', heading),
							A2($elm$html$Html$Attributes$attribute, 'unit', unit),
							A2($elm$html$Html$Attributes$attribute, 'height', '300'),
							A2(
							$elm$html$Html$Attributes$attribute,
							'data',
							$author$project$Data$Matomo$encodeStats(stats))
						]),
					_List_Nil);
		}
	});
var $author$project$Page$Stats$view = F2(
	function (_v0, _v1) {
		var mode = _v1.mode;
		var apiStats = _v1.apiStats;
		var webStats = _v1.webStats;
		return _Utils_Tuple2(
			'Statistiques',
			_List_fromArray(
				[
					A2(
					$author$project$Views$Container$centered,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('pb-5')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$h1,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('mb-3')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Statistiques')
								])),
							A2(
							$elm$html$Html$ul,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('nav nav-tabs')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$li,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('nav-item')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$button,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('nav-link'),
													$elm$html$Html$Attributes$classList(
													_List_fromArray(
														[
															_Utils_Tuple2(
															'active',
															_Utils_eq(mode, $author$project$Page$Stats$Simple))
														])),
													$elm$html$Html$Events$onClick(
													$author$project$Page$Stats$ToggleMode($author$project$Page$Stats$Simple))
												]),
											_List_fromArray(
												[
													$elm$html$Html$text('Simples')
												]))
										])),
									A2(
									$elm$html$Html$li,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('nav-item')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$button,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('nav-link'),
													$elm$html$Html$Attributes$classList(
													_List_fromArray(
														[
															_Utils_Tuple2(
															'active',
															_Utils_eq(mode, $author$project$Page$Stats$Advanced))
														])),
													$elm$html$Html$Events$onClick(
													$author$project$Page$Stats$ToggleMode($author$project$Page$Stats$Advanced))
												]),
											_List_fromArray(
												[
													$elm$html$Html$text('Avancées')
												]))
										]))
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('border border-top-0 rounded p-2')
								]),
							_List_fromArray(
								[
									function () {
									if (mode.$ === 'Simple') {
										return A2(
											$elm$html$Html$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$author$project$Page$Stats$viewStats,
													{heading: 'Fréquentation', unit: 'visite'},
													webStats),
													A2(
													$author$project$Page$Stats$viewStats,
													{heading: 'Traffic sur l\'API', unit: 'requête'},
													apiStats)
												]));
									} else {
										return A2(
											$elm$html$Html$div,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$elm$html$Html$div,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$class('widgetIframe')
														]),
													_List_fromArray(
														[
															A2(
															$elm$html$Html$iframe,
															_List_fromArray(
																[
																	A2($elm$html$Html$Attributes$attribute, 'crossorigin', 'anonymous'),
																	A2($elm$html$Html$Attributes$attribute, 'frameborder', '0'),
																	A2($elm$html$Html$Attributes$attribute, 'height', '800'),
																	A2($elm$html$Html$Attributes$attribute, 'marginheight', '0'),
																	A2($elm$html$Html$Attributes$attribute, 'marginwidth', '0'),
																	A2($elm$html$Html$Attributes$attribute, 'scrolling', 'yes'),
																	A2($elm$html$Html$Attributes$attribute, 'allowtransparency', 'true'),
																	A2($elm$html$Html$Attributes$style, 'background-color', '#f8f9fa'),
																	$elm$html$Html$Attributes$src(
																	'https://stats.data.gouv.fr/index.php?' + A2(
																		$elm$core$String$join,
																		'&',
																		A2(
																			$elm$core$List$map,
																			function (_v3) {
																				var key = _v3.a;
																				var val = _v3.b;
																				return key + ('=' + val);
																			},
																			_List_fromArray(
																				[
																					_Utils_Tuple2('module', 'Widgetize'),
																					_Utils_Tuple2('action', 'iframe'),
																					_Utils_Tuple2('containerId', 'VisitOverviewWithGraph'),
																					_Utils_Tuple2('disableLink', '0'),
																					_Utils_Tuple2('widget', '1'),
																					_Utils_Tuple2('moduleToWidgetize', 'CoreHome'),
																					_Utils_Tuple2('actionToWidgetize', 'renderWidgetContainer'),
																					_Utils_Tuple2('idSite', '196'),
																					_Utils_Tuple2('period', 'day'),
																					_Utils_Tuple2('date', 'yesterday'),
																					_Utils_Tuple2('disableLink', '1'),
																					_Utils_Tuple2('widget', '1')
																				])))),
																	A2($elm$html$Html$Attributes$attribute, 'width', '100%')
																]),
															_List_Nil)
														])),
													A2(
													$elm$html$Html$h2,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$class('h3')
														]),
													_List_fromArray(
														[
															$elm$html$Html$text('Traffic sur l\'API')
														])),
													A2(
													$elm$html$Html$div,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$class('widgetIframe')
														]),
													_List_fromArray(
														[
															A2(
															$elm$html$Html$iframe,
															_List_fromArray(
																[
																	A2($elm$html$Html$Attributes$attribute, 'crossorigin', 'anonymous'),
																	A2($elm$html$Html$Attributes$attribute, 'frameborder', '0'),
																	A2($elm$html$Html$Attributes$attribute, 'height', '450'),
																	A2($elm$html$Html$Attributes$attribute, 'marginheight', '0'),
																	A2($elm$html$Html$Attributes$attribute, 'marginwidth', '0'),
																	A2($elm$html$Html$Attributes$attribute, 'scrolling', 'yes'),
																	A2($elm$html$Html$Attributes$attribute, 'allowtransparency', 'true'),
																	A2($elm$html$Html$Attributes$style, 'background-color', '#f8f9fa'),
																	$elm$html$Html$Attributes$src(
																	'https://stats.data.gouv.fr/index.php?' + A2(
																		$elm$core$String$join,
																		'&',
																		A2(
																			$elm$core$List$map,
																			function (_v4) {
																				var key = _v4.a;
																				var val = _v4.b;
																				return key + ('=' + val);
																			},
																			_List_fromArray(
																				[
																					_Utils_Tuple2('module', 'Widgetize'),
																					_Utils_Tuple2('action', 'iframe'),
																					_Utils_Tuple2('containerId', 'Goal_1'),
																					_Utils_Tuple2('disableLink', '0'),
																					_Utils_Tuple2('widget', '1'),
																					_Utils_Tuple2('moduleToWidgetize', 'CoreHome'),
																					_Utils_Tuple2('actionToWidgetize', 'renderWidgetContainer'),
																					_Utils_Tuple2('idSite', '196'),
																					_Utils_Tuple2('period', 'day'),
																					_Utils_Tuple2('date', 'yesterday'),
																					_Utils_Tuple2('disableLink', '1'),
																					_Utils_Tuple2('widget', '1')
																				])))),
																	A2($elm$html$Html$Attributes$attribute, 'width', '100%')
																]),
															_List_Nil)
														]))
												]));
									}
								}()
								]))
						]))
				]));
	});
var $author$project$Page$Textile$Examples$SwitchFunctionalUnit = function (a) {
	return {$: 'SwitchFunctionalUnit', a: a};
};
var $author$project$Page$Textile$Examples$SwitchImpact = function (a) {
	return {$: 'SwitchImpact', a: a};
};
var $author$project$Data$Textile$Inputs$jupeCircuitAsie = {
	airTransportRatio: $elm$core$Maybe$Nothing,
	countryDyeing: $author$project$Data$Country$Code('CN'),
	countryFabric: $author$project$Data$Country$Code('CN'),
	countryMaking: $author$project$Data$Country$Code('CN'),
	countrySpinning: $elm$core$Maybe$Nothing,
	disabledFading: $elm$core$Maybe$Nothing,
	disabledSteps: _List_Nil,
	dyeingWeighting: $elm$core$Maybe$Nothing,
	makingWaste: $elm$core$Maybe$Nothing,
	mass: $ianmackenzie$elm_units$Mass$kilograms(0.3),
	materials: _List_fromArray(
		[
			{
			id: $author$project$Data$Textile$Material$Id('acrylique'),
			share: $author$project$Data$Unit$ratio(1)
		}
		]),
	picking: $elm$core$Maybe$Nothing,
	product: $author$project$Data$Textile$Product$Id('jupe'),
	quality: $elm$core$Maybe$Nothing,
	reparability: $elm$core$Maybe$Nothing,
	surfaceMass: $elm$core$Maybe$Nothing
};
var $author$project$Data$Textile$Inputs$manteauCircuitEurope = {
	airTransportRatio: $elm$core$Maybe$Nothing,
	countryDyeing: $author$project$Data$Country$Code('TN'),
	countryFabric: $author$project$Data$Country$Code('TR'),
	countryMaking: $author$project$Data$Country$Code('ES'),
	countrySpinning: $elm$core$Maybe$Nothing,
	disabledFading: $elm$core$Maybe$Nothing,
	disabledSteps: _List_Nil,
	dyeingWeighting: $elm$core$Maybe$Nothing,
	makingWaste: $elm$core$Maybe$Nothing,
	mass: $ianmackenzie$elm_units$Mass$kilograms(0.95),
	materials: _List_fromArray(
		[
			{
			id: $author$project$Data$Textile$Material$Id('cachemire'),
			share: $author$project$Data$Unit$ratio(1)
		}
		]),
	picking: $elm$core$Maybe$Nothing,
	product: $author$project$Data$Textile$Product$Id('manteau'),
	quality: $elm$core$Maybe$Nothing,
	reparability: $elm$core$Maybe$Nothing,
	surfaceMass: $elm$core$Maybe$Nothing
};
var $author$project$Data$Textile$Inputs$pantalonCircuitEurope = {
	airTransportRatio: $elm$core$Maybe$Nothing,
	countryDyeing: $author$project$Data$Country$Code('TR'),
	countryFabric: $author$project$Data$Country$Code('TR'),
	countryMaking: $author$project$Data$Country$Code('TR'),
	countrySpinning: $elm$core$Maybe$Nothing,
	disabledFading: $elm$core$Maybe$Nothing,
	disabledSteps: _List_Nil,
	dyeingWeighting: $elm$core$Maybe$Nothing,
	makingWaste: $elm$core$Maybe$Nothing,
	mass: $ianmackenzie$elm_units$Mass$kilograms(0.45),
	materials: _List_fromArray(
		[
			{
			id: $author$project$Data$Textile$Material$Id('lin-filasse'),
			share: $author$project$Data$Unit$ratio(1)
		}
		]),
	picking: $elm$core$Maybe$Nothing,
	product: $author$project$Data$Textile$Product$Id('pantalon'),
	quality: $elm$core$Maybe$Nothing,
	reparability: $elm$core$Maybe$Nothing,
	surfaceMass: $elm$core$Maybe$Nothing
};
var $author$project$Data$Textile$Inputs$tShirtCotonAsie = _Utils_update(
	$author$project$Data$Textile$Inputs$tShirtCotonFrance,
	{
		countryDyeing: $author$project$Data$Country$Code('CN'),
		countryFabric: $author$project$Data$Country$Code('CN'),
		countryMaking: $author$project$Data$Country$Code('CN')
	});
var $author$project$Data$Textile$Inputs$tShirtCotonEurope = _Utils_update(
	$author$project$Data$Textile$Inputs$tShirtCotonFrance,
	{
		countryDyeing: $author$project$Data$Country$Code('TN'),
		countryFabric: $author$project$Data$Country$Code('TR'),
		countryMaking: $author$project$Data$Country$Code('ES')
	});
var $author$project$Data$Textile$Inputs$presets = _List_fromArray(
	[$author$project$Data$Textile$Inputs$tShirtCotonFrance, $author$project$Data$Textile$Inputs$tShirtCotonEurope, $author$project$Data$Textile$Inputs$tShirtCotonAsie, $author$project$Data$Textile$Inputs$jupeCircuitAsie, $author$project$Data$Textile$Inputs$manteauCircuitEurope, $author$project$Data$Textile$Inputs$pantalonCircuitEurope]);
var $author$project$Views$Icon$tShirt = $author$project$Views$Icon$icon('tshirt');
var $author$project$Views$Impact$funitSelector = function (_v0) {
	var selectedFunctionalUnit = _v0.selectedFunctionalUnit;
	var switchFunctionalUnit = _v0.switchFunctionalUnit;
	return A2(
		$elm$core$List$map,
		function (_v1) {
			var funit = _v1.a;
			var icon = _v1.b;
			return A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$type_('button'),
						$elm$html$Html$Attributes$title(
						$author$project$Data$Unit$functionalToString(funit)),
						$elm$html$Html$Attributes$class('btn d-flex align-items-center gap-1'),
						$elm$html$Html$Attributes$classList(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'btn-primary',
								_Utils_eq(funit, selectedFunctionalUnit)),
								_Utils_Tuple2(
								'btn-outline-primary',
								!_Utils_eq(funit, selectedFunctionalUnit))
							])),
						$elm$html$Html$Events$onClick(
						switchFunctionalUnit(funit))
					]),
				_List_fromArray(
					[icon]));
		},
		_List_fromArray(
			[
				_Utils_Tuple2($author$project$Data$Unit$PerItem, $author$project$Views$Icon$tShirt),
				_Utils_Tuple2($author$project$Data$Unit$PerDayOfWear, $author$project$Views$Icon$day)
			]));
};
var $author$project$Views$Impact$selector = function (config) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('ImpactSelector input-group')
			]),
		A2(
			$elm$core$List$cons,
			$author$project$Views$Impact$impactSelector(config),
			$author$project$Views$Impact$funitSelector(config)));
};
var $author$project$Views$Icon$build = $author$project$Views$Icon$icon('build');
var $author$project$Views$Icon$checkCircle = $author$project$Views$Icon$icon('check-circle');
var $author$project$Views$Button$pillClasses = 'd-inline-flex align-items-center btn btn-sm gap-1 rounded-pill';
var $author$project$Data$Gitbook$ImpactQuality = {$: 'ImpactQuality'};
var $author$project$Data$Gitbook$publicUrlFromPath = A2($elm$core$Basics$composeR, $author$project$Data$Gitbook$pathToString, $author$project$Data$Gitbook$publicUrlFromString);
var $author$project$Views$Impact$qualityDocumentationUrl = $author$project$Data$Gitbook$publicUrlFromPath($author$project$Data$Gitbook$ImpactQuality);
var $author$project$Views$Impact$impactQuality = function (quality) {
	var maybeInfo = function () {
		switch (quality.$) {
			case 'NotFinished':
				return $elm$core$Maybe$Just(
					{cls: 'btn-danger', help: 'Impact en cours de construction', icon: $author$project$Views$Icon$build, label: 'N/A'});
			case 'GoodQuality':
				return $elm$core$Maybe$Just(
					{cls: 'btn-success', help: 'Qualité satisfaisante', icon: $author$project$Views$Icon$checkCircle, label: 'I'});
			case 'AverageQuality':
				return $elm$core$Maybe$Just(
					{cls: 'btn-info', help: 'Qualité satisfaisante mais nécessitant des améliorations', icon: $author$project$Views$Icon$info, label: 'II'});
			case 'BadQuality':
				return $elm$core$Maybe$Just(
					{cls: 'btn-warning', help: 'Donnée incomplète à utiliser avec prudence', icon: $author$project$Views$Icon$warning, label: 'III'});
			default:
				return $elm$core$Maybe$Nothing;
		}
	}();
	if (maybeInfo.$ === 'Just') {
		var cls = maybeInfo.a.cls;
		var icon = maybeInfo.a.icon;
		var label = maybeInfo.a.label;
		var help = maybeInfo.a.help;
		return _List_fromArray(
			[
				A2(
				$elm$html$Html$a,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class($author$project$Views$Button$pillClasses + (' fs-7 py-0 ' + cls)),
						$elm$html$Html$Attributes$target('_blank'),
						$elm$html$Html$Attributes$href($author$project$Views$Impact$qualityDocumentationUrl),
						$elm$html$Html$Attributes$title(help)
					]),
				_List_fromArray(
					[
						icon,
						$elm$html$Html$text('Qualité\u00A0: '),
						A2(
						$elm$html$Html$strong,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(label)
							]))
					]))
			]);
	} else {
		return _List_Nil;
	}
};
var $author$project$Views$Impact$viewSource = function (source) {
	return A2(
		$author$project$Views$Link$smallPillExternal,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$href(source.url),
				$elm$html$Html$Attributes$title('Source des données pour cet impact : ' + source.label)
			]),
		_List_fromArray(
			[$author$project$Views$Icon$question]));
};
var $author$project$Views$Impact$viewDefinition = function (_v0) {
	var source = _v0.source;
	var label = _v0.label;
	var description = _v0.description;
	var quality = _v0.quality;
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('ImpactDefinition d-none d-sm-block card shadow-sm text-dark bg-light px-2 py-1 mb-3')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('row')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('col-9')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$h2,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('fs-6 lh-base text-muted fw-bold my-1')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('me-1')
											]),
										_List_fromArray(
											[$author$project$Views$Icon$info])),
										$elm$html$Html$text('Impact étudié\u00A0: '),
										$elm$html$Html$text(label)
									]))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('col-3 text-end')
							]),
						_Utils_ap(
							$author$project$Views$Impact$impactQuality(quality),
							_List_fromArray(
								[
									$author$project$Views$Impact$viewSource(source)
								])))
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('text-muted fs-7')
					]),
				_List_fromArray(
					[
						A2(
						$author$project$Views$Markdown$simple,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('mb-1')
							]),
						description)
					]))
			]));
};
var $author$project$Page$Textile$Examples$viewExample = F4(
	function (session, funit, impact, query) {
		return function (v) {
			return A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('col')
					]),
				_List_fromArray(
					[v]));
		}(
			A2(
				$author$project$Views$Textile$Summary$view,
				{
					funit: funit,
					impact: A2(
						$elm$core$Result$withDefault,
						$author$project$Data$Impact$invalid,
						A2($author$project$Data$Impact$getDefinition, impact, session.db.impacts)),
					reusable: true,
					session: session
				},
				A2($author$project$Data$Textile$Simulator$compute, session.db, query)));
	});
var $author$project$Page$Textile$Examples$view = F2(
	function (session, _v0) {
		var impact = _v0.impact;
		var funit = _v0.funit;
		return _Utils_Tuple2(
			'Exemples',
			_List_fromArray(
				[
					A2(
					$author$project$Views$Container$centered,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('pb-3')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('row')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('col-md-7 mb-2')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$h1,
											_List_Nil,
											_List_fromArray(
												[
													$elm$html$Html$text('Exemples de simulation')
												]))
										])),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('col-md-5 mb-2 d-flex align-items-center')
										]),
									_List_fromArray(
										[
											$author$project$Views$Impact$selector(
											{impacts: session.db.impacts, scope: $author$project$Data$Impact$Textile, selectedFunctionalUnit: funit, selectedImpact: impact, switchFunctionalUnit: $author$project$Page$Textile$Examples$SwitchFunctionalUnit, switchImpact: $author$project$Page$Textile$Examples$SwitchImpact})
										]))
								])),
							A2(
							$elm$core$Result$withDefault,
							$elm$html$Html$text(''),
							A2(
								$elm$core$Result$map,
								$author$project$Views$Impact$viewDefinition,
								A2($author$project$Data$Impact$getDefinition, impact, session.db.impacts))),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4')
								]),
							A2(
								$elm$core$List$map,
								A3($author$project$Page$Textile$Examples$viewExample, session, funit, impact),
								$author$project$Data$Textile$Inputs$presets))
						]))
				]));
	});
var $author$project$Data$Textile$Db$datasetLabel = A2(
	$elm$core$Basics$composeR,
	$author$project$Data$Textile$Db$datasetStrings,
	function ($) {
		return $.label;
	});
var $author$project$Page$Textile$Explore$alert = function (error) {
	return $author$project$Views$Alert$simple(
		{
			close: $elm$core$Maybe$Nothing,
			content: _List_fromArray(
				[
					$elm$html$Html$text(error)
				]),
			level: $author$project$Views$Alert$Danger,
			title: $elm$core$Maybe$Just('Erreur')
		});
};
var $author$project$Views$Modal$Large = {$: 'Large'};
var $author$project$Page$Textile$Explore$NoOp = {$: 'NoOp'};
var $author$project$Views$Modal$ExtraLarge = {$: 'ExtraLarge'};
var $author$project$Views$Modal$Small = {$: 'Small'};
var $elm$virtual_dom$VirtualDom$Custom = function (a) {
	return {$: 'Custom', a: a};
};
var $elm$html$Html$Events$custom = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Custom(decoder));
	});
var $elm$html$Html$form = _VirtualDom_node('form');
var $elm$html$Html$Events$alwaysPreventDefault = function (msg) {
	return _Utils_Tuple2(msg, true);
};
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 'MayPreventDefault', a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $elm$html$Html$Events$onSubmit = function (msg) {
	return A2(
		$elm$html$Html$Events$preventDefaultOn,
		'submit',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysPreventDefault,
			$elm$json$Json$Decode$succeed(msg)));
};
var $author$project$Views$Modal$view = function (config) {
	var modalContentAttrs = _List_fromArray(
		[
			$elm$html$Html$Attributes$class('modal-content'),
			A2(
			$elm$html$Html$Events$custom,
			'mouseup',
			$elm$json$Json$Decode$succeed(
				{message: config.noOp, preventDefault: true, stopPropagation: true}))
		]);
	var modalContentTag = function () {
		var _v0 = config.formAction;
		if (_v0.$ === 'Just') {
			var msg = _v0.a;
			return $elm$html$Html$form(
				_Utils_ap(
					modalContentAttrs,
					_List_fromArray(
						[
							$elm$html$Html$Events$onSubmit(msg)
						])));
		} else {
			return $elm$html$Html$div(modalContentAttrs);
		}
	}();
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('Modal')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('modal d-block fade show'),
						A2($elm$html$Html$Attributes$attribute, 'tabindex', '-1'),
						A2($elm$html$Html$Attributes$attribute, 'aria-modal', 'true'),
						A2($elm$html$Html$Attributes$attribute, 'role', 'dialog'),
						A2(
						$elm$html$Html$Events$custom,
						'mouseup',
						$elm$json$Json$Decode$succeed(
							{message: config.close, preventDefault: true, stopPropagation: true}))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('modal-dialog modal-dialog-centered modal-dialog-scrollable'),
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'modal-xl',
										_Utils_eq(config.size, $author$project$Views$Modal$ExtraLarge)),
										_Utils_Tuple2(
										'modal-lg',
										_Utils_eq(config.size, $author$project$Views$Modal$Large)),
										_Utils_Tuple2(
										'modal-sm',
										_Utils_eq(config.size, $author$project$Views$Modal$Small))
									])),
								A2($elm$html$Html$Attributes$attribute, 'aria-modal', 'true')
							]),
						_List_fromArray(
							[
								modalContentTag(
								_List_fromArray(
									[
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('modal-header bg-primary text-light')
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$h6,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('modal-title')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text(config.title)
													])),
												A2(
												$elm$html$Html$button,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$type_('button'),
														$elm$html$Html$Attributes$class('btn-close invert'),
														$elm$html$Html$Events$onClick(config.close),
														A2($elm$html$Html$Attributes$attribute, 'aria-label', 'Close')
													]),
												_List_Nil)
											])),
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('modal-body no-scroll-chaining p-0')
											]),
										config.content),
										(!_Utils_eq(config.footer, _List_Nil)) ? A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('modal-footer bg-light')
											]),
										config.footer) : $elm$html$Html$text('')
									]))
							]))
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('modal-backdrop fade show')
					]),
				_List_Nil)
			]));
};
var $author$project$Page$Textile$Explore$detailsModal = function (content) {
	return $author$project$Views$Modal$view(
		{
			close: $author$project$Page$Textile$Explore$CloseModal,
			content: _List_fromArray(
				[content]),
			footer: _List_Nil,
			formAction: $elm$core$Maybe$Nothing,
			noOp: $author$project$Page$Textile$Explore$NoOp,
			size: $author$project$Views$Modal$Large,
			title: 'Détail de l\'enregistrement'
		});
};
var $author$project$Data$Gitbook$CountryHypothesis = {$: 'CountryHypothesis'};
var $author$project$Page$Textile$Explore$Countries$hypothesisDocLink = A2(
	$author$project$Views$Link$smallPillExternal,
	_List_fromArray(
		[
			$elm$html$Html$Attributes$href(
			$author$project$Data$Gitbook$publicUrlFromPath($author$project$Data$Gitbook$CountryHypothesis))
		]),
	_List_fromArray(
		[$author$project$Views$Icon$info]));
var $author$project$Views$Format$ratio = $author$project$Views$Format$ratioToDecimals(2);
var $author$project$Page$Textile$Explore$Countries$table = function (_v0) {
	var detailed = _v0.detailed;
	return _List_fromArray(
		[
			{
			label: 'Code',
			toCell: function (country) {
				return detailed ? A2(
					$elm$html$Html$code,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(
							$author$project$Data$Country$codeToString(country.code))
						])) : A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$author$project$Route$href(
							$author$project$Route$TextileExplore(
								$author$project$Data$Textile$Db$Countries(
									$elm$core$Maybe$Just(country.code))))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$code,
							_List_Nil,
							_List_fromArray(
								[
									$elm$html$Html$text(
									$author$project$Data$Country$codeToString(country.code))
								]))
						]));
			}
		},
			{
			label: 'Nom',
			toCell: A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.name;
				},
				$elm$html$Html$text)
		},
			{
			label: 'Mix éléctrique',
			toCell: A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.electricityProcess;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.name;
					},
					$elm$html$Html$text))
		},
			{
			label: 'Chaleur',
			toCell: A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.heatProcess;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.name;
					},
					$elm$html$Html$text))
		},
			{
			label: 'Majoration de teinture',
			toCell: function (country) {
				return A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2('text-end', !detailed)
								]))
						]),
					_List_fromArray(
						[
							$author$project$Views$Format$ratio(country.dyeingWeighting),
							$author$project$Page$Textile$Explore$Countries$hypothesisDocLink
						]));
			}
		},
			{
			label: 'Part du transport aérien',
			toCell: function (country) {
				return A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2('text-end', !detailed)
								]))
						]),
					_List_fromArray(
						[
							$author$project$Views$Format$ratio(country.airTransportRatio),
							$author$project$Page$Textile$Explore$Countries$hypothesisDocLink
						]));
			}
		}
		]);
};
var $author$project$Page$Textile$Explore$Table$viewDetails = F2(
	function (createTable, item) {
		return A2(
			$author$project$Views$Table$responsiveDefault,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('view-details')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$tbody,
					_List_Nil,
					A2(
						$elm$core$List$map,
						function (_v0) {
							var label = _v0.label;
							var toCell = _v0.toCell;
							return A2(
								$elm$html$Html$tr,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$elm$html$Html$th,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text(label)
											])),
										A2(
										$elm$html$Html$td,
										_List_Nil,
										_List_fromArray(
											[
												toCell(item)
											]))
									]));
						},
						createTable(
							{detailed: true})))
				]));
	});
var $author$project$Page$Textile$Explore$Table$viewList = F2(
	function (createTable, items) {
		var tableData = createTable(
			{detailed: false});
		return A2(
			$author$project$Views$Table$responsiveDefault,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('view-list')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$thead,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$html$Html$tr,
							_List_Nil,
							A2(
								$elm$core$List$map,
								function (_v0) {
									var label = _v0.label;
									return A2(
										$elm$html$Html$th,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text(label)
											]));
								},
								tableData))
						])),
					A2(
					$elm$html$Html$tbody,
					_List_Nil,
					A2(
						$elm$core$List$map,
						function (item) {
							return A2(
								$elm$html$Html$tr,
								_List_Nil,
								A2(
									$elm$core$List$map,
									function (_v1) {
										var toCell = _v1.toCell;
										return A2(
											$elm$html$Html$td,
											_List_Nil,
											_List_fromArray(
												[
													toCell(item)
												]));
									},
									tableData));
						},
						items))
				]));
	});
var $author$project$Page$Textile$Explore$countriesExplorer = F2(
	function (maybeCode, countries) {
		return _List_fromArray(
			[
				A2($author$project$Page$Textile$Explore$Table$viewList, $author$project$Page$Textile$Explore$Countries$table, countries),
				function () {
				if (maybeCode.$ === 'Just') {
					var code = maybeCode.a;
					var _v1 = A2($author$project$Data$Country$findByCode, code, countries);
					if (_v1.$ === 'Ok') {
						var country = _v1.a;
						return $author$project$Page$Textile$Explore$detailsModal(
							A2($author$project$Page$Textile$Explore$Table$viewDetails, $author$project$Page$Textile$Explore$Countries$table, country));
					} else {
						var error = _v1.a;
						return $author$project$Page$Textile$Explore$alert(error);
					}
				} else {
					return $elm$html$Html$text('');
				}
			}()
			]);
	});
var $author$project$Data$Impact$scopeToString = function (scope) {
	if (scope.$ === 'Food') {
		return 'Alimentaire';
	} else {
		return 'Textile';
	}
};
var $author$project$Page$Textile$Explore$Impacts$table = function (_v0) {
	var detailed = _v0.detailed;
	return _List_fromArray(
		[
			{
			label: 'Code',
			toCell: function (def) {
				return detailed ? A2(
					$elm$html$Html$code,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(
							$author$project$Data$Impact$toString(def.trigram))
						])) : A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$author$project$Route$href(
							$author$project$Route$TextileExplore(
								$author$project$Data$Textile$Db$Impacts(
									$elm$core$Maybe$Just(def.trigram))))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$code,
							_List_Nil,
							_List_fromArray(
								[
									$elm$html$Html$text(
									$author$project$Data$Impact$toString(def.trigram))
								]))
						]));
			}
		},
			{
			label: 'Source',
			toCell: function (def) {
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(def.source.url),
							$elm$html$Html$Attributes$target('_blank')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(def.source.label)
						]));
			}
		},
			{
			label: 'Nom',
			toCell: function (def) {
				return A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$title(def.label)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(def.label)
						]));
			}
		},
			{
			label: 'Description',
			toCell: function (def) {
				return detailed ? A2($author$project$Views$Markdown$simple, _List_Nil, def.description) : A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$title(def.description)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							A3($elm$core$String$replace, '*', '', def.description))
						]));
			}
		},
			{
			label: 'Unité',
			toCell: function (def) {
				return A2(
					$elm$html$Html$code,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(def.unit)
						]));
			}
		},
			{
			label: 'Normalisation PEF',
			toCell: function (def) {
				return A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2('text-end', !detailed)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$core$Maybe$withDefault,
							$elm$html$Html$text('N/A'),
							A2(
								$elm$core$Maybe$map,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.normalization;
									},
									A2(
										$elm$core$Basics$composeR,
										$author$project$Data$Unit$impactToFloat,
										A2($author$project$Views$Format$formatRichFloat, 2, def.unit))),
								def.pefData))
						]));
			}
		},
			{
			label: 'Pondération PEF',
			toCell: function (def) {
				return A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2('text-end', !detailed)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$core$Maybe$withDefault,
							$elm$html$Html$text('N/A'),
							A2(
								$elm$core$Maybe$map,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.weighting;
									},
									$author$project$Views$Format$ratio),
								def.pefData))
						]));
			}
		},
			{
			label: 'Niveau de qualité',
			toCell: function (def) {
				return A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2('text-center', !detailed)
								]))
						]),
					$author$project$Views$Impact$impactQuality(def.quality));
			}
		},
			{
			label: 'Domaines',
			toCell: A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.scopes;
				},
				A2(
					$elm$core$Basics$composeR,
					$elm$core$List$map(
						function (scope) {
							return A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('badge'),
										$elm$html$Html$Attributes$classList(
										_List_fromArray(
											[
												_Utils_Tuple2(
												'bg-success',
												_Utils_eq(scope, $author$project$Data$Impact$Food)),
												_Utils_Tuple2(
												'bg-info',
												_Utils_eq(scope, $author$project$Data$Impact$Textile))
											]))
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(
										$author$project$Data$Impact$scopeToString(scope))
									]));
						}),
					$elm$html$Html$div(
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('d-flex gap-1')
							]))))
		}
		]);
};
var $author$project$Page$Textile$Explore$impactsExplorer = F2(
	function (maybeTrigram, definitions) {
		return _List_fromArray(
			[
				A2($author$project$Page$Textile$Explore$Table$viewList, $author$project$Page$Textile$Explore$Impacts$table, definitions),
				function () {
				if (maybeTrigram.$ === 'Just') {
					var trigram = maybeTrigram.a;
					var _v1 = A2($author$project$Data$Impact$getDefinition, trigram, definitions);
					if (_v1.$ === 'Ok') {
						var definition = _v1.a;
						return $author$project$Page$Textile$Explore$detailsModal(
							A2($author$project$Page$Textile$Explore$Table$viewDetails, $author$project$Page$Textile$Explore$Impacts$table, definition));
					} else {
						var error = _v1.a;
						return $author$project$Page$Textile$Explore$alert(error);
					}
				} else {
					return $elm$html$Html$text('');
				}
			}()
			]);
	});
var $author$project$Data$Textile$Material$Category$toString = function (category) {
	switch (category.$) {
		case 'Natural':
			return 'Naturelles';
		case 'Recycled':
			return 'Recyclées';
		default:
			return 'Synthétiques et artificielles';
	}
};
var $author$project$Page$Textile$Explore$Materials$table = F2(
	function (_v0, _v1) {
		var countries = _v0.countries;
		var detailed = _v1.detailed;
		return _List_fromArray(
			[
				{
				label: 'Identifiant',
				toCell: function (material) {
					return detailed ? A2(
						$elm$html$Html$code,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								$author$project$Data$Textile$Material$idToString(material.id))
							])) : A2(
						$elm$html$Html$a,
						_List_fromArray(
							[
								$author$project$Route$href(
								$author$project$Route$TextileExplore(
									$author$project$Data$Textile$Db$Materials(
										$elm$core$Maybe$Just(material.id))))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(
										$author$project$Data$Textile$Material$idToString(material.id))
									]))
							]));
				}
			},
				{
				label: 'Nom',
				toCell: A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.name;
					},
					$elm$html$Html$text)
			},
				{
				label: 'Catégorie',
				toCell: function (material) {
					return $elm$html$Html$text(
						$author$project$Data$Textile$Material$Category$toString(material.category));
				}
			},
				{
				label: 'Procédé',
				toCell: A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.materialProcess;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.name;
						},
						$elm$html$Html$text))
			},
				{
				label: 'Procédé de recyclage',
				toCell: A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.recycledProcess;
					},
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$map(
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.name;
								},
								$elm$html$Html$text)),
						$elm$core$Maybe$withDefault(
							$elm$html$Html$text('N/A'))))
			},
				{
				label: 'Origine géographique',
				toCell: A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.geographicOrigin;
					},
					$elm$html$Html$text)
			},
				{
				label: 'Pays de production et de filature par défaut',
				toCell: function (material) {
					var _v2 = A2($author$project$Data$Country$findByCode, material.defaultCountry, countries);
					if (_v2.$ === 'Ok') {
						var country = _v2.a;
						return $elm$html$Html$text(country.name);
					} else {
						var error = _v2.a;
						return $author$project$Views$Alert$simple(
							{
								close: $elm$core$Maybe$Nothing,
								content: _List_fromArray(
									[
										$elm$html$Html$text(error)
									]),
								level: $author$project$Views$Alert$Danger,
								title: $elm$core$Maybe$Nothing
							});
					}
				}
			},
				{
				label: 'CFF: Coefficient d\'allocation',
				toCell: function (_v3) {
					var cffData = _v3.cffData;
					if (cffData.$ === 'Just') {
						var manufacturerAllocation = cffData.a.manufacturerAllocation;
						return $elm$html$Html$text(
							A2(
								$author$project$Views$Format$formatFloat,
								1,
								$author$project$Data$Unit$ratioToFloat(manufacturerAllocation)));
					} else {
						return $elm$html$Html$text('N/A');
					}
				}
			},
				{
				label: 'CFF: Rapport de qualité',
				toCell: function (_v5) {
					var cffData = _v5.cffData;
					if (cffData.$ === 'Just') {
						var recycledQualityRatio = cffData.a.recycledQualityRatio;
						return $elm$html$Html$text(
							A2(
								$author$project$Views$Format$formatFloat,
								1,
								$author$project$Data$Unit$ratioToFloat(recycledQualityRatio)));
					} else {
						return $elm$html$Html$text('N/A');
					}
				}
			}
			]);
	});
var $author$project$Page$Textile$Explore$materialsExplorer = F2(
	function (maybeId, db) {
		return _List_fromArray(
			[
				A2(
				$author$project$Page$Textile$Explore$Table$viewList,
				$author$project$Page$Textile$Explore$Materials$table(db),
				db.materials),
				function () {
				if (maybeId.$ === 'Just') {
					var id = maybeId.a;
					var _v1 = A2($author$project$Data$Textile$Material$findById, id, db.materials);
					if (_v1.$ === 'Ok') {
						var material = _v1.a;
						return $author$project$Page$Textile$Explore$detailsModal(
							A2(
								$author$project$Page$Textile$Explore$Table$viewDetails,
								$author$project$Page$Textile$Explore$Materials$table(db),
								material));
					} else {
						var error = _v1.a;
						return $author$project$Page$Textile$Explore$alert(error);
					}
				} else {
					return $elm$html$Html$text('');
				}
			}()
			]);
	});
var $ianmackenzie$elm_units$Duration$inHours = function (duration) {
	return $ianmackenzie$elm_units$Duration$inSeconds(duration) / $ianmackenzie$elm_units$Constants$hour;
};
var $author$project$Views$Format$hours = A2(
	$elm$core$Basics$composeR,
	$ianmackenzie$elm_units$Duration$inHours,
	A2($author$project$Views$Format$formatRichFloat, 2, 'h'));
var $author$project$Views$Format$m3 = A2(
	$elm$core$Basics$composeR,
	$ianmackenzie$elm_units$Volume$inCubicMeters,
	A2($author$project$Views$Format$formatRichFloat, 2, 'm³'));
var $author$project$Views$Format$picking = A2(
	$elm$core$Basics$composeR,
	$author$project$Data$Unit$pickPerMeterToFloat,
	A2($author$project$Views$Format$formatRichFloat, 0, 'duites/m'));
var $author$project$Views$Format$surfaceMass = A2(
	$elm$core$Basics$composeR,
	$author$project$Data$Unit$surfaceMassToFloat,
	A2($author$project$Views$Format$formatRichFloat, 0, 'gr/m²'));
var $author$project$Page$Textile$Explore$Products$table = F2(
	function (db, _v0) {
		var detailed = _v0.detailed;
		return _List_fromArray(
			[
				{
				label: 'Identifiant',
				toCell: function (product) {
					return detailed ? A2(
						$elm$html$Html$code,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								$author$project$Data$Textile$Product$idToString(product.id))
							])) : A2(
						$elm$html$Html$a,
						_List_fromArray(
							[
								$author$project$Route$href(
								$author$project$Route$TextileExplore(
									$author$project$Data$Textile$Db$Products(
										$elm$core$Maybe$Just(product.id))))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(
										$author$project$Data$Textile$Product$idToString(product.id))
									]))
							]));
				}
			},
				{
				label: 'Nom',
				toCell: A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.name;
					},
					$elm$html$Html$text)
			},
				{
				label: 'Masse par défaut',
				toCell: function (product) {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('text-end', !detailed)
									]))
							]),
						_List_fromArray(
							[
								$author$project$Views$Format$kg(product.mass)
							]));
				}
			},
				{
				label: 'Volume',
				toCell: function (product) {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('text-end', !detailed)
									]))
							]),
						_List_fromArray(
							[
								$author$project$Views$Format$m3(product.endOfLife.volume)
							]));
				}
			},
				{
				label: 'Perte (PCR)',
				toCell: function (product) {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('text-end', !detailed)
									]))
							]),
						_List_fromArray(
							[
								$author$project$Views$Format$ratio(product.making.pcrWaste)
							]));
				}
			},
				{
				label: 'Type de procédé',
				toCell: function (product) {
					var _v1 = product.fabric;
					if (_v1.$ === 'Knitted') {
						return $elm$html$Html$text('Tricotage');
					} else {
						return $elm$html$Html$text('Tissage');
					}
				}
			},
				{
				label: 'Pick-per-meter',
				toCell: function (product) {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('text-end', !detailed)
									]))
							]),
						_List_fromArray(
							[
								function () {
								var _v2 = product.fabric;
								if (_v2.$ === 'Knitted') {
									return $elm$html$Html$text('N/A');
								} else {
									var picking = _v2.b;
									return $author$project$Views$Format$picking(picking);
								}
							}()
							]));
				}
			},
				{
				label: 'Grammage',
				toCell: function (product) {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('text-end', !detailed)
									]))
							]),
						_List_fromArray(
							[
								function () {
								var _v3 = product.fabric;
								if (_v3.$ === 'Knitted') {
									return $elm$html$Html$text('N/A');
								} else {
									var surfaceMass = _v3.c;
									return $author$project$Views$Format$surfaceMass(surfaceMass);
								}
							}()
							]));
				}
			},
				{
				label: 'Procédé',
				toCell: A2(
					$elm$core$Basics$composeR,
					$author$project$Data$Textile$Product$getFabricProcess,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.name;
						},
						$elm$html$Html$text))
			},
				{
				label: 'Confection',
				toCell: A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.making;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.process;
						},
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.name;
							},
							$elm$html$Html$text)))
			},
				{
				label: 'Délavage',
				toCell: function (product) {
					return product.making.fadable ? A2(
						$elm$core$Result$withDefault,
						$elm$html$Html$text('Erreur, procédé de délavage introuvable'),
						A2(
							$elm$core$Result$map,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.fading;
								},
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.name;
									},
									$elm$html$Html$text)),
							$author$project$Data$Textile$Process$loadWellKnown(db.processes))) : $elm$html$Html$text('N/A');
				}
			},
				{
				label: 'Nombre de jours porté',
				toCell: function (product) {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('text-end', !detailed)
									]))
							]),
						_List_fromArray(
							[
								$author$project$Views$Format$days(product.use.daysOfWear)
							]));
				}
			},
				{
				label: 'Cycles d\'entretien (par défaut)',
				toCell: function (product) {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('text-end', !detailed)
									]))
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								$elm$core$String$fromInt(product.use.wearsPerCycle))
							]));
				}
			},
				{
				label: 'Utilisations avant lavage',
				toCell: function (product) {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('text-end', !detailed)
									]))
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								$elm$core$String$fromInt(product.use.defaultNbCycles))
							]));
				}
			},
				{
				label: 'Procédé de repassage',
				toCell: A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.use;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.ironingProcess;
						},
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.name;
							},
							$elm$html$Html$text)))
			},
				{
				label: 'Procédé d\'utilisation hors-repassage',
				toCell: A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.use;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.nonIroningProcess;
						},
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.name;
							},
							$elm$html$Html$text)))
			},
				{
				label: 'Séchage électrique',
				toCell: function (product) {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('text-end', !detailed)
									]))
							]),
						_List_fromArray(
							[
								$author$project$Views$Format$ratio(product.use.ratioDryer)
							]));
				}
			},
				{
				label: 'Repassage (part)',
				toCell: function (product) {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('text-end', !detailed)
									]))
							]),
						_List_fromArray(
							[
								$author$project$Views$Format$ratio(product.use.ratioIroning)
							]));
				}
			},
				{
				label: 'Repassage (temps)',
				toCell: function (product) {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('text-end', !detailed)
									]))
							]),
						_List_fromArray(
							[
								$author$project$Views$Format$hours(product.use.timeIroning)
							]));
				}
			}
			]);
	});
var $author$project$Page$Textile$Explore$productsExplorer = F2(
	function (maybeId, db) {
		return _List_fromArray(
			[
				A2(
				$author$project$Page$Textile$Explore$Table$viewList,
				$author$project$Page$Textile$Explore$Products$table(db),
				db.products),
				function () {
				if (maybeId.$ === 'Just') {
					var id = maybeId.a;
					var _v1 = A2($author$project$Data$Textile$Product$findById, id, db.products);
					if (_v1.$ === 'Ok') {
						var product = _v1.a;
						return $author$project$Page$Textile$Explore$detailsModal(
							A2(
								$author$project$Page$Textile$Explore$Table$viewDetails,
								$author$project$Page$Textile$Explore$Products$table(db),
								product));
					} else {
						var error = _v1.a;
						return $author$project$Page$Textile$Explore$alert(error);
					}
				} else {
					return $elm$html$Html$text('');
				}
			}()
			]);
	});
var $author$project$Page$Textile$Explore$explore = F2(
	function (db, dataset) {
		switch (dataset.$) {
			case 'Countries':
				var maybeCode = dataset.a;
				return A2($author$project$Page$Textile$Explore$countriesExplorer, maybeCode, db.countries);
			case 'Impacts':
				var maybeTrigram = dataset.a;
				return A2($author$project$Page$Textile$Explore$impactsExplorer, maybeTrigram, db.impacts);
			case 'Materials':
				var maybeId = dataset.a;
				return A2($author$project$Page$Textile$Explore$materialsExplorer, maybeId, db);
			default:
				var maybeId = dataset.a;
				return A2($author$project$Page$Textile$Explore$productsExplorer, maybeId, db);
		}
	});
var $author$project$Data$Textile$Db$datasets = _List_fromArray(
	[
		$author$project$Data$Textile$Db$Countries($elm$core$Maybe$Nothing),
		$author$project$Data$Textile$Db$Impacts($elm$core$Maybe$Nothing),
		$author$project$Data$Textile$Db$Products($elm$core$Maybe$Nothing),
		$author$project$Data$Textile$Db$Materials($elm$core$Maybe$Nothing)
	]);
var $author$project$Page$Textile$Explore$isActive = F2(
	function (a, b) {
		var _v0 = _Utils_Tuple2(a, b);
		_v0$4:
		while (true) {
			switch (_v0.a.$) {
				case 'Countries':
					if (_v0.b.$ === 'Countries') {
						return true;
					} else {
						break _v0$4;
					}
				case 'Impacts':
					if (_v0.b.$ === 'Impacts') {
						return true;
					} else {
						break _v0$4;
					}
				case 'Products':
					if (_v0.b.$ === 'Products') {
						return true;
					} else {
						break _v0$4;
					}
				default:
					if (_v0.b.$ === 'Materials') {
						return true;
					} else {
						break _v0$4;
					}
			}
		}
		return false;
	});
var $author$project$Page$Textile$Explore$menu = function (dataset) {
	return A2(
		$elm$html$Html$nav,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('nav nav-pills d-flex justify-content-between justify-content-sm-end align-items-center gap-0 gap-sm-2')
			]),
		A2(
			$elm$core$List$map,
			function (ds) {
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('nav-link'),
							$elm$html$Html$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'active',
									A2($author$project$Page$Textile$Explore$isActive, ds, dataset))
								])),
							$author$project$Route$href(
							$author$project$Route$TextileExplore(ds))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							$author$project$Data$Textile$Db$datasetLabel(ds))
						]));
			},
			$author$project$Data$Textile$Db$datasets));
};
var $author$project$Page$Textile$Explore$view = F2(
	function (session, _v0) {
		var dataset = _v0.dataset;
		return _Utils_Tuple2(
			$author$project$Data$Textile$Db$datasetLabel(dataset) + ' | Explorer ',
			_List_fromArray(
				[
					A2(
					$author$project$Views$Container$centered,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('pb-3')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('d-block d-sm-flex justify-content-between align-items-center')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$h1,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text('Explorer '),
											A2(
											$elm$html$Html$small,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('text-muted')
												]),
											_List_fromArray(
												[
													$elm$html$Html$text(
													'les ' + $elm$core$String$toLower(
														$author$project$Data$Textile$Db$datasetLabel(dataset)))
												]))
										])),
									$author$project$Page$Textile$Explore$menu(dataset)
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('mt-3')
								]),
							A2($author$project$Page$Textile$Explore$explore, session.db, dataset))
						]))
				]));
	});
var $author$project$Page$Textile$Simulator$NoOp = {$: 'NoOp'};
var $author$project$Page$Textile$Simulator$ToggleComparedSimulation = F2(
	function (a, b) {
		return {$: 'ToggleComparedSimulation', a: a, b: b};
	});
var $author$project$Views$Textile$SavedSimulation$detailsTooltip = F2(
	function (session, saved) {
		return A2(
			$elm$core$Result$withDefault,
			saved.name,
			A2(
				$elm$core$Result$map,
				$author$project$Data$Textile$Inputs$toString,
				A2($author$project$Data$Textile$Inputs$fromQuery, session.db, saved.query)));
	});
var $author$project$Views$Container$fluid = function (attrs) {
	return $elm$html$Html$div(
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Attributes$class('container-fluid'),
			attrs));
};
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $author$project$Views$Textile$SavedSimulation$getChartEntries = F3(
	function (_v0, funit, impact) {
		var db = _v0.db;
		var store = _v0.store;
		var createEntry_ = A3($author$project$Views$Textile$Comparator$createEntry, db, funit, impact);
		return A2(
			$elm$core$Result$map,
			$elm$core$List$sortBy(
				function ($) {
					return $.score;
				}),
			$elm_community$result_extra$Result$Extra$combine(
				A2(
					$elm$core$List$filterMap,
					function (saved) {
						return A2($elm$core$Set$member, saved.name, store.comparedSimulations) ? $elm$core$Maybe$Just(
							A2(
								createEntry_,
								{highlight: true, label: saved.name},
								saved.query)) : $elm$core$Maybe$Nothing;
					},
					store.savedSimulations)));
	});
var $elm$html$Html$label = _VirtualDom_node('label');
var $elm$html$Html$Events$targetChecked = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'checked']),
	$elm$json$Json$Decode$bool);
var $elm$html$Html$Events$onCheck = function (tagger) {
	return A2(
		$elm$html$Html$Events$on,
		'change',
		A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetChecked));
};
var $author$project$Views$Textile$SavedSimulation$comparator = function (_v0) {
	var session = _v0.session;
	var impact = _v0.impact;
	var funit = _v0.funit;
	var daysOfWear = _v0.daysOfWear;
	var toggle = _v0.toggle;
	var currentlyCompared = $elm$core$Set$size(session.store.comparedSimulations);
	return A2(
		$author$project$Views$Container$fluid,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('row')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('col-lg-4 border-end fs-7 p-0')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$p,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('p-2 ps-3 pb-1 mb-0 text-muted')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Sélectionnez jusqu\'à '),
										A2(
										$elm$html$Html$strong,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text(
												$elm$core$String$fromInt($author$project$Data$Session$maxComparedSimulations))
											])),
										$elm$html$Html$text(' simulations pour les comparer\u00A0:')
									])),
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('list-group list-group-flush overflow-y-scroll overflow-x-hidden'),
										A2($elm$html$Html$Attributes$style, 'max-height', '520px')
									]),
								A2(
									$elm$core$List$map,
									function (saved) {
										var _v1 = _Utils_Tuple2(
											A2($author$project$Views$Textile$SavedSimulation$detailsTooltip, session, saved),
											A2($elm$core$Set$member, saved.name, session.store.comparedSimulations));
										var description = _v1.a;
										var isCompared = _v1.b;
										return A2(
											$elm$html$Html$label,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('form-check-label list-group-item text-nowrap ps-3'),
													$elm$html$Html$Attributes$title(description)
												]),
											_List_fromArray(
												[
													A2(
													$elm$html$Html$input,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$type_('checkbox'),
															$elm$html$Html$Attributes$class('form-check-input'),
															$elm$html$Html$Events$onCheck(
															toggle(saved.name)),
															$elm$html$Html$Attributes$checked(isCompared),
															$elm$html$Html$Attributes$disabled(
															(!isCompared) && (_Utils_cmp(currentlyCompared, $author$project$Data$Session$maxComparedSimulations) > -1))
														]),
													_List_Nil),
													A2(
													$elm$html$Html$span,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$class('ps-2')
														]),
													_List_fromArray(
														[
															A2(
															$elm$html$Html$span,
															_List_fromArray(
																[
																	$elm$html$Html$Attributes$class('me-2 fw-500')
																]),
															_List_fromArray(
																[
																	$elm$html$Html$text(saved.name)
																])),
															(!_Utils_eq(description, saved.name)) ? A2(
															$elm$html$Html$span,
															_List_fromArray(
																[
																	$elm$html$Html$Attributes$class('text-muted fs-7')
																]),
															_List_fromArray(
																[
																	$elm$html$Html$text(description)
																])) : $elm$html$Html$text('')
														]))
												]));
									},
									session.store.savedSimulations))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('col-lg-8 px-4 py-2 overflow-hidden'),
								A2($elm$html$Html$Attributes$style, 'min-height', '500px')
							]),
						_List_fromArray(
							[
								function () {
								var _v2 = A3($author$project$Views$Textile$SavedSimulation$getChartEntries, session, funit, impact);
								if (_v2.$ === 'Ok') {
									if (!_v2.a.b) {
										return A2(
											$elm$html$Html$p,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('d-flex h-100 justify-content-center align-items-center')
												]),
											_List_fromArray(
												[
													$elm$html$Html$text('Merci de sélectionner des simulations à comparer')
												]));
									} else {
										var entries = _v2.a;
										return A2(
											$author$project$Views$Textile$Comparator$chart,
											{
												daysOfWear: daysOfWear,
												funit: funit,
												impact: impact,
												margins: $elm$core$Maybe$Just(
													{bottom: 40, left: 40, right: 20, top: 22}),
												size: $elm$core$Maybe$Just(
													_Utils_Tuple2(700, 500))
											},
											entries);
									}
								} else {
									var error = _v2.a;
									return $author$project$Views$Alert$simple(
										{
											close: $elm$core$Maybe$Nothing,
											content: _List_fromArray(
												[
													$elm$html$Html$text(error)
												]),
											level: $author$project$Views$Alert$Danger,
											title: $elm$core$Maybe$Just('Erreur')
										});
								}
							}(),
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('fs-7 text-end text-muted')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(impact.label),
										$elm$html$Html$text(', '),
										$elm$html$Html$text(
										$author$project$Data$Unit$functionalToString(funit))
									]))
							]))
					]))
			]));
};
var $author$project$Page$Textile$Simulator$AddMaterial = {$: 'AddMaterial'};
var $author$project$Page$Textile$Simulator$RemoveMaterial = function (a) {
	return {$: 'RemoveMaterial', a: a};
};
var $author$project$Page$Textile$Simulator$Reset = {$: 'Reset'};
var $author$project$Page$Textile$Simulator$SelectInputText = function (a) {
	return {$: 'SelectInputText', a: a};
};
var $author$project$Page$Textile$Simulator$SwitchFunctionalUnit = function (a) {
	return {$: 'SwitchFunctionalUnit', a: a};
};
var $author$project$Page$Textile$Simulator$SwitchImpact = function (a) {
	return {$: 'SwitchImpact', a: a};
};
var $author$project$Page$Textile$Simulator$UpdateMaterial = F2(
	function (a, b) {
		return {$: 'UpdateMaterial', a: a, b: b};
	});
var $author$project$Page$Textile$Simulator$UpdateMaterialShare = F2(
	function (a, b) {
		return {$: 'UpdateMaterialShare', a: a, b: b};
	});
var $author$project$Page$Textile$Simulator$ViewMode$isActive = F2(
	function (vm1, vm2) {
		var _v0 = _Utils_Tuple2(vm1, vm2);
		_v0$4:
		while (true) {
			switch (_v0.a.$) {
				case 'Dataviz':
					if (_v0.b.$ === 'Dataviz') {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						return true;
					} else {
						break _v0$4;
					}
				case 'DetailedAll':
					if (_v0.b.$ === 'DetailedAll') {
						var _v3 = _v0.a;
						var _v4 = _v0.b;
						return true;
					} else {
						break _v0$4;
					}
				case 'DetailedStep':
					if (_v0.b.$ === 'DetailedStep') {
						return true;
					} else {
						break _v0$4;
					}
				default:
					if (_v0.b.$ === 'Simple') {
						var _v5 = _v0.a;
						var _v6 = _v0.b;
						return true;
					} else {
						break _v0$4;
					}
			}
		}
		return false;
	});
var $author$project$Views$Icon$stats = $author$project$Views$Icon$icon('stats');
var $author$project$Views$Icon$zoomin = $author$project$Views$Icon$icon('zoomin');
var $author$project$Views$Icon$zoomout = $author$project$Views$Icon$icon('zoomout');
var $author$project$Page$Textile$Simulator$displayModeView = F4(
	function (trigram, funit, viewMode, query) {
		var link = F3(
			function (mode, icon, label) {
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2('nav-link', true),
									_Utils_Tuple2(
									'active',
									A2($author$project$Page$Textile$Simulator$ViewMode$isActive, viewMode, mode))
								])),
							$author$project$Route$href(
							A4(
								$author$project$Route$TextileSimulator,
								trigram,
								funit,
								mode,
								$elm$core$Maybe$Just(query)))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('me-1')
								]),
							_List_fromArray(
								[icon])),
							$elm$html$Html$text(label)
						]));
			});
		return A2(
			$elm$html$Html$nav,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('nav nav-pills nav-fill py-2 bg-white sticky-md-top justify-content-between'),
					$elm$html$Html$Attributes$class('justify-content-sm-end align-items-center gap-0 gap-sm-2')
				]),
			_List_fromArray(
				[
					A3(link, $author$project$Page$Textile$Simulator$ViewMode$Simple, $author$project$Views$Icon$zoomout, 'Affichage simple'),
					A3(link, $author$project$Page$Textile$Simulator$ViewMode$DetailedAll, $author$project$Views$Icon$zoomin, 'Affichage détaillé'),
					A3(link, $author$project$Page$Textile$Simulator$ViewMode$Dataviz, $author$project$Views$Icon$stats, 'Visualisations')
				]));
	});
var $author$project$Data$Textile$Material$fromCategory = function (category) {
	return $elm$core$List$filter(
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.category;
			},
			$elm$core$Basics$eq(category)));
};
var $author$project$Data$Textile$Material$groupByCategories = function (materials) {
	return _Utils_Tuple3(
		A2($author$project$Data$Textile$Material$fromCategory, $author$project$Data$Textile$Material$Category$Natural, materials),
		A2($author$project$Data$Textile$Material$fromCategory, $author$project$Data$Textile$Material$Category$Synthetic, materials),
		A2($author$project$Data$Textile$Material$fromCategory, $author$project$Data$Textile$Material$Category$Recycled, materials));
};
var $author$project$Data$Textile$Material$groupAll = A2(
	$elm$core$Basics$composeR,
	$elm$core$List$sortBy(
		function ($) {
			return $.shortName;
		}),
	$author$project$Data$Textile$Material$groupByCategories);
var $author$project$Views$Textile$Material$materialSelector = F3(
	function (index, _v0, id) {
		var materials = _v0.materials;
		var exclude = _v0.exclude;
		var update = _v0.update;
		var toOption = function (m) {
			return A2(
				$elm$html$Html$option,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$value(
						$author$project$Data$Textile$Material$idToString(m.id)),
						$elm$html$Html$Attributes$selected(
						_Utils_eq(id, m.id)),
						$elm$html$Html$Attributes$disabled(
						A2($elm$core$List$member, m.id, exclude)),
						$elm$html$Html$Attributes$title(m.name)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(m.shortName)
					]));
		};
		var toGroup = F2(
			function (name, materials_) {
				return _Utils_eq(materials_, _List_Nil) ? $elm$html$Html$text('') : A2(
					$elm$html$Html$optgroup,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$attribute, 'label', name)
						]),
					A2($elm$core$List$map, toOption, materials_));
			});
		var _v1 = $author$project$Data$Textile$Material$groupAll(materials);
		var natural = _v1.a;
		var synthetic = _v1.b;
		var recycled = _v1.c;
		return _List_fromArray(
			[
				A2(
				$elm$html$Html$select,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$id('material'),
						$elm$html$Html$Attributes$class('form-select flex-fill'),
						$elm$html$Html$Events$onInput(
						A2(
							$elm$core$Basics$composeR,
							$author$project$Data$Textile$Material$Id,
							update(index)))
					]),
				_List_fromArray(
					[
						A2(toGroup, 'Matières naturelles', natural),
						A2(toGroup, 'Matières synthétiques', synthetic),
						A2(toGroup, 'Matières recyclées', recycled)
					]))
			]);
	});
var $elm$html$Html$Attributes$max = $elm$html$Html$Attributes$stringProperty('max');
var $elm$html$Html$Attributes$maxlength = function (n) {
	return A2(
		_VirtualDom_attribute,
		'maxlength',
		$elm$core$String$fromInt(n));
};
var $elm$html$Html$Events$onFocus = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'focus',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$Attributes$placeholder = $elm$html$Html$Attributes$stringProperty('placeholder');
var $author$project$Views$Textile$Material$shareField = F3(
	function (index, _v0, share) {
		var length = _v0.length;
		var valid = _v0.valid;
		var selectInputText = _v0.selectInputText;
		var update = _v0.update;
		var domId = 'material-' + $elm$core$String$fromInt(index);
		return _List_fromArray(
			[
				A2(
				$elm$html$Html$input,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$type_('number'),
						$elm$html$Html$Attributes$id(domId),
						$elm$html$Html$Attributes$class('ShareInput form-control bg-white border-end-0 text-end pe-2'),
						$elm$html$Html$Attributes$classList(
						_List_fromArray(
							[
								_Utils_Tuple2('incdec-arrows-left', length > 1),
								_Utils_Tuple2('feedback-invalid', !valid),
								_Utils_Tuple2('text-danger', !valid)
							])),
						$elm$html$Html$Attributes$placeholder('100%'),
						$elm$html$Html$Attributes$maxlength(3),
						$elm$html$Html$Attributes$step('1'),
						$elm$html$Html$Attributes$min('0'),
						$elm$html$Html$Attributes$max('100'),
						$elm$html$Html$Attributes$value(
						$elm$core$String$fromInt(
							A3(
								$elm$core$Basics$clamp,
								0,
								100,
								$elm$core$Basics$round(
									$author$project$Data$Unit$ratioToFloat(share) * 100)))),
						$elm$html$Html$Attributes$disabled(length === 1),
						$elm$html$Html$Events$onInput(
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$toInt,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Maybe$withDefault(0),
								A2(
									$elm$core$Basics$composeR,
									function (_int) {
										return A3($elm$core$Basics$clamp, 0, 1, _int / 100);
									},
									A2(
										$elm$core$Basics$composeR,
										$author$project$Data$Unit$ratio,
										update(index)))))),
						$elm$html$Html$Events$onFocus(
						selectInputText(domId))
					]),
				_List_Nil),
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('input-group-text bg-white ps-0 pe-1 fs-7'),
						$elm$html$Html$Attributes$classList(
						_List_fromArray(
							[
								_Utils_Tuple2('text-danger feedback-invalid', !valid)
							]))
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('%')
					]))
			]);
	});
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $author$project$Views$Textile$Material$field = F3(
	function (config, _v0, input) {
		var index = _v0.index;
		var length = _v0.length;
		var exclude = _v0.exclude;
		var valid = _v0.valid;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mb-2')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('input-group')
						]),
					$elm$core$List$concat(
						_List_fromArray(
							[
								(length > 1) ? _List_fromArray(
								[
									A2(
									$elm$html$Html$button,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('btn btn-primary no-outline'),
											$elm$html$Html$Events$onClick(
											config.remove(index)),
											$elm$html$Html$Attributes$disabled(length < 2),
											$elm$html$Html$Attributes$title('Supprimer cette matière'),
											A2($elm$html$Html$Attributes$attribute, 'aria-label', 'Supprimer cette matière'),
											$elm$html$Html$Attributes$tabindex(-1)
										]),
									_List_fromArray(
										[$author$project$Views$Icon$times]))
								]) : _List_Nil,
								A3(
								$author$project$Views$Textile$Material$shareField,
								index,
								{length: length, selectInputText: config.selectInputText, update: config.updateShare, valid: valid},
								input.share),
								A3(
								$author$project$Views$Textile$Material$materialSelector,
								index,
								{exclude: exclude, materials: config.materials, update: config.update},
								input.material.id)
							])))
				]));
	});
var $author$project$Data$Env$maxMaterials = 5;
var $author$project$Views$Icon$plus = $author$project$Views$Icon$icon('plus');
var $author$project$Views$Textile$Material$formSet = function (config) {
	var add = config.add;
	var inputs = config.inputs;
	var totalShares = $elm$core$List$sum(
		A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.share;
				},
				A2(
					$elm$core$Basics$composeR,
					$author$project$Data$Unit$ratioToFloat,
					A2($elm$core$Basics$clamp, 0, 1))),
			inputs));
	var valid = $elm$core$Basics$round(totalShares * 100) === 100;
	var _v0 = _Utils_Tuple2(
		$elm$core$List$length(inputs),
		A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.material;
				},
				function ($) {
					return $.id;
				}),
			inputs));
	var length = _v0.a;
	var exclude = _v0.b;
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('Materials')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('d-flex align-items-center gap-1 mb-2')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('fw-bold')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Matières premières')
							])),
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('text-muted')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								'jusqu\'à ' + ($elm$core$String$fromInt($author$project$Data$Env$maxMaterials) + ' maximum'))
							]))
					])),
				A2(
				$elm$html$Html$div,
				_List_Nil,
				A2(
					$elm$core$List$indexedMap,
					function (index) {
						return A2(
							$author$project$Views$Textile$Material$field,
							config,
							{exclude: exclude, index: index, length: length, valid: valid});
					},
					inputs)),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('input-group')
					]),
				_List_fromArray(
					[
						(length > 1) ? A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('SharesTotal form-control text-end'),
								$elm$html$Html$Attributes$class('d-flex justify-content-between align-items-center gap-1'),
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('text-success feedback-valid', valid),
										_Utils_Tuple2('text-danger feedback-invalid', !valid)
									]))
							]),
						_List_fromArray(
							[
								valid ? $author$project$Views$Icon$check : $author$project$Views$Icon$warning,
								$elm$html$Html$text(
								$elm$core$String$fromInt(
									$elm$core$Basics$round(totalShares * 100))),
								$elm$html$Html$text('%')
							])) : $elm$html$Html$text(''),
						A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('btn btn-outline-primary flex-fill'),
								$elm$html$Html$Attributes$class('d-flex justify-content-center align-items-center gap-1 no-outline'),
								$elm$html$Html$Events$onClick(add),
								$elm$html$Html$Attributes$disabled(
								_Utils_cmp(length, $author$project$Data$Env$maxMaterials) > -1)
							]),
						_List_fromArray(
							[
								$author$project$Views$Icon$plus,
								$elm$html$Html$text('Ajouter une matière')
							]))
					]))
			]));
};
var $author$project$Page$Textile$Simulator$ToggleDisabledFading = function (a) {
	return {$: 'ToggleDisabledFading', a: a};
};
var $author$project$Page$Textile$Simulator$ToggleStep = function (a) {
	return {$: 'ToggleStep', a: a};
};
var $author$project$Page$Textile$Simulator$ToggleStepViewMode = function (a) {
	return {$: 'ToggleStepViewMode', a: a};
};
var $author$project$Page$Textile$Simulator$UpdateAirTransportRatio = function (a) {
	return {$: 'UpdateAirTransportRatio', a: a};
};
var $author$project$Page$Textile$Simulator$UpdateDyeingWeighting = function (a) {
	return {$: 'UpdateDyeingWeighting', a: a};
};
var $author$project$Page$Textile$Simulator$UpdateMakingWaste = function (a) {
	return {$: 'UpdateMakingWaste', a: a};
};
var $author$project$Page$Textile$Simulator$UpdatePicking = function (a) {
	return {$: 'UpdatePicking', a: a};
};
var $author$project$Page$Textile$Simulator$UpdateQuality = function (a) {
	return {$: 'UpdateQuality', a: a};
};
var $author$project$Page$Textile$Simulator$UpdateReparability = function (a) {
	return {$: 'UpdateReparability', a: a};
};
var $author$project$Page$Textile$Simulator$UpdateStepCountry = F2(
	function (a, b) {
		return {$: 'UpdateStepCountry', a: a, b: b};
	});
var $author$project$Page$Textile$Simulator$UpdateSurfaceMass = function (a) {
	return {$: 'UpdateSurfaceMass', a: a};
};
var $elm$core$Elm$JsArray$indexedMap = _JsArray_indexedMap;
var $elm$core$Array$indexedMap = F2(
	function (func, _v0) {
		var len = _v0.a;
		var tree = _v0.c;
		var tail = _v0.d;
		var initialBuilder = {
			nodeList: _List_Nil,
			nodeListSize: 0,
			tail: A3(
				$elm$core$Elm$JsArray$indexedMap,
				func,
				$elm$core$Array$tailIndex(len),
				tail)
		};
		var helper = F2(
			function (node, builder) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldl, helper, builder, subTree);
				} else {
					var leaf = node.a;
					var offset = builder.nodeListSize * $elm$core$Array$branchFactor;
					var mappedLeaf = $elm$core$Array$Leaf(
						A3($elm$core$Elm$JsArray$indexedMap, func, offset, leaf));
					return {
						nodeList: A2($elm$core$List$cons, mappedLeaf, builder.nodeList),
						nodeListSize: builder.nodeListSize + 1,
						tail: builder.tail
					};
				}
			});
		return A2(
			$elm$core$Array$builderToArray,
			true,
			A3($elm$core$Elm$JsArray$foldl, helper, initialBuilder, tree));
	});
var $author$project$Views$Component$DownArrow$standard = $author$project$Views$Component$DownArrow$img('img/down-arrow-icon.png');
var $author$project$Data$Gitbook$Electricity = {$: 'Electricity'};
var $author$project$Data$Gitbook$Heat = {$: 'Heat'};
var $author$project$Data$Gitbook$Transport = {$: 'Transport'};
var $author$project$Data$Gitbook$Waste = {$: 'Waste'};
var $elm$html$Html$Attributes$for = $elm$html$Html$Attributes$stringProperty('htmlFor');
var $author$project$Views$RangeSlider$layout = function (_v0) {
	var id = _v0.id;
	var label = _v0.label;
	var attributes = _v0.attributes;
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('RangeSlider row')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('col-xxl-6')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$label,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$for(id),
								$elm$html$Html$Attributes$class('form-label text-nowrap fs-7 mb-0')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(label)
							]))
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('col-xxl-6')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$input,
						A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$type_('range'),
							A2(
								$elm$core$List$cons,
								$elm$html$Html$Attributes$class('d-block form-range'),
								A2(
									$elm$core$List$cons,
									A2($elm$html$Html$Attributes$style, 'margin-top', '2px'),
									A2(
										$elm$core$List$cons,
										$elm$html$Html$Attributes$id(id),
										attributes)))),
						_List_Nil)
					]))
			]));
};
var $author$project$Views$RangeSlider$ratio = function (config) {
	return $author$project$Views$RangeSlider$layout(
		{
			attributes: _List_fromArray(
				[
					$elm$html$Html$Events$onInput(
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$toInt,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$map(
								function (x) {
									return $author$project$Data$Unit$ratio(x / 100);
								}),
							config.update))),
					$elm$html$Html$Attributes$min(
					$elm$core$String$fromInt(config.min)),
					$elm$html$Html$Attributes$max(
					$elm$core$String$fromInt(config.max)),
					$elm$html$Html$Attributes$step('1'),
					$elm$html$Html$Attributes$value(
					$elm$core$String$fromInt(
						$elm$core$Basics$round(
							$author$project$Data$Unit$ratioToFloat(config.value) * 100))),
					$elm$html$Html$Attributes$disabled(config.disabled)
				]),
			id: config.id,
			label: config.toString(config.value)
		});
};
var $author$project$Views$Textile$Step$airTransportRatioField = function (_v0) {
	var current = _v0.current;
	var updateAirTransportRatio = _v0.updateAirTransportRatio;
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$title('Part de transport aérien pour le transport entre la confection et l\'entrepôt en France.')
			]),
		_List_fromArray(
			[
				$author$project$Views$RangeSlider$ratio(
				{disabled: !current.enabled, id: 'airTransportRatio', max: 100, min: 0, toString: $author$project$Data$Textile$Step$airTransportRatioToString, update: updateAirTransportRatio, value: current.airTransportRatio})
			]));
};
var $author$project$Views$Icon$lock = $author$project$Views$Icon$icon('lock');
var $author$project$Views$Textile$Step$countryField = function (_v0) {
	var db = _v0.db;
	var current = _v0.current;
	var inputs = _v0.inputs;
	var updateCountry = _v0.updateCountry;
	var nonEditableCountry = function (content) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('fs-6 text-muted d-flex align-items-center gap-2 ')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('cursor-help'),
							$elm$html$Html$Attributes$title('Le pays n\'est pas modifiable à cet étape')
						]),
					_List_fromArray(
						[$author$project$Views$Icon$lock])),
					content
				]));
	};
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				function () {
				var _v1 = _Utils_Tuple2(current.label, current.editable);
				_v1$0:
				while (true) {
					if (!_v1.b) {
						if (_v1.a.$ === 'Material') {
							break _v1$0;
						} else {
							return nonEditableCountry(
								$elm$html$Html$text(current.country.name));
						}
					} else {
						if (_v1.a.$ === 'Material') {
							break _v1$0;
						} else {
							return $author$project$Views$CountrySelect$view(
								{
									attributes: _List_fromArray(
										[
											$elm$html$Html$Attributes$class('form-select'),
											$elm$html$Html$Attributes$disabled((!current.editable) || (!current.enabled)),
											$elm$html$Html$Events$onInput(
											A2(
												$elm$core$Basics$composeR,
												$author$project$Data$Country$codeFromString,
												updateCountry(current.label)))
										]),
									countries: db.countries,
									onSelect: updateCountry(current.label),
									selectedCountry: current.country.code
								});
						}
					}
				}
				var _v2 = _v1.a;
				return nonEditableCountry(
					function () {
						var _v3 = A2(
							$elm$core$Result$map,
							function ($) {
								return $.geographicOrigin;
							},
							$author$project$Data$Textile$Inputs$getMainMaterial(inputs.materials));
						if (_v3.$ === 'Ok') {
							var geographicOrigin = _v3.a;
							return $elm$html$Html$text(geographicOrigin + (' (' + (current.country.name + ')')));
						} else {
							return $elm$html$Html$text(current.country.name);
						}
					}());
			}()
			]));
};
var $author$project$Views$Textile$Step$daysOfWearInfo = function (inputs) {
	var info = A3($author$project$Data$Textile$Product$customDaysOfWear, inputs.quality, inputs.reparability, inputs.product.use);
	return A2(
		$elm$html$Html$small,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('fs-7 text-muted')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('pe-1')
					]),
				_List_fromArray(
					[$author$project$Views$Icon$info])),
				$author$project$Views$Format$days(info.daysOfWear),
				$elm$html$Html$text(' portés, '),
				$elm$html$Html$text(
				$elm$core$String$fromInt(info.useNbCycles)),
				$elm$html$Html$text(
				' cycle' + (((info.useNbCycles > 1) ? 's' : '') + ' d\'entretien'))
			]));
};
var $author$project$Views$Textile$Step$dyeingWeightingField = function (_v0) {
	var current = _v0.current;
	var updateDyeingWeighting = _v0.updateDyeingWeighting;
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$title(
				A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						['Procédé représentatif\u00A0: traitement très efficace des eaux usées.', 'Procédé majorant\u00A0: traitement inefficace des eaux usées.'])))
			]),
		_List_fromArray(
			[
				$author$project$Views$RangeSlider$ratio(
				{disabled: !current.enabled, id: 'dyeingWeighting', max: 100, min: 0, toString: $author$project$Data$Textile$Step$dyeingWeightingToString, update: updateDyeingWeighting, value: current.dyeingWeighting})
			]));
};
var $author$project$Views$Textile$Step$fadingField = function (_v0) {
	var inputs = _v0.inputs;
	var toggleDisabledFading = _v0.toggleDisabledFading;
	return inputs.product.making.fadable ? A2(
		$elm$html$Html$label,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('form-check form-switch form-check-label fs-7 pt-1 text-truncate'),
				$elm$html$Html$Attributes$title('Délavage')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$input,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$type_('checkbox'),
						$elm$html$Html$Attributes$class('form-check-input no-outline'),
						$elm$html$Html$Attributes$checked(
						!A2($elm$core$Maybe$withDefault, false, inputs.disabledFading)),
						$elm$html$Html$Events$onCheck(
						function (checked) {
							return toggleDisabledFading(!checked);
						})
					]),
				_List_Nil),
				_Utils_eq(
				inputs.disabledFading,
				$elm$core$Maybe$Just(true)) ? $elm$html$Html$text('Délavage désactivé') : $elm$html$Html$text('Délavage activé')
			])) : $elm$html$Html$text('');
};
var $ianmackenzie$elm_units$Energy$inKilojoules = function (energy) {
	return $ianmackenzie$elm_units$Energy$inJoules(energy) / 1000;
};
var $author$project$Views$Button$smallPillClasses = $author$project$Views$Button$pillClasses + ' text-secondary text-decoration-none btn-link p-0 ms-1';
var $author$project$Views$Button$smallPillLink = function (attrs) {
	return $elm$html$Html$a(
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Attributes$class($author$project$Views$Button$smallPillClasses),
			attrs));
};
var $author$project$Views$Textile$Step$inlineDocumentationLink = F2(
	function (_v0, path) {
		return A2(
			$author$project$Views$Button$smallPillLink,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$href(
					$author$project$Data$Gitbook$publicUrlFromPath(path)),
					$elm$html$Html$Attributes$target('_blank')
				]),
			_List_fromArray(
				[$author$project$Views$Icon$question]));
	});
var $author$project$Views$Format$kilowattHours = A2(
	$elm$core$Basics$composeR,
	$ianmackenzie$elm_units$Energy$inKilowattHours,
	A2($author$project$Views$Format$formatRichFloat, 2, 'kWh'));
var $author$project$Data$Textile$Step$makingWasteToString = function (_v0) {
	var makingWaste = _v0.a;
	var _v1 = $elm$core$Basics$round(makingWaste * 100);
	if (!_v1) {
		return 'Aucune perte en confection';
	} else {
		var p = _v1;
		return $elm$core$String$fromInt(p) + '% de pertes en confection';
	}
};
var $author$project$Data$Env$maxMakingWasteRatio = $author$project$Data$Unit$ratio(0.4);
var $author$project$Views$Textile$Step$makingWasteField = function (_v0) {
	var current = _v0.current;
	var inputs = _v0.inputs;
	var updateMakingWaste = _v0.updateMakingWaste;
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$title('Taux personnalisé de perte en confection, incluant notamment la découpe.')
			]),
		_List_fromArray(
			[
				$author$project$Views$RangeSlider$ratio(
				{
					disabled: !current.enabled,
					id: 'makingWaste',
					max: $elm$core$Basics$round(
						$author$project$Data$Unit$ratioToFloat($author$project$Data$Env$maxMakingWasteRatio) * 100),
					min: 0,
					toString: $author$project$Data$Textile$Step$makingWasteToString,
					update: updateMakingWaste,
					value: A2($elm$core$Maybe$withDefault, inputs.product.making.pcrWaste, current.makingWaste)
				})
			]));
};
var $author$project$Views$Format$megajoules = A2(
	$elm$core$Basics$composeR,
	$ianmackenzie$elm_units$Energy$inMegajoules,
	A2($author$project$Views$Format$formatRichFloat, 2, 'MJ'));
var $author$project$Views$RangeSlider$picking = function (config) {
	return $author$project$Views$RangeSlider$layout(
		{
			attributes: _List_fromArray(
				[
					$elm$html$Html$Events$onInput(
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$toInt,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$map($author$project$Data$Unit$pickPerMeter),
							config.update))),
					$elm$html$Html$Attributes$min(
					$elm$core$String$fromInt(
						$author$project$Data$Unit$pickPerMeterToInt($author$project$Data$Unit$minPickPerMeter))),
					$elm$html$Html$Attributes$max(
					$elm$core$String$fromInt(
						$author$project$Data$Unit$pickPerMeterToInt($author$project$Data$Unit$maxPickPerMeter))),
					$elm$html$Html$Attributes$step('1'),
					$elm$html$Html$Attributes$value(
					$elm$core$String$fromInt(
						$author$project$Data$Unit$pickPerMeterToInt(config.value))),
					$elm$html$Html$Attributes$disabled(config.disabled)
				]),
			id: config.id,
			label: config.toString(config.value)
		});
};
var $author$project$Data$Textile$Step$pickingToString = function (_v0) {
	var _int = _v0.a;
	return 'Duitage\u00A0: ' + ($elm$core$String$fromInt(_int) + '\u202Fduites/m');
};
var $author$project$Views$Textile$Step$pickingField = F2(
	function (_v0, defaultPicking) {
		var current = _v0.current;
		var updatePicking = _v0.updatePicking;
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$title(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							['Le duitage correspond au nombre de fils de trame (aussi appelés duites) par mètre', 'pour un tissu. Ce paramètre est pris en compte car il est connecté avec la consommation', 'électrique du métier à tisser. À grammage égal, plus le duitage est important,', 'plus la consommation d\'électricité est élevée.'])))
				]),
			_List_fromArray(
				[
					$author$project$Views$RangeSlider$picking(
					{
						disabled: !current.enabled,
						id: 'picking',
						toString: $author$project$Data$Textile$Step$pickingToString,
						update: updatePicking,
						value: A2($elm$core$Maybe$withDefault, defaultPicking, current.picking)
					})
				]));
	});
var $author$project$Views$RangeSlider$quality = function (config) {
	var fromFloat = A2($elm$core$Basics$composeR, $author$project$Data$Unit$qualityToFloat, $elm$core$String$fromFloat);
	return $author$project$Views$RangeSlider$layout(
		{
			attributes: _List_fromArray(
				[
					$elm$html$Html$Events$onInput(
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$toFloat,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$map($author$project$Data$Unit$quality),
							config.update))),
					$elm$html$Html$Attributes$min(
					fromFloat($author$project$Data$Unit$minQuality)),
					$elm$html$Html$Attributes$max(
					fromFloat($author$project$Data$Unit$maxQuality)),
					$elm$html$Html$Attributes$step('0.01'),
					$elm$html$Html$Attributes$value(
					fromFloat(config.value)),
					$elm$html$Html$Attributes$disabled(config.disabled)
				]),
			id: config.id,
			label: config.toString(config.value)
		});
};
var $author$project$Data$Textile$Step$qualityToString = function (_v0) {
	var _float = _v0.a;
	return 'Qualité intrinsèque\u00A0: ' + $elm$core$String$fromFloat(_float);
};
var $author$project$Views$Textile$Step$qualityField = function (_v0) {
	var current = _v0.current;
	var updateQuality = _v0.updateQuality;
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$title(
				A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						['Le coefficient de qualité intrinsèque représente à quel point le produit va durer dans le temps.', 'Il varie entre 0.67 (peu durable) et 1.45 (très durable).', 'Il est calculé à partir du résultat d’une série de tests de durabilité.', 'Il est utilisé en coefficient multiplicateur du nombre de jours d’utilisation du produit.'])))
			]),
		_List_fromArray(
			[
				$author$project$Views$RangeSlider$quality(
				{disabled: !current.enabled, id: 'quality', toString: $author$project$Data$Textile$Step$qualityToString, update: updateQuality, value: current.quality})
			]));
};
var $author$project$Views$RangeSlider$reparability = function (config) {
	var fromFloat = A2($elm$core$Basics$composeR, $author$project$Data$Unit$reparabilityToFloat, $elm$core$String$fromFloat);
	return $author$project$Views$RangeSlider$layout(
		{
			attributes: _List_fromArray(
				[
					$elm$html$Html$Events$onInput(
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$toFloat,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$map($author$project$Data$Unit$reparability),
							config.update))),
					$elm$html$Html$Attributes$min(
					fromFloat($author$project$Data$Unit$minReparability)),
					$elm$html$Html$Attributes$max(
					fromFloat($author$project$Data$Unit$maxReparability)),
					$elm$html$Html$Attributes$step('0.01'),
					$elm$html$Html$Attributes$value(
					fromFloat(config.value)),
					$elm$html$Html$Attributes$disabled(config.disabled)
				]),
			id: config.id,
			label: config.toString(config.value)
		});
};
var $author$project$Data$Textile$Step$reparabilityToString = function (_v0) {
	var _float = _v0.a;
	return 'Réparabilité\u00A0: ' + $elm$core$String$fromFloat(_float);
};
var $author$project$Views$Textile$Step$reparabilityField = function (_v0) {
	var current = _v0.current;
	var updateReparability = _v0.updateReparability;
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$title(
				A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						['Le coefficient de réparabilité représente à quel point le produit est réparable.', 'Il varie entre 1 (peu réparable) à 1.15 (très réparable).', 'Il est calculé à partir du résultat d’une série de tests de réparabilité.', 'Il est utilisé en coefficient multiplicateur du nombre de jours d’utilisation du produit.'])))
			]),
		_List_fromArray(
			[
				$author$project$Views$RangeSlider$reparability(
				{disabled: !current.enabled, id: 'reparability', toString: $author$project$Data$Textile$Step$reparabilityToString, update: updateReparability, value: current.reparability})
			]));
};
var $author$project$Views$Button$docsPillClasses = $author$project$Views$Button$pillClasses + ' btn-primary fs-7 py-0';
var $author$project$Views$Button$docsPill = function (attrs) {
	return $elm$html$Html$button(
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Attributes$class($author$project$Views$Button$docsPillClasses),
			attrs));
};
var $author$project$Views$Button$docsPillLink = function (attrs) {
	return $elm$html$Html$a(
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Attributes$class($author$project$Views$Button$docsPillClasses),
			attrs));
};
var $author$project$Data$Gitbook$Distribution = {$: 'Distribution'};
var $author$project$Data$Gitbook$Dyeing = {$: 'Dyeing'};
var $author$project$Data$Gitbook$EndOfLife = {$: 'EndOfLife'};
var $author$project$Data$Gitbook$Fabric = {$: 'Fabric'};
var $author$project$Data$Gitbook$Making = {$: 'Making'};
var $author$project$Data$Gitbook$MaterialAndSpinning = {$: 'MaterialAndSpinning'};
var $author$project$Data$Gitbook$Use = {$: 'Use'};
var $author$project$Data$Textile$Step$Label$toGitbookPath = function (label) {
	switch (label.$) {
		case 'Material':
			return $author$project$Data$Gitbook$MaterialAndSpinning;
		case 'Spinning':
			return $author$project$Data$Gitbook$MaterialAndSpinning;
		case 'Fabric':
			return $author$project$Data$Gitbook$Fabric;
		case 'Dyeing':
			return $author$project$Data$Gitbook$Dyeing;
		case 'Making':
			return $author$project$Data$Gitbook$Making;
		case 'Distribution':
			return $author$project$Data$Gitbook$Distribution;
		case 'Use':
			return $author$project$Data$Gitbook$Use;
		default:
			return $author$project$Data$Gitbook$EndOfLife;
	}
};
var $author$project$Views$Textile$Step$stepActions = F2(
	function (_v0, label) {
		var current = _v0.current;
		var viewMode = _v0.viewMode;
		var index = _v0.index;
		var toggleStepViewMode = _v0.toggleStepViewMode;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('StepActions btn-group')
				]),
			_List_fromArray(
				[
					A2(
					$author$project$Views$Button$docsPillLink,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('btn btn-primary py-1 rounded-end'),
							$elm$html$Html$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2('btn-secondary', !current.enabled)
								])),
							$elm$html$Html$Attributes$href(
							$author$project$Data$Gitbook$publicUrlFromPath(
								$author$project$Data$Textile$Step$Label$toGitbookPath(label))),
							$elm$html$Html$Attributes$title('Documentation'),
							$elm$html$Html$Attributes$target('_blank')
						]),
					_List_fromArray(
						[$author$project$Views$Icon$question])),
					A2(
					$author$project$Views$Button$docsPill,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('btn btn-primary py-1 rounded-start'),
							$elm$html$Html$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2('btn-secondary', !current.enabled)
								])),
							function () {
							if (viewMode.$ === 'Simple') {
								return $elm$html$Html$Attributes$title('Détailler cette étape');
							} else {
								return $elm$html$Html$Attributes$title('Affichage simplifié');
							}
						}(),
							$elm$html$Html$Events$onClick(
							toggleStepViewMode(index))
						]),
					_List_fromArray(
						[
							function () {
							switch (viewMode.$) {
								case 'Dataviz':
									return $author$project$Views$Icon$stats;
								case 'DetailedAll':
									return $author$project$Views$Icon$zoomout;
								case 'DetailedStep':
									var currentIndex = viewMode.a;
									return _Utils_eq(index, currentIndex) ? $author$project$Views$Icon$zoomout : $author$project$Views$Icon$zoomin;
								default:
									return $author$project$Views$Icon$zoomin;
							}
						}()
						]))
				]));
	});
var $author$project$Data$Textile$Step$displayLabel = F2(
	function (_v0, label) {
		var knitted = _v0.knitted;
		var fadable = _v0.fadable;
		var _v1 = _Utils_Tuple3(label, knitted, fadable);
		switch (_v1.a.$) {
			case 'Making':
				if (_v1.c) {
					var _v2 = _v1.a;
					return 'Confection & Délavage';
				} else {
					var _v3 = _v1.a;
					return 'Confection';
				}
			case 'Fabric':
				if (_v1.b) {
					var _v4 = _v1.a;
					return 'Tricotage';
				} else {
					var _v5 = _v1.a;
					return 'Tissage';
				}
			default:
				return $author$project$Data$Textile$Step$Label$toString(label);
		}
	});
var $author$project$Views$Textile$Step$stepHeader = function (_v0) {
	var current = _v0.current;
	var inputs = _v0.inputs;
	var toggleStep = _v0.toggleStep;
	return A2(
		$elm$html$Html$label,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('d-flex align-items-center cursor-pointer gap-2'),
				$elm$html$Html$Attributes$classList(
				_List_fromArray(
					[
						_Utils_Tuple2('text-secondary', !current.enabled)
					])),
				$elm$html$Html$Attributes$title(
				current.enabled ? 'Étape activée, cliquez pour la désactiver' : 'Étape desactivée, cliquez pour la réactiver')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$input,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$type_('checkbox'),
						$elm$html$Html$Attributes$class('form-check-input mt-0 no-outline'),
						A2($elm$html$Html$Attributes$attribute, 'role', 'switch'),
						$elm$html$Html$Attributes$checked(current.enabled),
						$elm$html$Html$Events$onCheck(
						$elm$core$Basics$always(
							toggleStep(current.label)))
					]),
				_List_Nil),
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('StepIcon bg-primary text-white rounded-pill'),
						$elm$html$Html$Attributes$classList(
						_List_fromArray(
							[
								_Utils_Tuple2('bg-secondary', !current.enabled)
							]))
					]),
				_List_fromArray(
					[
						$author$project$Views$Textile$Step$stepIcon(current.label)
					])),
				$elm$html$Html$text(
				A2(
					$author$project$Data$Textile$Step$displayLabel,
					{
						fadable: inputs.product.making.fadable,
						knitted: $author$project$Data$Textile$Product$isKnitted(inputs.product)
					},
					current.label))
			]));
};
var $author$project$Views$RangeSlider$surfaceMass = function (config) {
	return $author$project$Views$RangeSlider$layout(
		{
			attributes: _List_fromArray(
				[
					$elm$html$Html$Events$onInput(
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$toInt,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$map($author$project$Data$Unit$surfaceMass),
							config.update))),
					$elm$html$Html$Attributes$min(
					$elm$core$String$fromInt(
						$author$project$Data$Unit$surfaceMassToInt($author$project$Data$Unit$minSurfaceMass))),
					$elm$html$Html$Attributes$max(
					$elm$core$String$fromInt(
						$author$project$Data$Unit$surfaceMassToInt($author$project$Data$Unit$maxSurfaceMass))),
					$elm$html$Html$Attributes$step('1'),
					$elm$html$Html$Attributes$value(
					$elm$core$String$fromInt(
						$author$project$Data$Unit$surfaceMassToInt(config.value))),
					$elm$html$Html$Attributes$disabled(config.disabled)
				]),
			id: config.id,
			label: config.toString(config.value)
		});
};
var $author$project$Data$Textile$Step$surfaceMassToString = function (_v0) {
	var _int = _v0.a;
	return 'Grammage\u00A0: ' + ($elm$core$String$fromInt(_int) + '\u202Fgr/m²');
};
var $author$project$Views$Textile$Step$surfaceMassField = F2(
	function (_v0, defaultSurfaceMass) {
		var current = _v0.current;
		var updateSurfaceMass = _v0.updateSurfaceMass;
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$title(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							['Le grammage de l\'étoffe, exprimé en gr/m², représente sa masse surfacique.'])))
				]),
			_List_fromArray(
				[
					$author$project$Views$RangeSlider$surfaceMass(
					{
						disabled: !current.enabled,
						id: 'surface-density',
						toString: $author$project$Data$Textile$Step$surfaceMassToString,
						update: updateSurfaceMass,
						value: A2($elm$core$Maybe$withDefault, defaultSurfaceMass, current.surfaceMass)
					})
				]));
	});
var $author$project$Data$Transport$totalKm = function (_v0) {
	var road = _v0.road;
	var sea = _v0.sea;
	var air = _v0.air;
	return $ianmackenzie$elm_units$Length$inKilometers(
		$ianmackenzie$elm_units$Quantity$sum(
			_List_fromArray(
				[road, sea, air])));
};
var $author$project$Views$Textile$Step$viewProcessInfo = function (processName) {
	if (processName.$ === 'Just') {
		var name = processName.a;
		return A2(
			$elm$html$Html$li,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('list-group-item text-muted text-truncate'),
					$elm$html$Html$Attributes$title(name),
					A2($elm$html$Html$Attributes$style, 'cursor', 'help')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(name)
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Views$Textile$Step$detailedView = function (config) {
	var inputs = config.inputs;
	var funit = config.funit;
	var impact = config.impact;
	var daysOfWear = config.daysOfWear;
	var next = config.next;
	var current = config.current;
	var transportLabel = function () {
		if (next.$ === 'Just') {
			var country = next.a.country;
			return 'Transport ' + (current.country.name + ('\u202F→\u202F' + country.name));
		} else {
			return 'Transport';
		}
	}();
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('card-group')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('card')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('card-header d-flex justify-content-between align-items-center')
							]),
						_List_fromArray(
							[
								$author$project$Views$Textile$Step$stepHeader(config),
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('d-block d-sm-none')
									]),
								_List_fromArray(
									[
										A2($author$project$Views$Textile$Step$stepActions, config, current.label)
									]))
							])),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('StepBody list-group list-group-flush fs-7'),
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('disabled', !current.enabled)
									]))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$li,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('list-group-item text-muted')
									]),
								_List_fromArray(
									[
										$author$project$Views$Textile$Step$countryField(config)
									])),
								$author$project$Views$Textile$Step$viewProcessInfo(current.processInfo.countryElec),
								$author$project$Views$Textile$Step$viewProcessInfo(current.processInfo.countryHeat),
								$author$project$Views$Textile$Step$viewProcessInfo(current.processInfo.distribution),
								$author$project$Views$Textile$Step$viewProcessInfo(current.processInfo.useIroning),
								$author$project$Views$Textile$Step$viewProcessInfo(current.processInfo.useNonIroning),
								$author$project$Views$Textile$Step$viewProcessInfo(current.processInfo.passengerCar),
								$author$project$Views$Textile$Step$viewProcessInfo(current.processInfo.endOfLife),
								$author$project$Views$Textile$Step$viewProcessInfo(current.processInfo.fabric),
								$author$project$Views$Textile$Step$viewProcessInfo(current.processInfo.making),
								(inputs.product.making.fadable && (!_Utils_eq(
								inputs.disabledFading,
								$elm$core$Maybe$Just(true)))) ? $author$project$Views$Textile$Step$viewProcessInfo(current.processInfo.fading) : $elm$html$Html$text('')
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('StepBody card-body py-2 text-muted'),
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('disabled', !current.enabled)
									]))
							]),
						function () {
							var _v0 = current.label;
							switch (_v0.$) {
								case 'Fabric':
									var _v1 = inputs.product.fabric;
									if (_v1.$ === 'Knitted') {
										return _List_Nil;
									} else {
										var defaultPicking = _v1.b;
										var defaultSurfaceMass = _v1.c;
										return _List_fromArray(
											[
												A2($author$project$Views$Textile$Step$pickingField, config, defaultPicking),
												A2($author$project$Views$Textile$Step$surfaceMassField, config, defaultSurfaceMass)
											]);
									}
								case 'Dyeing':
									return _List_fromArray(
										[
											$author$project$Views$Textile$Step$dyeingWeightingField(config)
										]);
								case 'Making':
									return _List_fromArray(
										[
											$author$project$Views$Textile$Step$makingWasteField(config),
											$author$project$Views$Textile$Step$airTransportRatioField(config),
											$author$project$Views$Textile$Step$fadingField(config)
										]);
								case 'Use':
									return _List_fromArray(
										[
											$author$project$Views$Textile$Step$qualityField(config),
											$author$project$Views$Textile$Step$reparabilityField(config),
											$author$project$Views$Textile$Step$daysOfWearInfo(inputs)
										]);
								default:
									return _List_Nil;
							}
						}())
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('card text-center mb-0')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('card-header d-flex justify-content-end align-items-center text-muted')
							]),
						_List_fromArray(
							[
								($author$project$Data$Unit$impactToFloat(
								A2($author$project$Data$Impact$getImpact, impact.trigram, current.impacts)) > 0) ? A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('fw-bold flex-fill')
									]),
								_List_fromArray(
									[
										A4($author$project$Views$Format$formatImpact, funit, impact, daysOfWear, current.impacts)
									])) : A2(
								$elm$html$Html$span,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('\u00A0')
									])),
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('d-none d-sm-block')
									]),
								_List_fromArray(
									[
										A2($author$project$Views$Textile$Step$stepActions, config, current.label)
									]))
							])),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('StepBody list-group list-group-flush fs-7'),
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('disabled', !current.enabled)
									]))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$li,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('list-group-item text-muted d-flex justify-content-around')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$span,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text('Masse entrante'),
												A2($elm$html$Html$br, _List_Nil, _List_Nil),
												$author$project$Views$Format$kg(current.inputMass)
											])),
										A2(
										$elm$html$Html$span,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text('Masse sortante'),
												A2($elm$html$Html$br, _List_Nil, _List_Nil),
												$author$project$Views$Format$kg(current.outputMass)
											])),
										A2(
										$elm$html$Html$span,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text('Perte'),
												A2($elm$html$Html$br, _List_Nil, _List_Nil),
												$author$project$Views$Format$kg(current.waste),
												A2($author$project$Views$Textile$Step$inlineDocumentationLink, config, $author$project$Data$Gitbook$Waste)
											]))
									])),
								(($ianmackenzie$elm_units$Energy$inKilojoules(current.heat) > 0) || ($ianmackenzie$elm_units$Energy$inKilowattHours(current.kwh) > 0)) ? A2(
								$elm$html$Html$li,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('list-group-item text-muted d-flex justify-content-around')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('d-flex align-items-center')
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$span,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('me-1')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('Chaleur')
													])),
												$author$project$Views$Format$megajoules(current.heat),
												A2($author$project$Views$Textile$Step$inlineDocumentationLink, config, $author$project$Data$Gitbook$Heat)
											])),
										A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('d-flex align-items-center')
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$span,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('me-1')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('Électricité')
													])),
												$author$project$Views$Format$kilowattHours(current.kwh),
												A2($author$project$Views$Textile$Step$inlineDocumentationLink, config, $author$project$Data$Gitbook$Electricity)
											]))
									])) : $elm$html$Html$text(''),
								($author$project$Data$Transport$totalKm(current.transport) > 0) ? A2(
								$elm$html$Html$li,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('list-group-item text-muted')
									]),
								_List_fromArray(
									[
										A2(
										$author$project$Views$Transport$view,
										{airTransportLabel: current.processInfo.airTransport, fullWidth: true, roadTransportLabel: current.processInfo.roadTransport, seaTransportLabel: current.processInfo.seaTransport},
										current.transport)
									])) : $elm$html$Html$text(''),
								A2(
								$elm$html$Html$li,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('list-group-item text-muted')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('d-flex justify-content-center align-items-center')
											]),
										($author$project$Data$Transport$totalKm(current.transport) > 0) ? _List_fromArray(
											[
												A2(
												$elm$html$Html$strong,
												_List_Nil,
												_List_fromArray(
													[
														$elm$html$Html$text(transportLabel + '\u00A0:\u00A0')
													])),
												A4($author$project$Views$Format$formatImpact, funit, impact, daysOfWear, current.transport.impacts),
												A2($author$project$Views$Textile$Step$inlineDocumentationLink, config, $author$project$Data$Gitbook$Transport)
											]) : _List_fromArray(
											[
												$elm$html$Html$text('Pas de transport')
											]))
									]))
							]))
					]))
			]));
};
var $author$project$Views$Textile$Step$simpleView = function (config) {
	var funit = config.funit;
	var inputs = config.inputs;
	var daysOfWear = config.daysOfWear;
	var impact = config.impact;
	var current = config.current;
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('card')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('card-header')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('row')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('col-6')
									]),
								_List_fromArray(
									[
										$author$project$Views$Textile$Step$stepHeader(config)
									])),
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('col-6 text-end')
									]),
								_List_fromArray(
									[
										A2($author$project$Views$Textile$Step$stepActions, config, current.label)
									]))
							]))
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('StepBody card-body row align-items-center'),
						$elm$html$Html$Attributes$classList(
						_List_fromArray(
							[
								_Utils_Tuple2('disabled', !current.enabled)
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('col-sm-6 col-lg-7')
							]),
						_List_fromArray(
							[
								$author$project$Views$Textile$Step$countryField(config),
								function () {
								var _v0 = current.label;
								switch (_v0.$) {
									case 'Fabric':
										var _v1 = inputs.product.fabric;
										if (_v1.$ === 'Knitted') {
											return $elm$html$Html$text('');
										} else {
											var defaultPicking = _v1.b;
											var defaultSurfaceMass = _v1.c;
											return A2(
												$elm$html$Html$div,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('mt-2 fs-7 text-muted')
													]),
												_List_fromArray(
													[
														A2($author$project$Views$Textile$Step$pickingField, config, defaultPicking),
														A2($author$project$Views$Textile$Step$surfaceMassField, config, defaultSurfaceMass)
													]));
										}
									case 'Dyeing':
										return A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('mt-2')
												]),
											_List_fromArray(
												[
													$author$project$Views$Textile$Step$dyeingWeightingField(config)
												]));
									case 'Making':
										return A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('mt-2')
												]),
											_List_fromArray(
												[
													$author$project$Views$Textile$Step$makingWasteField(config),
													$author$project$Views$Textile$Step$airTransportRatioField(config),
													$author$project$Views$Textile$Step$fadingField(config)
												]));
									case 'Use':
										return A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('mt-2')
												]),
											_List_fromArray(
												[
													$author$project$Views$Textile$Step$qualityField(config),
													$author$project$Views$Textile$Step$reparabilityField(config),
													$author$project$Views$Textile$Step$daysOfWearInfo(inputs)
												]));
									default:
										return $elm$html$Html$text('');
								}
							}()
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('col-sm-6 col-lg-5 text-center text-muted')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_Nil,
								_List_fromArray(
									[
										(!_Utils_eq(current.label, $author$project$Data$Textile$Step$Label$Distribution)) ? A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('fs-3 fw-normal text-secondary')
											]),
										_List_fromArray(
											[
												A4($author$project$Views$Format$formatImpact, funit, impact, daysOfWear, current.impacts)
											])) : $elm$html$Html$text(''),
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('fs-7')
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$span,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('me-1 align-bottom')
													]),
												_List_fromArray(
													[$author$project$Views$Icon$info])),
												$elm$html$Html$text('Transport\u00A0'),
												A4($author$project$Views$Format$formatImpact, funit, impact, daysOfWear, current.transport.impacts)
											]))
									]))
							]))
					]))
			]));
};
var $author$project$Views$Textile$Step$view = function (config) {
	var _v0 = config.viewMode;
	switch (_v0.$) {
		case 'Dataviz':
			return $elm$html$Html$text('');
		case 'DetailedAll':
			return $author$project$Views$Textile$Step$detailedView(config);
		case 'DetailedStep':
			var index = _v0.a;
			return _Utils_eq(config.index, index) ? $author$project$Views$Textile$Step$detailedView(config) : $author$project$Views$Textile$Step$simpleView(config);
		default:
			return $author$project$Views$Textile$Step$simpleView(config);
	}
};
var $author$project$Page$Textile$Simulator$lifeCycleStepsView = F3(
	function (db, _v0, simulator) {
		var viewMode = _v0.viewMode;
		var funit = _v0.funit;
		var impact = _v0.impact;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('pt-1')
				]),
			A2(
				$elm$core$List$intersperse,
				$author$project$Views$Component$DownArrow$standard,
				$elm$core$Array$toList(
					A2(
						$elm$core$Array$indexedMap,
						F2(
							function (index, current) {
								return $author$project$Views$Textile$Step$view(
									{
										current: current,
										daysOfWear: simulator.daysOfWear,
										db: db,
										funit: funit,
										impact: impact,
										index: index,
										inputs: simulator.inputs,
										next: A2($author$project$Data$Textile$LifeCycle$getNextEnabledStep, current.label, simulator.lifeCycle),
										toggleDisabledFading: $author$project$Page$Textile$Simulator$ToggleDisabledFading,
										toggleStep: $author$project$Page$Textile$Simulator$ToggleStep,
										toggleStepViewMode: $author$project$Page$Textile$Simulator$ToggleStepViewMode,
										updateAirTransportRatio: $author$project$Page$Textile$Simulator$UpdateAirTransportRatio,
										updateCountry: $author$project$Page$Textile$Simulator$UpdateStepCountry,
										updateDyeingWeighting: $author$project$Page$Textile$Simulator$UpdateDyeingWeighting,
										updateMakingWaste: $author$project$Page$Textile$Simulator$UpdateMakingWaste,
										updatePicking: $author$project$Page$Textile$Simulator$UpdatePicking,
										updateQuality: $author$project$Page$Textile$Simulator$UpdateQuality,
										updateReparability: $author$project$Page$Textile$Simulator$UpdateReparability,
										updateSurfaceMass: $author$project$Page$Textile$Simulator$UpdateSurfaceMass,
										viewMode: viewMode
									});
							}),
						simulator.lifeCycle))));
	});
var $author$project$Page$Textile$Simulator$DeleteSavedSimulation = function (a) {
	return {$: 'DeleteSavedSimulation', a: a};
};
var $author$project$Page$Textile$Simulator$OpenComparator = {$: 'OpenComparator'};
var $author$project$Page$Textile$Simulator$SaveSimulation = {$: 'SaveSimulation'};
var $author$project$Page$Textile$Simulator$ShareLink = {$: 'ShareLink'};
var $author$project$Page$Textile$Simulator$SwitchLinksTab = function (a) {
	return {$: 'SwitchLinksTab', a: a};
};
var $author$project$Page$Textile$Simulator$UpdateSimulationName = function (a) {
	return {$: 'UpdateSimulationName', a: a};
};
var $elm$html$Html$Attributes$pattern = $elm$html$Html$Attributes$stringProperty('pattern');
var $elm$html$Html$Attributes$required = $elm$html$Html$Attributes$boolProperty('required');
var $author$project$Views$Textile$SavedSimulation$savedSimulationView = F2(
	function (_v0, savedSimulation) {
		var session = _v0.session;
		var impact = _v0.impact;
		var funit = _v0.funit;
		var viewMode = _v0.viewMode;
		var _delete = _v0._delete;
		var name = savedSimulation.name;
		var query = savedSimulation.query;
		var simulationLink = _Utils_ap(
			session.clientUrl,
			$author$project$Route$toString(
				A4(
					$author$project$Route$TextileSimulator,
					impact.trigram,
					funit,
					viewMode,
					$elm$core$Maybe$Just(query))));
		return A2(
			$elm$html$Html$li,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('list-group-item d-flex justify-content-between align-items-center gap-1'),
					$elm$html$Html$Attributes$classList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'active',
							_Utils_eq(query, session.query))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('text-truncate'),
							$elm$html$Html$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'active text-white',
									_Utils_eq(query, session.query))
								])),
							$elm$html$Html$Attributes$href(simulationLink),
							$elm$html$Html$Attributes$title(
							A2($author$project$Views$Textile$SavedSimulation$detailsTooltip, session, savedSimulation))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(name)
						])),
					A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('button'),
							$elm$html$Html$Attributes$class('btn btn-sm btn-danger'),
							$elm$html$Html$Events$onClick(
							_delete(savedSimulation))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('me-1')
								]),
							_List_fromArray(
								[$author$project$Views$Icon$trash])),
							$elm$html$Html$text('Supprimer')
						]))
				]));
	});
var $author$project$Views$Textile$SavedSimulation$savedSimulationListView = function (config) {
	var compare = config.compare;
	var session = config.session;
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('card-header border-top d-flex justify-content-between align-items-center')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('Simulations sauvegardées')
							])),
						A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('btn btn-sm btn-primary'),
								$elm$html$Html$Attributes$title('Comparer vos simulations sauvegardées'),
								$elm$html$Html$Attributes$disabled(
								$elm$core$List$length(session.store.savedSimulations) < 2),
								$elm$html$Html$Events$onClick(compare)
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('me-1')
									]),
								_List_fromArray(
									[$author$project$Views$Icon$stats])),
								$elm$html$Html$text('Comparer')
							]))
					])),
				(!$elm$core$List$length(session.store.savedSimulations)) ? A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('card-body form-text fs-7 pt-2')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Pas de simulations sauvegardées sur cet ordinateur')
					])) : A2(
				$elm$html$Html$ul,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('list-group list-group-flush rounded-bottom overflow-auto'),
						A2($elm$html$Html$Attributes$style, 'max-height', '50vh')
					]),
				A2(
					$elm$core$List$map,
					$author$project$Views$Textile$SavedSimulation$savedSimulationView(config),
					session.store.savedSimulations))
			]));
};
var $author$project$Views$Textile$SavedSimulation$manager = function (config) {
	var session = config.session;
	var simulationName = config.simulationName;
	var _v0 = _Utils_Tuple2(
		A2(
			$elm$core$List$member,
			session.query,
			A2(
				$elm$core$List$map,
				function ($) {
					return $.query;
				},
				session.store.savedSimulations)),
		A2(
			$elm$core$List$member,
			simulationName,
			A2(
				$elm$core$List$map,
				function ($) {
					return $.name;
				},
				session.store.savedSimulations)));
	var queryExists = _v0.a;
	var nameExists = _v0.b;
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('card-body pb-2')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$form,
						_List_fromArray(
							[
								$elm$html$Html$Events$onSubmit(config.save)
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('input-group')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$input,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$type_('text'),
												$elm$html$Html$Attributes$class('form-control'),
												$elm$html$Html$Events$onInput(config.update),
												$elm$html$Html$Attributes$placeholder('Nom de la simulation'),
												$elm$html$Html$Attributes$value(simulationName),
												$elm$html$Html$Attributes$required(true),
												$elm$html$Html$Attributes$pattern('^(?!\\s*$).+')
											]),
										_List_Nil),
										A2(
										$elm$html$Html$button,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$type_('submit'),
												$elm$html$Html$Attributes$class('btn btn-primary'),
												$elm$html$Html$Attributes$title('Sauvegarder la simulation dans le stockage local au navigateur'),
												$elm$html$Html$Attributes$disabled(queryExists || nameExists)
											]),
										_List_fromArray(
											[$author$project$Views$Icon$plus]))
									]))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('form-text fs-7 pb-0')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Donnez un nom à cette simulation pour la retrouver plus tard')
							]))
					])),
				$author$project$Views$Textile$SavedSimulation$savedSimulationListView(config)
			]));
};
var $author$project$Page$Textile$Simulator$CopyToClipBoard = function (a) {
	return {$: 'CopyToClipBoard', a: a};
};
var $author$project$Views$Icon$clipboard = $author$project$Views$Icon$icon('clipboard');
var $author$project$Page$Textile$Simulator$shareLinkView = F2(
	function (session, _v0) {
		var impact = _v0.impact;
		var funit = _v0.funit;
		var shareableLink = _Utils_ap(
			session.clientUrl,
			$author$project$Route$toString(
				A4(
					$author$project$Route$TextileSimulator,
					impact.trigram,
					funit,
					$author$project$Page$Textile$Simulator$ViewMode$Simple,
					$elm$core$Maybe$Just(session.query))));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('card-body')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('input-group')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$input,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$type_('url'),
									$elm$html$Html$Attributes$class('form-control'),
									$elm$html$Html$Attributes$value(shareableLink)
								]),
							_List_Nil),
							A2(
							$elm$html$Html$button,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('input-group-text'),
									$elm$html$Html$Attributes$title('Copier l\'adresse'),
									$elm$html$Html$Events$onClick(
									$author$project$Page$Textile$Simulator$CopyToClipBoard(shareableLink))
								]),
							_List_fromArray(
								[$author$project$Views$Icon$clipboard]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('form-text fs-7')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Copiez cette adresse pour partager ou sauvegarder votre simulation')
						]))
				]));
	});
var $author$project$Page$Textile$Simulator$linksView = F2(
	function (session, model) {
		var linksTab = model.linksTab;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('card shadow-sm')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('card-header')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$ul,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('nav nav-tabs justify-content-end card-header-tabs')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$li,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('nav-item')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$button,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('btn btn-text nav-link rounded-0 rounded-top no-outline'),
													$elm$html$Html$Attributes$classList(
													_List_fromArray(
														[
															_Utils_Tuple2(
															'active',
															_Utils_eq(linksTab, $author$project$Page$Textile$Simulator$SaveLink))
														])),
													$elm$html$Html$Events$onClick(
													$author$project$Page$Textile$Simulator$SwitchLinksTab($author$project$Page$Textile$Simulator$SaveLink))
												]),
											_List_fromArray(
												[
													$elm$html$Html$text('Sauvegarder')
												]))
										])),
									A2(
									$elm$html$Html$li,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('nav-item')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$button,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('btn btn-text nav-link rounded-0 rounded-top no-outline'),
													$elm$html$Html$Attributes$classList(
													_List_fromArray(
														[
															_Utils_Tuple2(
															'active',
															_Utils_eq(linksTab, $author$project$Page$Textile$Simulator$ShareLink))
														])),
													$elm$html$Html$Events$onClick(
													$author$project$Page$Textile$Simulator$SwitchLinksTab($author$project$Page$Textile$Simulator$ShareLink))
												]),
											_List_fromArray(
												[
													$elm$html$Html$text('Partager')
												]))
										]))
								]))
						])),
					function () {
					if (linksTab.$ === 'ShareLink') {
						return A2($author$project$Page$Textile$Simulator$shareLinkView, session, model);
					} else {
						return $author$project$Views$Textile$SavedSimulation$manager(
							{compare: $author$project$Page$Textile$Simulator$OpenComparator, _delete: $author$project$Page$Textile$Simulator$DeleteSavedSimulation, funit: model.funit, impact: model.impact, save: $author$project$Page$Textile$Simulator$SaveSimulation, session: session, simulationName: model.simulationName, update: $author$project$Page$Textile$Simulator$UpdateSimulationName, viewMode: model.viewMode});
					}
				}()
				]));
	});
var $author$project$Page$Textile$Simulator$UpdateMassInput = function (a) {
	return {$: 'UpdateMassInput', a: a};
};
var $author$project$Page$Textile$Simulator$massField = function (massInput) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$label,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$for('mass'),
						$elm$html$Html$Attributes$class('form-label fw-bold')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Masse du produit fini')
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('input-group')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$input,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$type_('number'),
								$elm$html$Html$Attributes$class('form-control'),
								$elm$html$Html$Attributes$id('mass'),
								$elm$html$Html$Attributes$min('0.05'),
								$elm$html$Html$Attributes$step('0.05'),
								$elm$html$Html$Attributes$value(massInput),
								$elm$html$Html$Events$onInput($author$project$Page$Textile$Simulator$UpdateMassInput)
							]),
						_List_Nil),
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('input-group-text')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('kg')
							]))
					]))
			]));
};
var $author$project$Page$Textile$Simulator$UpdateProduct = function (a) {
	return {$: 'UpdateProduct', a: a};
};
var $author$project$Page$Textile$Simulator$productField = F2(
	function (db, product) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$for('product'),
							$elm$html$Html$Attributes$class('form-label fw-bold')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Type de produit')
						])),
					A2(
					$elm$html$Html$select,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$id('product'),
							$elm$html$Html$Attributes$class('form-select'),
							$elm$html$Html$Events$onInput(
							A2($elm$core$Basics$composeR, $author$project$Data$Textile$Product$Id, $author$project$Page$Textile$Simulator$UpdateProduct))
						]),
					A2(
						$elm$core$List$map,
						function (p) {
							return A2(
								$elm$html$Html$option,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$value(
										$author$project$Data$Textile$Product$idToString(p.id)),
										$elm$html$Html$Attributes$selected(
										_Utils_eq(product.id, p.id))
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(p.name)
									]));
						},
						db.products))
				]));
	});
var $author$project$Views$Dataviz$chartTextColor = '#5d5b7e';
var $author$project$Views$Dataviz$fillLabels = function (data) {
	var createLabel = function (_v0) {
		var _v1 = _v0.a;
		var label = _v1.a;
		var xPosition = _v0.b;
		return A4(
			$terezka$elm_charts$Chart$labelAt,
			$terezka$elm_charts$Chart$Attributes$percent(xPosition),
			$terezka$elm_charts$Chart$Attributes$percent(0),
			_List_fromArray(
				[
					$terezka$elm_charts$Chart$Attributes$rotate(90),
					$terezka$elm_charts$Chart$Attributes$color($author$project$Views$Dataviz$chartTextColor),
					$terezka$elm_charts$Chart$Attributes$attrs(
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fontSize('14'),
							$elm$svg$Svg$Attributes$style('text-anchor: start')
						]))
				]),
			_List_fromArray(
				[
					$elm$svg$Svg$text(label)
				]));
	};
	var baseWidth = 100 / A3(
		$elm$core$Basics$clamp,
		1,
		100,
		$elm$core$List$length(data));
	var leftPadding = baseWidth / 5;
	return A2(
		$elm$core$List$map,
		createLabel,
		A2(
			$elm$core$List$indexedMap,
			F2(
				function (i, entry) {
					return _Utils_Tuple2(entry, (i * baseWidth) + leftPadding);
				}),
			data));
};
var $author$project$Views$Dataviz$chart = function (data) {
	var yLabels = _List_fromArray(
		[
			$terezka$elm_charts$Chart$yLabels(
			_List_fromArray(
				[
					$terezka$elm_charts$Chart$Attributes$withGrid,
					$terezka$elm_charts$Chart$Attributes$fontSize(12),
					$terezka$elm_charts$Chart$Attributes$color($author$project$Views$Dataviz$chartTextColor),
					$terezka$elm_charts$Chart$Attributes$format(
					function (v) {
						return $elm$core$String$fromFloat(v) + '%';
					})
				]))
		]);
	var xLabels = _List_Nil;
	var verticalLabels = $author$project$Views$Dataviz$fillLabels(data);
	var legends = _List_fromArray(
		[
			A4(
			$terezka$elm_charts$Chart$legendsAt,
			function ($) {
				return $.min;
			},
			function ($) {
				return $.max;
			},
			_List_fromArray(
				[
					$terezka$elm_charts$Chart$Attributes$alignMiddle,
					$terezka$elm_charts$Chart$Attributes$htmlAttrs(
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('ComparatorChartLegends')
						])),
					$terezka$elm_charts$Chart$Attributes$moveDown(20)
				]),
			_List_fromArray(
				[
					$terezka$elm_charts$Chart$Attributes$spacing(3),
					$terezka$elm_charts$Chart$Attributes$fontSize(12),
					$terezka$elm_charts$Chart$Attributes$htmlAttrs(
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('ComparatorChartLegend')
						]))
				]))
		]);
	var bars = _List_fromArray(
		[
			A3(
			$terezka$elm_charts$Chart$bars,
			_List_fromArray(
				[
					$terezka$elm_charts$Chart$Attributes$margin(0.29)
				]),
			_List_fromArray(
				[
					$terezka$elm_charts$Chart$stacked(
					A2(
						$elm$core$List$map,
						function (_v1) {
							var getter = _v1.a;
							var label = _v1.b;
							return A2(
								$terezka$elm_charts$Chart$named,
								label,
								A2($terezka$elm_charts$Chart$bar, getter, _List_Nil));
						},
						$author$project$Views$Dataviz$stepsLegendData(
							{knitted: false})))
				]),
			A2(
				$elm$core$List$map,
				function (_v0) {
					var steps = _v0.b;
					var getStepShare = function (name) {
						return A2(
							$elm$core$Maybe$withDefault,
							0,
							A2(
								$elm$core$Maybe$map,
								$elm$core$Tuple$second,
								$elm$core$List$head(
									A2(
										$elm$core$List$filter,
										A2(
											$elm$core$Basics$composeR,
											$elm$core$Tuple$first,
											$elm$core$Basics$eq(name)),
										steps))));
					};
					return {
						dyeing: getStepShare('Teinture'),
						endOfLife: getStepShare('Fin de vie'),
						knitted: false,
						making: getStepShare('Confection'),
						material: getStepShare('Matière'),
						score: 0,
						spinning: getStepShare('Filature'),
						transport: getStepShare('Transports'),
						use: getStepShare('Utilisation'),
						weavingKnitting: getStepShare('Tissage & Tricotage')
					};
				},
				data))
		]);
	return A2(
		$terezka$elm_charts$Chart$chart,
		_List_fromArray(
			[
				$terezka$elm_charts$Chart$Attributes$htmlAttrs(
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('ComparatorChart')
					])),
				$terezka$elm_charts$Chart$Attributes$width(800),
				$terezka$elm_charts$Chart$Attributes$height(400),
				$terezka$elm_charts$Chart$Attributes$margin(
				{bottom: 10, left: 38, right: -10, top: 20})
			]),
		$elm$core$List$concat(
			_List_fromArray(
				[xLabels, yLabels, bars, legends, verticalLabels])));
};
var $author$project$Data$Impact$getPefPieData = function (defs) {
	var encode = function (entry) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'name',
					$elm$json$Json$Encode$string(entry.name)),
					_Utils_Tuple2(
					'y',
					$elm$json$Json$Encode$float(entry.value)),
					_Utils_Tuple2(
					'color',
					$elm$json$Json$Encode$string(entry.color))
				]));
	};
	return A2(
		$elm$core$Basics$composeR,
		A2(
			$turboMaCk$any_dict$Dict$Any$foldl,
			F3(
				function (trigram, impact, acc) {
					var _v0 = A2($author$project$Data$Impact$getDefinition, trigram, defs);
					if (_v0.$ === 'Ok') {
						var label = _v0.a.label;
						var pefData = _v0.a.pefData;
						if (pefData.$ === 'Just') {
							var normalization = pefData.a.normalization;
							var weighting = pefData.a.weighting;
							var color = pefData.a.color;
							return A2(
								$elm$core$List$cons,
								{
									color: color + 'bb',
									name: label,
									value: $author$project$Data$Unit$impactToFloat(
										A3($author$project$Data$Unit$impactPefScore, normalization, weighting, impact))
								},
								acc);
						} else {
							return acc;
						}
					} else {
						return acc;
					}
				}),
			_List_Nil),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$sortBy(
				function ($) {
					return $.value;
				}),
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$reverse,
				A2(
					$elm$core$Basics$composeR,
					$elm$json$Json$Encode$list(encode),
					$elm$json$Json$Encode$encode(0)))));
};
var $author$project$Data$Textile$Simulator$lifeCycleImpacts = F2(
	function (db, simulator) {
		return A2(
			$elm$core$List$map,
			function (def) {
				return _Utils_Tuple2(
					def.label,
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(
							'Transports',
							($author$project$Data$Unit$impactToFloat(
								A2($author$project$Data$Impact$getImpact, def.trigram, simulator.transport.impacts)) / $author$project$Data$Unit$impactToFloat(
								A2($author$project$Data$Impact$getImpact, def.trigram, simulator.impacts))) * 100),
						A2(
							$elm$core$List$map,
							function (_v0) {
								var label = _v0.label;
								var impacts = _v0.impacts;
								return _Utils_Tuple2(
									$author$project$Data$Textile$Step$Label$toString(label),
									($author$project$Data$Unit$impactToFloat(
										A2($author$project$Data$Impact$getImpact, def.trigram, impacts)) / $author$project$Data$Unit$impactToFloat(
										A2($author$project$Data$Impact$getImpact, def.trigram, simulator.impacts))) * 100);
							},
							$elm$core$Array$toList(simulator.lifeCycle))));
			},
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.scopes;
					},
					$elm$core$List$member($author$project$Data$Impact$Textile)),
				A2(
					$elm$core$List$filter,
					function ($) {
						return $.primary;
					},
					db.impacts)));
	});
var $author$project$Views$Dataviz$view = F2(
	function (db, simulator) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('pt-2')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h2,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('h4 text-center pt-3')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Composition du score PEF')
						])),
					A3(
					$elm$html$Html$node,
					'chart-pefpie',
					_List_fromArray(
						[
							A2(
							$elm$html$Html$Attributes$attribute,
							'data',
							A2($author$project$Data$Impact$getPefPieData, db.impacts, simulator.impacts))
						]),
					_List_Nil),
					A2(
					$elm$html$Html$h2,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('h4 text-center pt-5 pb-1')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Poids des étapes pour chaque impact')
						])),
					$author$project$Views$Dataviz$chart(
					A2($author$project$Data$Textile$Simulator$lifeCycleImpacts, db, simulator))
				]));
	});
var $author$project$Page$Textile$Simulator$simulatorView = F3(
	function (session, model, simulator) {
		var db = session.db;
		var impact = model.impact;
		var funit = model.funit;
		var viewMode = model.viewMode;
		var inputs = simulator.inputs;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('row')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('col-lg-7')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$h1,
							_List_Nil,
							_List_fromArray(
								[
									$elm$html$Html$text('Simulateur ')
								])),
							$author$project$Views$Impact$viewDefinition(model.impact),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('row')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('col-sm-6 mb-2')
										]),
									_List_fromArray(
										[
											A2($author$project$Page$Textile$Simulator$productField, db, inputs.product)
										])),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('col-sm-6 mb-2')
										]),
									_List_fromArray(
										[
											$author$project$Page$Textile$Simulator$massField(model.massInput)
										]))
								])),
							$author$project$Views$Textile$Material$formSet(
							{add: $author$project$Page$Textile$Simulator$AddMaterial, inputs: inputs.materials, materials: db.materials, remove: $author$project$Page$Textile$Simulator$RemoveMaterial, selectInputText: $author$project$Page$Textile$Simulator$SelectInputText, update: $author$project$Page$Textile$Simulator$UpdateMaterial, updateShare: $author$project$Page$Textile$Simulator$UpdateMaterialShare}),
							A4($author$project$Page$Textile$Simulator$displayModeView, impact.trigram, funit, viewMode, session.query),
							_Utils_eq(viewMode, $author$project$Page$Textile$Simulator$ViewMode$Dataviz) ? A2($author$project$Views$Dataviz$view, db, simulator) : A2(
							$elm$html$Html$div,
							_List_Nil,
							_List_fromArray(
								[
									A3($author$project$Page$Textile$Simulator$lifeCycleStepsView, db, model, simulator),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('d-flex align-items-center justify-content-between mt-3 mb-5')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$a,
											_List_fromArray(
												[
													$author$project$Route$href($author$project$Route$Home)
												]),
											_List_fromArray(
												[
													$elm$html$Html$text('« Retour à l\'accueil')
												])),
											A2(
											$elm$html$Html$button,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('btn btn-secondary'),
													$elm$html$Html$Events$onClick($author$project$Page$Textile$Simulator$Reset),
													$elm$html$Html$Attributes$disabled(
													_Utils_eq(session.query, model.initialQuery))
												]),
											_List_fromArray(
												[
													$elm$html$Html$text('Réinitialiser le simulateur')
												]))
										]))
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('col-lg-5 bg-white')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('d-flex flex-column gap-3 mb-3 sticky-md-top'),
									A2($elm$html$Html$Attributes$style, 'top', '7px')
								]),
							_List_fromArray(
								[
									$author$project$Views$Impact$selector(
									{impacts: session.db.impacts, scope: $author$project$Data$Impact$Textile, selectedFunctionalUnit: model.funit, selectedImpact: model.impact.trigram, switchFunctionalUnit: $author$project$Page$Textile$Simulator$SwitchFunctionalUnit, switchImpact: $author$project$Page$Textile$Simulator$SwitchImpact}),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('Summary')
										]),
									_List_fromArray(
										[
											A2(
											$author$project$Views$Textile$Summary$view,
											{funit: model.funit, impact: model.impact, reusable: false, session: session},
											model.simulator)
										])),
									A2($author$project$Page$Textile$Simulator$linksView, session, model)
								]))
						]))
				]));
	});
var $author$project$Page$Textile$Simulator$view = F2(
	function (session, model) {
		return _Utils_Tuple2(
			'Simulateur',
			_List_fromArray(
				[
					A2(
					$author$project$Views$Container$centered,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('Simulator pb-3')
						]),
					function () {
						var _v0 = model.simulator;
						if (_v0.$ === 'Ok') {
							var simulator = _v0.a;
							return _List_fromArray(
								[
									A3($author$project$Page$Textile$Simulator$simulatorView, session, model, simulator),
									function () {
									var _v1 = model.modal;
									if (_v1.$ === 'NoModal') {
										return $elm$html$Html$text('');
									} else {
										return $author$project$Views$Modal$view(
											{
												close: $author$project$Page$Textile$Simulator$SetModal($author$project$Page$Textile$Simulator$NoModal),
												content: _List_fromArray(
													[
														$author$project$Views$Textile$SavedSimulation$comparator(
														{daysOfWear: simulator.daysOfWear, funit: model.funit, impact: model.impact, session: session, toggle: $author$project$Page$Textile$Simulator$ToggleComparedSimulation})
													]),
												footer: _List_Nil,
												formAction: $elm$core$Maybe$Nothing,
												noOp: $author$project$Page$Textile$Simulator$NoOp,
												size: $author$project$Views$Modal$ExtraLarge,
												title: 'Comparateur de simulations sauvegardées\u00A0: ' + (model.impact.label + (', ' + $author$project$Data$Unit$functionalToString(model.funit)))
											});
									}
								}()
								]);
						} else {
							var error = _v0.a;
							return _List_fromArray(
								[
									$author$project$Views$Alert$simple(
									{
										close: $elm$core$Maybe$Nothing,
										content: _List_fromArray(
											[
												$elm$html$Html$text(error)
											]),
										level: $author$project$Views$Alert$Danger,
										title: $elm$core$Maybe$Just('Erreur')
									})
								]);
						}
					}())
				]));
	});
var $author$project$Main$view = function (_v0) {
	var page = _v0.page;
	var mobileNavigationOpened = _v0.mobileNavigationOpened;
	var session = _v0.session;
	var pageConfig = A7($author$project$Views$Page$Config, session, mobileNavigationOpened, $author$project$Main$CloseMobileNavigation, $author$project$Main$OpenMobileNavigation, $author$project$Main$LoadUrl, $author$project$Main$ReloadPage, $author$project$Main$CloseNotification);
	var mapMsg = F2(
		function (msg, _v2) {
			var title = _v2.a;
			var content = _v2.b;
			return _Utils_Tuple2(
				title,
				A2(
					$elm$core$List$map,
					$elm$html$Html$map(msg),
					content));
		});
	switch (page.$) {
		case 'HomePage':
			var homeModel = page.a;
			return A2(
				$author$project$Views$Page$frame,
				pageConfig($author$project$Views$Page$Home),
				A2(
					mapMsg,
					$author$project$Main$HomeMsg,
					A2($author$project$Page$Home$view, session, homeModel)));
		case 'ApiPage':
			var examplesModel = page.a;
			return A2(
				$author$project$Views$Page$frame,
				pageConfig($author$project$Views$Page$Api),
				A2(
					mapMsg,
					$author$project$Main$ApiMsg,
					A2($author$project$Page$Api$view, session, examplesModel)));
		case 'ChangelogPage':
			var changelogModel = page.a;
			return A2(
				$author$project$Views$Page$frame,
				pageConfig($author$project$Views$Page$Changelog),
				A2(
					mapMsg,
					$author$project$Main$ChangelogMsg,
					A2($author$project$Page$Changelog$view, session, changelogModel)));
		case 'EditorialPage':
			var editorialModel = page.a;
			return A2(
				$author$project$Views$Page$frame,
				pageConfig(
					$author$project$Views$Page$Editorial(editorialModel.slug)),
				A2(
					mapMsg,
					$author$project$Main$EditorialMsg,
					A2($author$project$Page$Editorial$view, session, editorialModel)));
		case 'TextileExamplesPage':
			var examplesModel = page.a;
			return A2(
				$author$project$Views$Page$frame,
				pageConfig($author$project$Views$Page$TextileExamples),
				A2(
					mapMsg,
					$author$project$Main$TextileExamplesMsg,
					A2($author$project$Page$Textile$Examples$view, session, examplesModel)));
		case 'TextileExplorePage':
			var examplesModel = page.a;
			return A2(
				$author$project$Views$Page$frame,
				pageConfig($author$project$Views$Page$TextileExplore),
				A2(
					mapMsg,
					$author$project$Main$TextileExploreMsg,
					A2($author$project$Page$Textile$Explore$view, session, examplesModel)));
		case 'TextileSimulatorPage':
			var simulatorModel = page.a;
			return A2(
				$author$project$Views$Page$frame,
				pageConfig($author$project$Views$Page$TextileSimulator),
				A2(
					mapMsg,
					$author$project$Main$TextileSimulatorMsg,
					A2($author$project$Page$Textile$Simulator$view, session, simulatorModel)));
		case 'StatsPage':
			var statsModel = page.a;
			return A2(
				$author$project$Views$Page$frame,
				pageConfig($author$project$Views$Page$Stats),
				A2(
					mapMsg,
					$author$project$Main$StatsMsg,
					A2($author$project$Page$Stats$view, session, statsModel)));
		case 'FoodSimulatorPage':
			var foodModel = page.a;
			return A2(
				$author$project$Views$Page$frame,
				pageConfig($author$project$Views$Page$FoodSimulator),
				A2(
					mapMsg,
					$author$project$Main$FoodSimulatorMsg,
					A2($author$project$Page$Food$Simulator$view, session, foodModel)));
		case 'NotFoundPage':
			return A2(
				$author$project$Views$Page$frame,
				pageConfig($author$project$Views$Page$Other),
				_Utils_Tuple2(
					'Page manquante',
					_List_fromArray(
						[$author$project$Views$Page$notFound])));
		default:
			return A2(
				$author$project$Views$Page$frame,
				pageConfig($author$project$Views$Page$Other),
				_Utils_Tuple2(
					'Chargement…',
					_List_fromArray(
						[$author$project$Views$Page$loading])));
	}
};
var $author$project$Main$main = $elm$browser$Browser$application(
	{init: $author$project$Main$init, onUrlChange: $author$project$Main$UrlChanged, onUrlRequest: $author$project$Main$UrlRequested, subscriptions: $author$project$Main$subscriptions, update: $author$project$Main$update, view: $author$project$Main$view});
_Platform_export({'Main':{'init':$author$project$Main$main(
	A2(
		$elm$json$Json$Decode$andThen,
		function (rawStore) {
			return A2(
				$elm$json$Json$Decode$andThen,
				function (clientUrl) {
					return $elm$json$Json$Decode$succeed(
						{clientUrl: clientUrl, rawStore: rawStore});
				},
				A2($elm$json$Json$Decode$field, 'clientUrl', $elm$json$Json$Decode$string));
		},
		A2($elm$json$Json$Decode$field, 'rawStore', $elm$json$Json$Decode$string)))(0)}});}(this));