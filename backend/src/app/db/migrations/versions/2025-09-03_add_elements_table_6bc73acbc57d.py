# type: ignore
"""Add elements table

Revision ID: 6bc73acbc57d
Revises: 8b6326faa9c7
Create Date: 2025-09-03 15:56:44.158284

"""

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from advanced_alchemy.types import (
    GUID,
    ORA_JSONB,
    DateTimeUTC,
    EncryptedString,
    EncryptedText,
)
from alembic import op
from sqlalchemy import Text  # noqa: F401
from sqlalchemy.dialects import postgresql

if TYPE_CHECKING:
    pass

__all__ = [
    "downgrade",
    "upgrade",
    "schema_upgrades",
    "schema_downgrades",
    "data_upgrades",
    "data_downgrades",
]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = "6bc73acbc57d"
down_revision = "8b6326faa9c7"
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "element",
        sa.Column("id", sa.GUID(length=16), nullable=False),
        sa.Column("amount", sa.Float(), nullable=False),
        sa.Column("material_id", sa.GUID(length=16), nullable=False),
        sa.Column("component_id", sa.GUID(length=16), nullable=False),
        sa.Column("sa_orm_sentinel", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["component_id"],
            ["component.id"],
            name=op.f("fk_element_component_id_component"),
            ondelete="cascade",
        ),
        sa.ForeignKeyConstraint(
            ["material_id"],
            ["process.id"],
            name=op.f("fk_element_material_id_process"),
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_element")),
    )
    op.create_table(
        "process_element_transform",
        sa.Column("process_id", sa.GUID(length=16), nullable=False),
        sa.Column("element_id", sa.GUID(length=16), nullable=False),
        sa.ForeignKeyConstraint(
            ["element_id"],
            ["element.id"],
            name=op.f("fk_process_element_transform_element_id_element"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["process_id"],
            ["process.id"],
            name=op.f("fk_process_element_transform_process_id_process"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "process_id", "element_id", name=op.f("pk_process_element_transform")
        ),
    )
    with op.batch_alter_table("component", schema=None) as batch_op:
        batch_op.drop_column("elements")

    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("component", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "elements",
                postgresql.JSONB(astext_type=sa.Text()),
                autoincrement=False,
                nullable=True,
            )
        )

    op.drop_table("process_element_transform")
    op.drop_table("element")
    # ### end Alembic commands ###


def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""


def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
