# type: ignore
"""Add scopes

Revision ID: 8455e285aafc
Revises: fc6ea50df872
Create Date: 2025-06-11 16:45:32.258474

"""

import uuid
import warnings
from datetime import datetime, timezone
from typing import TYPE_CHECKING

import sqlalchemy as sa
from advanced_alchemy.types import (
    GUID,
    ORA_JSONB,
    DateTimeUTC,
    EncryptedString,
    EncryptedText,
)
from alembic import op
from sqlalchemy import String, Text  # noqa: F401
from sqlalchemy.sql import column, table

if TYPE_CHECKING:
    pass

__all__ = [
    "downgrade",
    "upgrade",
    "schema_upgrades",
    "schema_downgrades",
    "data_upgrades",
    "data_downgrades",
]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = "8455e285aafc"
down_revision = "fc6ea50df872"
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "scope",
        sa.Column("id", sa.GUID(length=16), nullable=False),
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("sa_orm_sentinel", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_scope")),
    )
    with op.batch_alter_table("scope", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_scope_value"), ["value"], unique=True)

    op.create_table(
        "component_scope",
        sa.Column("component_id", sa.GUID(length=16), nullable=False),
        sa.Column("scope_id", sa.GUID(length=16), nullable=False),
        sa.ForeignKeyConstraint(
            ["component_id"],
            ["component.id"],
            name=op.f("fk_component_scope_component_id_component"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["scope_id"],
            ["scope.id"],
            name=op.f("fk_component_scope_scope_id_scope"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "component_id", "scope_id", name=op.f("pk_component_scope")
        ),
    )
    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("component_scope")
    with op.batch_alter_table("scope", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_scope_value"))

    op.drop_table("scope")
    # ### end Alembic commands ###


def data_upgrades():
    """Add any optional data upgrade migrations here!"""

    scope = table(
        "scope",
        column("id", GUID),
        column("value", String),
        column("created_at", DateTimeUTC),
        column("updated_at", DateTimeUTC),
    )

    op.bulk_insert(
        scope,
        [
            {
                "id": uuid.uuid4(),
                "value": "food",
                "created_at": datetime.now(timezone.utc),
                "updated_at": datetime.now(timezone.utc),
            },
            {
                "id": uuid.uuid4(),
                "value": "object",
                "created_at": datetime.now(timezone.utc),
                "updated_at": datetime.now(timezone.utc),
            },
            {
                "id": uuid.uuid4(),
                "value": "textile",
                "created_at": datetime.now(timezone.utc),
                "updated_at": datetime.now(timezone.utc),
            },
            {
                "id": uuid.uuid4(),
                "value": "veli",
                "created_at": datetime.now(timezone.utc),
                "updated_at": datetime.now(timezone.utc),
            },
        ],
    )


def data_downgrades():
    """Add any optional data downgrade migrations here!"""

    op.execute("delete from scope")
