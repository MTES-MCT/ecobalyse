# type: ignore
"""Add categories for processes

Revision ID: b97f52901f2a
Revises: 4e9df9c39c35
Create Date: 2025-06-30 15:04:02.909783

"""

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from advanced_alchemy.types import (
    GUID,
    ORA_JSONB,
    DateTimeUTC,
    EncryptedString,
    EncryptedText,
)
from alembic import op
from sqlalchemy import Text  # noqa: F401
from sqlalchemy.dialects import postgresql

if TYPE_CHECKING:
    pass

__all__ = [
    "downgrade",
    "upgrade",
    "schema_upgrades",
    "schema_downgrades",
    "data_upgrades",
    "data_downgrades",
]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = "b97f52901f2a"
down_revision = "4e9df9c39c35"
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "process_category",
        sa.Column("id", sa.GUID(length=16), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("sa_orm_sentinel", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_process_category")),
    )
    op.create_table(
        "process_process_category",
        sa.Column("process_id", sa.GUID(length=16), nullable=False),
        sa.Column("process_category_id", sa.GUID(length=16), nullable=False),
        sa.ForeignKeyConstraint(
            ["process_category_id"],
            ["process_category.id"],
            name=op.f(
                "fk_process_process_category_process_category_id_process_category"
            ),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["process_id"],
            ["process.id"],
            name=op.f("fk_process_process_category_process_id_process"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "process_id",
            "process_category_id",
            name=op.f("pk_process_process_category"),
        ),
    )
    with op.batch_alter_table("process", schema=None) as batch_op:
        batch_op.drop_column("categories")

    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("process", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "categories",
                postgresql.ARRAY(
                    postgresql.ENUM(
                        "energy",
                        "eol",
                        "ingredient",
                        "material",
                        "material_type:metal",
                        "material_type:plastic",
                        "material_type:upholstery",
                        "material_type:wood",
                        "packaging",
                        "textile_material",
                        "transformation",
                        "transport",
                        "use",
                        name="category",
                    )
                ),
                autoincrement=False,
                nullable=False,
            )
        )

    op.drop_table("process_process_category")
    op.drop_table("process_category")
    # ### end Alembic commands ###


def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""


def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
