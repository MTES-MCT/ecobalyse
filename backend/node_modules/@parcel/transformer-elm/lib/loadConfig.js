"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.elmBinaryPath = elmBinaryPath;
exports.load = load;
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
function _diagnostic() {
  const data = _interopRequireDefault(require("@parcel/diagnostic"));
  _diagnostic = function () {
    return data;
  };
  return data;
}
function _commandExists() {
  const data = _interopRequireDefault(require("command-exists"));
  _commandExists = function () {
    return data;
  };
  return data;
}
function _nullthrows() {
  const data = _interopRequireDefault(require("nullthrows"));
  _nullthrows = function () {
    return data;
  };
  return data;
}
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
async function load({
  config
}) {
  const elmConfig = await config.getConfig(['elm.json']);
  if (!elmConfig) {
    elmBinaryPath(); // Check if elm is even installed
    throw new (_diagnostic().default)({
      diagnostic: {
        origin: '@parcel/elm-transformer',
        message: "The 'elm.json' file is missing.",
        hints: ["Initialize your elm project by running 'elm init'", "If you installed elm as project dependency then run 'yarn elm init' or 'npx elm init'"]
      }
    });
  }
  return null;
}
function elmBinaryPath() {
  let elmBinary = resolveLocalElmBinary();
  if (elmBinary == null && !_commandExists().default.sync('elm')) {
    throw new (_diagnostic().default)({
      diagnostic: {
        message: "Can't find 'elm' binary.",
        hints: ["You can add it as an dependency for your project by running 'yarn add -D elm' or 'npm add -D elm'", 'If you want to install it globally then follow instructions on https://elm-lang.org/'],
        origin: '@parcel/elm-transformer'
      }
    });
  }
  return elmBinary;
}
function resolveLocalElmBinary() {
  try {
    let result = require.resolve('elm/package.json');
    // $FlowFixMe
    let pkg = require('elm/package.json');
    let bin = (0, _nullthrows().default)(pkg.bin);
    return _path().default.join(_path().default.dirname(result), typeof bin === 'string' ? bin : bin.elm);
  } catch (_) {
    return null;
  }
}