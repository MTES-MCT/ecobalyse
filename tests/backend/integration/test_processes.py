import os
from pathlib import Path
from typing import TYPE_CHECKING, Any

import orjson
import pytest
from app.db import models as m
from app.domain.processes.deps import provide_processes_service
from app.domain.processes.schemas import Category, Unit
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

if TYPE_CHECKING:
    from httpx import AsyncClient

pytestmark = pytest.mark.anyio


here = Path(__file__).parent

processes_file = os.path.join(here, "../../../public/data/processes.json")


# Be sure that the file generated by the data pipeline doesn’t contain invalid categories values
# if this test fails, consider adding the new value to the Category enum
async def test_process_categories() -> None:
    with open(processes_file, "rb") as file:
        json_data = orjson.loads(file.read())
        possible_categories = [member.value for member in Category]

        for process in json_data:
            for category in process["categories"]:
                assert category in possible_categories


# Be sure that the file generated by the data pipeline doesn’t contain invalid categories values
# if this test fails, consider adding the new value to the Category enum
async def test_process_units() -> None:
    with open(processes_file, "rb") as file:
        json_data = orjson.loads(file.read())
        possible_units = [member.value for member in Unit]

        for process in json_data:
            assert process["unit"] in possible_units


async def test_update_process(
    session: AsyncSession, raw_processes: list[dict[str, Any]]
):
    from app.db.models.process_process_category import (
        process_process_category as process_process_category_table,
    )

    process_id = "97c209ec-7782-5a29-8c47-af7f17c82d11"
    processes_service = await anext(provide_processes_service(session))

    categories = (await session.scalars(select(m.ProcessCategory))).all()

    # We intially have 3 categories in the fixtures
    init_categories_len = 3
    assert len(categories) == init_categories_len

    process_categories = (
        await session.execute(select(process_process_category_table))
    ).all()

    # Categories are linked 4 times in the data fixtures
    assert len(process_categories) == init_categories_len + 1

    for process in raw_processes:
        if process["id"] == process_id:
            process["displayName"] = "New test"
            process["categories"] = [
                "material",
                "material_type:organic_fibers",
                "material_type:upholstery",
            ]

            await processes_service.update(item_id=process["id"], data=process)

            new_process = await processes_service.get(item_id=process_id)
            assert new_process.display_name == "New test"
            assert sorted(
                [category.name for category in new_process.process_categories]
            ) == sorted(
                ["material", "material_type:organic_fibers", "material_type:upholstery"]
            )

    categories = (await session.scalars(select(m.ProcessCategory))).all()

    # Created "material_type:upholstery"
    assert len(categories) == init_categories_len + 1

    process_categories = (
        await session.execute(select(process_process_category_table))
    ).all()

    # We’ve removed one category link (transformation) and added 3 new categories link
    assert len(process_categories) == init_categories_len + 1 - 1 + 3


async def test_detailed_process_access(
    client: "AsyncClient",
    user_token_headers: dict[str, str],
) -> None:
    # Non authenticated access
    response = await client.get(
        "/api/processes/97c209ec-7782-5a29-8c47-af7f17c82d11",
    )
    assert response.status_code == 200
    json_response = response.json()

    # Unauthenticated user should have zero detailed impacts
    assert json_response["impacts"] == {
        "acd": 0.0,
        "cch": 0.0,
        "ecs": 2026.16,
        "etf": 0.0,
        "etf-c": 0.0,
        "fru": 0.0,
        "fwe": 0.0,
        "htc": 0.0,
        "htc-c": 0.0,
        "htn": 0.0,
        "htn-c": 0.0,
        "ior": 0.0,
        "ldu": 0.0,
        "mru": 0.0,
        "ozd": 0.0,
        "pco": 0.0,
        "pef": 9.0,
        "pma": 0.0,
        "swe": 0.0,
        "tre": 0.0,
        "wtu": 0.0,
    }

    # Authenticated user should have detailed impacts
    response = await client.get(
        "/api/processes/97c209ec-7782-5a29-8c47-af7f17c82d11",
        headers=user_token_headers,
    )
    assert response.status_code == 200
    json_response = response.json()

    assert json_response == {
        "alias": None,
        "categories": ["transformation"],
        "comment": "corr2 : inventaires enrichis (substances chimiques)\nAncien identifiant (12/2024): ecobalyse-impression-pigmentaire.",
        "density": 0.0,
        "displayName": "Impression (pigmentaire)",
        "elecMJ": 1.61,
        "heatMJ": 10.74,
        "id": "97c209ec-7782-5a29-8c47-af7f17c82d11",
        "impacts": {
            "acd": 1.0,
            "cch": 2.0,
            "ecs": 2026.16,
            "etf": 1.0,
            "etf-c": 944.0,
            "fru": 2.0,
            "fwe": 3.0,
            "htc": 3.0,
            "htc-c": 1.11e-11,
            "htn": 2.0,
            "htn-c": 2.03e-8,
            "ior": 2.0,
            "ldu": 5.0,
            "mru": 4.0,
            "ozd": 2.0,
            "pco": 7.0,
            "pef": 9.0,
            "pma": 7.0,
            "swe": 7.0,
            "tre": 5.0,
            "wtu": 5.0,
        },
        "scopes": ["textile"],
        "source": "Custom",
        "sourceId": "Impression (pigmentaire)",
        "unit": "kg",
        "waste": 0.0,
    }


async def test_processes_access(
    client: "AsyncClient",
    user_token_headers: dict[str, str],
) -> None:
    # Non authenticated access
    response = await client.get(
        "/api/processes",
    )
    assert response.status_code == 200
    json_response = response.json()

    # Unauthenticated user should have zero detailed impacts
    assert json_response[1]["impacts"] == {
        "acd": 0.0,
        "cch": 0.0,
        "ecs": 2026.16,
        "etf": 0.0,
        "etf-c": 0.0,
        "fru": 0.0,
        "fwe": 0.0,
        "htc": 0.0,
        "htc-c": 0.0,
        "htn": 0.0,
        "htn-c": 0.0,
        "ior": 0.0,
        "ldu": 0.0,
        "mru": 0.0,
        "ozd": 0.0,
        "pco": 0.0,
        "pef": 9.0,
        "pma": 0.0,
        "swe": 0.0,
        "tre": 0.0,
        "wtu": 0.0,
    }

    # Authenticated user should have detailed impacts
    response = await client.get(
        "/api/processes",
        headers=user_token_headers,
    )
    assert response.status_code == 200
    json_response = response.json()

    assert json_response[1] == {
        "alias": None,
        "categories": ["transformation"],
        "comment": "corr2 : inventaires enrichis (substances chimiques)\nAncien identifiant (12/2024): ecobalyse-impression-pigmentaire.",
        "density": 0.0,
        "displayName": "Impression (pigmentaire)",
        "elecMJ": 1.61,
        "heatMJ": 10.74,
        "id": "97c209ec-7782-5a29-8c47-af7f17c82d11",
        "impacts": {
            "acd": 1.0,
            "cch": 2.0,
            "ecs": 2026.16,
            "etf": 1.0,
            "etf-c": 944.0,
            "fru": 2.0,
            "fwe": 3.0,
            "htc": 3.0,
            "htc-c": 1.11e-11,
            "htn": 2.0,
            "htn-c": 2.03e-8,
            "ior": 2.0,
            "ldu": 5.0,
            "mru": 4.0,
            "ozd": 2.0,
            "pco": 7.0,
            "pef": 9.0,
            "pma": 7.0,
            "swe": 7.0,
            "tre": 5.0,
            "wtu": 5.0,
        },
        "scopes": ["textile"],
        "source": "Custom",
        "sourceId": "Impression (pigmentaire)",
        "unit": "kg",
        "waste": 0.0,
    }
