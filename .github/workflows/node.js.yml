# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master, staging ]
  pull_request:
    branches: [ master, staging ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache node_modules
      id: cache-node_modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: node_modules-${{ hashFiles('package.json', 'package-lock.json') }}

    - name: Cache ~/.elm
      # see https://docs.microsoft.com/en-us/answers/questions/510640/deploy-elm-app-to-azure-static-website-from-github.html
      uses: actions/cache@v4
      with:
        path: ~/.elm
        key: elm-cache-${{ hashFiles('elm.json') }}
        restore-keys: elm-cache-

    - name: Cache pipenv virtualenv
      uses: actions/cache@v4
      with:
        path: ~/.local/share/virtualenvs
        key: ${{ runner.os }}-${{ matrix.python-version }}-pipenv-${{ hashFiles('Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv-

    - name: Install Node dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Install Python dependencies
      run: pip install pipenv && pipenv install


    - name: Install Ubuntu dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gettext

    - name: Build app
      run: npm run build --if-present

    - name: Build Elm static Db
      run: npm run db:build

    - name: Run prettier & ruff formatting check
      run: npm run lint:all

    - name: Run elm-review
      run: npm run test:review

    - name: Run client tests
      run: npm run test:client

    - name: Run server tests
      run: pipenv run backend/update.sh && npm run test:server-ci
